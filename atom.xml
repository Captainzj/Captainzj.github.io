<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Go Further</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-16T15:39:50.779Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CaptainSE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Win10+Ubuntu18.04.md</title>
    <link href="http://yoursite.com/2019/04/15/Win10-Ubuntu18-04/"/>
    <id>http://yoursite.com/2019/04/15/Win10-Ubuntu18-04/</id>
    <published>2019-04-15T11:49:13.000Z</published>
    <updated>2019-04-16T15:39:50.779Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="双系统"><a href="#双系统" class="headerlink" title="双系统"></a>双系统</h2><h3 id="Windows10-安装"><a href="#Windows10-安装" class="headerlink" title="Windows10 安装"></a>Windows10 安装</h3><ul><li>选择最新版本的多版本（家庭版\企业版\专业版）镜像烧录启动盘</li></ul><h3 id="Ubuntu18-04-安装"><a href="#Ubuntu18-04-安装" class="headerlink" title="Ubuntu18.04 安装"></a>Ubuntu18.04 安装</h3><ul><li>安装前，于win10系统 「此电脑（右键） - 管理 - 存储/磁盘管理」对欲安装Ubuntu系统的磁盘分区进行压缩卷操作</li><li>使用UltraISO烧录镜像时，需选择便携启动</li><li>使用启动盘安装过程，前期无脑Continue；直至选择安装类型（方式），选底部「else something」<ul><li>固态硬盘<ul><li>/ 根目录：32768MB(32G)  主分区（划重点）</li><li>swap：32768MB(32G)  逻辑分区</li><li>EFI：1024MB(1G) 逻辑分区</li></ul></li><li>机械硬盘<ul><li>/home：976GB 逻辑分区  </li></ul></li></ul></li><li>（划重点）若开机欲由Ubuntu引导，须选用EFI所在盘符作为loader；若需由Windows引导boot，选「Win Boot Manager」所在盘符作为loader<ul><li>若重启时，默认为Windows自启，无Ubuntu引导，使用EasyBCD添加开机引导项</li></ul></li></ul><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>装机BUG，「推倒重来」是最优解    </p><h2 id="Ubuntu-深度学习环境配置"><a href="#Ubuntu-深度学习环境配置" class="headerlink" title="Ubuntu 深度学习环境配置"></a>Ubuntu 深度学习环境配置</h2><h3 id="NVIDIA驱动安装"><a href="#NVIDIA驱动安装" class="headerlink" title="NVIDIA驱动安装"></a>NVIDIA驱动安装</h3><p>参考：<a href="https://blog.csdn.net/wf19930209/article/details/81877822" target="_blank" rel="noopener">Linux安装NVIDIA显卡驱动的正确姿势</a>、<a href="https://blog.csdn.net/tjuyanming/article/details/80862290" target="_blank" rel="noopener">Ubuntu 18.04 NVIDIA驱动安装总结</a><br>NVIDIA 驱动程序下载：<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">https://www.nvidia.cn/Download/index.aspx?lang=cn</a></p><ul><li><p>禁用nouveau</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. 编辑黑名单配置文件 `$ sudo gedit /etc/modprobe.d/blacklist.conf`</span><br><span class="line">2. 文件末添加</span><br><span class="line">    `blacklist nouveau`</span><br><span class="line">    `options nouveau modeset=0`</span><br><span class="line">3. 更新initramfs   `$ sudo update-initramfs -u`</span><br><span class="line">4. 重启            `$ reboot`</span><br><span class="line">5. 重启后执行 `$ lsmod | grep nouveau` （无输出即可）</span><br></pre></td></tr></table></figure></li><li><p>将<code>ppa:graphics-drivers/ppa</code>存储库添加到系统中</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line"><span class="meta">$</span> sudo apt update # recommended: then run `sudo apt upgrade`</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>识别显卡模型和推荐的驱动程序</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ubuntu-drivers devices</span><br></pre></td></tr></table></figure></li><li><p>卸载所有安装的nvidia驱动<br>  如果之前没安装过nvidia驱动，也可以不执行此步骤，但是推荐执行，无害</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get --purge remove   nvidia-*</span><br></pre></td></tr></table></figure><p>  卸载完以后，重启</p></li><li><p>自动安装</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure></li><li><p>安装成功后重启</p><ul><li><p>若是UEFI启动，关闭Secure Boot（划重点!!!）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 验证NVIDIA驱动是否安装成功</span><br><span class="line"><span class="meta">$</span> nvidia-smi    #输入指令查看显卡信息 </span><br><span class="line"><span class="meta">$</span> nvidia-settings   #显卡设置</span><br><span class="line"><span class="meta">$</span> cat /proc/driver/nvidia/version 查看nvidia驱动的版本（版本418.56）</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><h5 id="结束X-window服务"><a href="#结束X-window服务" class="headerlink" title="结束X-window服务"></a>结束X-window服务</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KUbuntu : sudo /etc/init.d kdm stop</span><br><span class="line"></span><br><span class="line">Ubuntu : sudo /etc/init.d/gdm3 stop</span><br><span class="line"></span><br><span class="line">Ubuntu(&gt;11.10) : sudo /etc/init.d lightdm stop  或sudo service lightdm stop</span><br><span class="line"></span><br><span class="line">或者 $ sudo telinit 3    # 停止可视化桌面</span><br></pre></td></tr></table></figure><p>按Ctrl + Alt + F1 进入tty1控制台</p><h5 id="重启X-window"><a href="#重启X-window" class="headerlink" title="重启X-window"></a>重启X-window</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KUbuntu : sudo /etc/init.d kdm restart</span><br><span class="line"></span><br><span class="line">Ubuntu : sudo /etc/init.d gdm restart</span><br><span class="line"></span><br><span class="line">Ubuntu(&gt;11.10) : sudo start lightdm 或 sudo service lightdm start</span><br></pre></td></tr></table></figure><p> 按Ctrl + Alt + F7返回tty7图形界面   </p><h3 id="CUDA安装"><a href="#CUDA安装" class="headerlink" title="CUDA安装"></a>CUDA安装</h3><p>参考：<a href="https://blog.csdn.net/m0_37924639/article/details/78785699" target="_blank" rel="noopener">Linux下CUDA+CUDNN+TensorFlow安装笔记</a>、<a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#ubuntu-installation" target="_blank" rel="noopener">NVIDIA CUDA Installation Guide for Linux</a>、<a href="https://blog.csdn.net/qq997843911/article/details/85039021" target="_blank" rel="noopener">ubuntu18.04 安装NVIDIA显卡驱动与 cuda10 环境</a><br>CUDA Toolkit Archive：<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></p><ol><li><p>进入CUDA安装脚本所在的目录，执行以下命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh cuda_10.0.130_410.48_linux.run # sh 你的版本.run</span><br></pre></td></tr></table></figure><ul><li>会出现一段极长的协议，一直按空格键或Enter键到100%，最后输入accept表示同意，然后会选择是否安装nvidia驱动418，<strong>选择no</strong>（之前已安装过显卡驱动），遇到询问是否安装opengl的地方如果你是双显卡也务必<strong>选择不安装</strong>，其他同意或默认即可。</li><li><code>Missing recommended library</code></li></ul></li><li><p>安装完成后需要将CUDA的路径加入环境变量，首先打开<code>~/.bashrc</code>文件，添加以下代码：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>注意，根据自己的版本，修改cuda-10.0...</span><br><span class="line">export PATH=/usr/local/cuda-10.0/bin$&#123;PATH:+:$PATH&#125;&#125;   </span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开<code>/etc/profile</code>，文末加上以下代码：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/cuda/bin:$PATH</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> source /etc/profile</span><br><span class="line"><span class="meta">$</span> source ~/.bashrc</span><br></pre></td></tr></table></figure><ol start="4"><li>安装第三方依赖<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> nvcc -V   #查看CUDA的版本</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> run Sample </span><br><span class="line"><span class="meta">$</span> cd /usr/local/cuda/samples/2_Graphics/volumeRender</span><br><span class="line"><span class="meta">$</span> sudo make</span><br><span class="line"><span class="meta">$</span> ./volumeRender</span><br></pre></td></tr></table></figure><h3 id="cuDNN-安装"><a href="#cuDNN-安装" class="headerlink" title="cuDNN 安装"></a>cuDNN 安装</h3><p>参考：<a href="https://blog.csdn.net/m0_37924639/article/details/78785699" target="_blank" rel="noopener">Linux下CUDA+CUDNN+TensorFlow安装笔记</a>、<a href="https://blog.csdn.net/qq_32408773/article/details/84112166" target="_blank" rel="noopener">Ubuntu18.04安装CUDA10、CUDNN</a><br><a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">cuDNN Download</a></p><p>进入CUDNN安装包所在目录，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i runtime包.deb</span><br><span class="line">sudo dpkg -i developer包.deb</span><br><span class="line">sudo dpkg -i 代码sample包.deb</span><br></pre></td></tr></table></figure><p>至此，CUDNN安装完成</p><hr><p>下载完成后解压<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo tar -xvzf cudnn-10.0-linux-x64-v7.5.0.56.tgz</span><br></pre></td></tr></table></figure></p><p>进入文件夹：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include/ </span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ </span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h </span><br><span class="line">sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure></p><p>在终端查看CUDNN版本：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/weixin_40859436/article/details/83152249" target="_blank" rel="noopener">Ubuntu18.04+RTX2080+cuda10+tensorflow</a>、<a href="https://blog.csdn.net/u010801439/article/details/80483036" target="_blank" rel="noopener">真实机下 ubuntu 18.04 安装GPU +CUDA+cuDNN 以及其版本选择（亲测非常实用）</a></p><h2 id="Ubuntu-常用软件"><a href="#Ubuntu-常用软件" class="headerlink" title="Ubuntu 常用软件"></a>Ubuntu 常用软件</h2><h3 id="TeamViewer"><a href="#TeamViewer" class="headerlink" title="TeamViewer"></a>TeamViewer</h3><ol><li>下载*.deb package 14.2.2558 <a href="https://www.teamviewer.com/zhcn/download/linux/" target="_blank" rel="noopener">https://www.teamviewer.com/zhcn/download/linux/</a></li><li><p>命令行安装</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i teamviewer-host_14.2.8352_amd64.deb</span><br><span class="line">sudo apt install -f</span><br></pre></td></tr></table></figure></li><li><p>启动teamviewer</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> teamviewer</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="环境配置" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>DeepLearing_papers</title>
    <link href="http://yoursite.com/2019/03/27/DeepLearning-papers/"/>
    <id>http://yoursite.com/2019/03/27/DeepLearning-papers/</id>
    <published>2019-03-27T05:54:56.000Z</published>
    <updated>2019-03-27T17:18:13.709Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h4 id="《Fully-Convolutional-Networks-for-Semantic-Segmentation》"><a href="#《Fully-Convolutional-Networks-for-Semantic-Segmentation》" class="headerlink" title="《Fully Convolutional Networks for Semantic Segmentation》"></a>《Fully Convolutional Networks for Semantic Segmentation》</h4><h5 id="论文链接"><a href="#论文链接" class="headerlink" title="论文链接"></a>论文链接</h5><p><a href="https://arxiv.org/abs/1411.4038" target="_blank" rel="noopener">Fully Convolutional Networks for Semantic Segmentation</a></p><h5 id="参考笔记"><a href="#参考笔记" class="headerlink" title="参考笔记"></a>参考笔记</h5><p><a href="https://cloud.tencent.com/developer/article/1008418" target="_blank" rel="noopener">深度学习论文笔记（六）— FCN 全连接网络</a>、<a href="https://zhuanlan.zhihu.com/p/37618638" target="_blank" rel="noopener">阅读笔记（知乎）</a>、<a href="https://blog.csdn.net/tangwei2014/article/details/46882257" target="_blank" rel="noopener">论文阅读笔记</a> </p><h5 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20150714192055956?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>2015年的CVPR上J.Long等人提出一种对图像进行<code>端到端的语义分割</code>的策略——<code>利用FCN代替传统的CNN</code>，训练一个端到端的网络，让网络在<code>像素级别进行分类预测</code>，直接预测出全图像素所对应的语义标签并将这些语义预测标签映射到对应的位置上。<br>即就是：<br>把CNN改为FCN，输入一幅图像后直接在输出端得到预测结果，也就是每个像素所属的类，从而得到一个端到端（end-to-end）的方法来实现图像的语义分割（image semantic segmentation）。</p><h5 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20150714193600011?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><small>图示说明：<code>FCN将原本VGGNet最后三层线性全连接层等效地改进成了相应的卷积层</code>。卷积模板大小就是输入的特征map的大小，也就是说把全连接网络看成是对整张输入map做卷积，全连接层分别有4096个6*6的卷积核，4096个1*1的卷积核，1000个1*1的卷积核，接下来就要对这1000个1*1卷积核的输出做上采样，得到1000个原图大小（如32*32）的输出，这些输出合并后得到热力图（heatmap）.</small></p><hr><p>上述方式能够很好地利用已经训练好的VGGNet模型的参数，不用在进行从头到尾训练，只需要对一些参数进行相应的<code>微调</code>即可，训练效率将大幅度提高。</p><p><strong>1. 任意尺寸图像对应输入输出的实现：</strong></p><blockquote><p>对于CNN网络结构需确定输入图片大小；对于FCN无需关注输入尺寸</p></blockquote><p>一个确定的CNN网络结构之所以要固定输入图片大小，是因为全连接层权值数固定，而该权值数和feature map大小有关。<a href="https://zhuanlan.zhihu.com/p/37618638" target="_blank" rel="noopener">详情说明</a><br>对于FCN，其在CNN的基础上把1000个结点的全连接层改为含有1000个1×1卷积核的卷积层，经过这一层，还是得到二维的feature map，所以我们可以不关心这个feature map大小。</p><p><strong>2. 通过上采样得到预测映射（dense prediction）的策略：</strong><br>在试验中发现，得到的分割结果比较粗糙，所以考虑加入更多前层的细节信息，也就是把倒数第几层的输出和最后的输出做一个fusion，实际上也就是加和：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20150714195109640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>2.1 第一种方法对所得特征图像直接进行32倍的上采样，被称为<code>FCN-32s</code>，处理方法简单迅速，但是其采样预测结果的边缘信息比较模糊，无法表现得更具体。<br>2.2 第二种方法提出了层跨越（skiplayers）的思路，即特征图像进行2倍的上采样后，将其结果与第四层(skiplayer)池化操作后的结果相迭加，之后再对结果进行16倍上采样，最终获得采样预测，即<code>FCN-16s</code>。其将低层的finelayer与高层的coarselayer进行结合，兼顾了局部信息与全局信息，对像素的空间判别与语义判别进行了很好的折中处理。相较FCN-32s，FCN-16s所获得的采样预测不管是从预测结果还是网络结构来说显然都更加优秀。<br>2.3 第三种方法则是在FCN-16s的基础上，进行了与第三层(skiplayer)池化操作后的结果相迭加，再对结果进行8倍上采样的<code>FCN-8s</code>。<strong>显然，其生成的语义标签图像是三种情况中最好的。</strong><br>续言：在逐层fusion的过程中，做到第三行再往下，结果又会变差，所以作者做到这里就停了。</p><h4 id="《The-One-Hundred-Layers-Tiramisu-Fully-Convolutional-DenseNets-for-Semantic-Segmentation》"><a href="#《The-One-Hundred-Layers-Tiramisu-Fully-Convolutional-DenseNets-for-Semantic-Segmentation》" class="headerlink" title="《The One Hundred Layers Tiramisu: Fully Convolutional DenseNets for Semantic Segmentation》"></a>《The One Hundred Layers Tiramisu: Fully Convolutional DenseNets for Semantic Segmentation》</h4><h5 id="论文链接-1"><a href="#论文链接-1" class="headerlink" title="论文链接"></a>论文链接</h5><p><a href="https://arxiv.org/pdf/1611.09326.pdf" target="_blank" rel="noopener">The One Hundred Layers Tiramisu: Fully Convolutional DenseNets for Semantic Segmentation</a></p><h5 id="代码链接"><a href="#代码链接" class="headerlink" title="代码链接"></a>代码链接</h5><p>PyTorch代码：</p><ul><li><a href="https://github.com/bfortuner/pytorch_tiramisu" target="_blank" rel="noopener">https://github.com/bfortuner/pytorch_tiramisu</a></li><li><a href="https://github.com/baldassarreFe/pytorch-densenet-tiramisu" target="_blank" rel="noopener">https://github.com/baldassarreFe/pytorch-densenet-tiramisu</a></li></ul><p>tensorflow代码：</p><ul><li><a href="https://github.com/HasnainRaz/FC-DenseNet-TensorFlow" target="_blank" rel="noopener">https://github.com/HasnainRaz/FC-DenseNet-TensorFlow</a></li></ul><p>实验代码：</p><ul><li><a href="https://github.com/fourmi1995/IronSegExperiment-FC-DenseNet.git" target="_blank" rel="noopener">https://github.com/fourmi1995/IronSegExperiment-FC-DenseNet.git</a></li><li><a href="https://github.com/SimJeg/FC-DenseNet" target="_blank" rel="noopener">https://github.com/SimJeg/FC-DenseNet</a></li></ul><h5 id="参考笔记-1"><a href="#参考笔记-1" class="headerlink" title="参考笔记"></a>参考笔记</h5><p><a href="https://www.cnblogs.com/fourmi/p/9881741.html" target="_blank" rel="noopener">论文阅读笔记</a>、<a href="https://zhuanlan.zhihu.com/p/31730274" target="_blank" rel="noopener">【CV-Semantic Segmentation】FC-DenseNet阅读笔记</a></p><h5 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h5><p><center><br><img src="/2019/03/27/DeepLearning-papers/Figure1.png" width="300"><br></center><br>本论文将DenseNets扩展为FCNs，再加上上采样路径来恢复输入分辨率。在特征图上采样过程中，增加上采样通道无疑会增加计算量和参数个数，为了消除该影响，我们<code>仅在dense模块后增加上采样通道</code>，这使得每种分辨率的dense模块<code>上采样通道与池化层个数无关</code>，通过下采样和上采样间的跨层连接，高分辨率的信息得以传递。</p><p><strong>主要贡献：</strong><br>（1）改进DenseNet结构为FCN用于分割，同时缓解了feature map数量的激增。<br>（2）根据dense block提出的上采样结构，比普通的上采样方式效果好很多。<br>（3）该模型不需要预训练模型和后处理过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="Paper" scheme="http://yoursite.com/categories/Paper/"/>
    
    
  </entry>
  
  <entry>
    <title>PyTorch_Run_Notice</title>
    <link href="http://yoursite.com/2019/03/17/PyTorch-Run-Notice/"/>
    <id>http://yoursite.com/2019/03/17/PyTorch-Run-Notice/</id>
    <published>2019-03-16T18:53:23.000Z</published>
    <updated>2019-03-20T15:31:17.013Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h4 id="使用多张GPU"><a href="#使用多张GPU" class="headerlink" title="使用多张GPU"></a>使用多张GPU</h4><p>方式一：（推荐）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">outputs = nn.parallel.data_parallel(model, inputs, device_ids=[<span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>方式二：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">opt.device = t.device(<span class="string">'cuda:2,3'</span>) <span class="keyword">if</span> opt.use_gpu <span class="keyword">else</span> t.device(<span class="string">'cpu'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">model=nn.DataParallel(model, device_ids=[<span class="number">2</span>, <span class="number">3</span>]) </span><br><span class="line">outputs = model(inputs)</span><br></pre></td></tr></table></figure><ul><li>可能会报错：<code>RuntimeError: all tensors must be on devices[0]</code></li></ul><h5 id="使用指定的GPU"><a href="#使用指定的GPU" class="headerlink" title="使用指定的GPU"></a>使用指定的GPU</h5><p>直接终端中设定：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=[2,3] python main.py</span><br></pre></td></tr></table></figure></p><p>or python代码中设定：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">"CUDA_VISIBLE_DEVICES"</span>] = [<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><ul><li>训练集（Train）与 验证集（Valid）<ul><li>有label，可计算loss、acc  （loss：概率  acc：实际统计）</li><li>对于小数据集，以8：2比例划分  （数据量大时，亦可7：3划分）</li><li>仅使用训练集时，进行数据增强、后向传播<code>backward</code>、优化超参数<code>optimize</code></li></ul></li><li>测试集（Test）<ul><li>无label</li></ul></li></ul><p>注：优化模型时，尝试交叉验证</p><h4 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h4><ul><li><code>Tensor.item() → int</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PyTorch学习之路_CSDN</title>
    <link href="http://yoursite.com/2019/03/14/PyTorch%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF_CSDN/"/>
    <id>http://yoursite.com/2019/03/14/PyTorch学习之路_CSDN/</id>
    <published>2019-03-14T09:03:30.000Z</published>
    <updated>2019-03-16T17:30:00.350Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】转载于 <a href="https://blog.csdn.net/u014380165" target="_blank" rel="noopener">AI之路</a></p><a id="more"></a><h2 id="PyTorch学习之路（level1）——训练一个图像分类模型"><a href="#PyTorch学习之路（level1）——训练一个图像分类模型" class="headerlink" title="PyTorch学习之路（level1）——训练一个图像分类模型"></a><a href="https://blog.csdn.net/u014380165/article/details/78525273" target="_blank" rel="noopener">PyTorch学习之路（level1）——训练一个图像分类模型</a></h2><h3 id="数据导入部分"><a href="#数据导入部分" class="headerlink" title="数据导入部分"></a>数据导入部分</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_dir = <span class="string">'/data'</span></span><br><span class="line">image_datasets = &#123;x: datasets.ImageFolder(</span><br><span class="line">                    os.path.join(data_dir, x),</span><br><span class="line">                    data_transforms[x])， </span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]&#125;</span><br></pre></td></tr></table></figure><h4 id="data-transforms"><a href="#data-transforms" class="headerlink" title="data_transforms"></a>data_transforms</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_transforms = &#123;</span><br><span class="line">    <span class="string">'train'</span>: transforms.Compose([</span><br><span class="line">        transforms.RandomSizedCrop(<span class="number">224</span>),  <span class="comment"># 输入对象是PIL Image</span></span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ]),</span><br><span class="line">    <span class="string">'val'</span>: transforms.Compose([</span><br><span class="line">        transforms.Scale(<span class="number">256</span>),  <span class="comment"># 目前已经被transforms.Resize类取代</span></span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize([<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="torch-utils-data-DataLoader"><a href="#torch-utils-data-DataLoader" class="headerlink" title="torch.utils.data.DataLoader"></a>torch.utils.data.DataLoader</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataloders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=<span class="number">4</span>, shuffle=<span class="keyword">True</span>, num_workers=<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]&#125;</span><br></pre></td></tr></table></figure><p><code>torchvision.datasets.ImageFolder</code>仅返回list，list是不能作为模型输入的，因此在PyTorch中需要用另一个类来封装list，那就是：torch.utils.data.DataLoader。（list → Tensor）</p><h4 id="torch-utils-data-Dataset"><a href="#torch-utils-data-Dataset" class="headerlink" title="torch.utils.data.Dataset"></a>torch.utils.data.Dataset</h4><ul><li>这是一个抽象类，在pytorch中所有和数据相关的类（例如，torchvision.datasets.ImageFolder、torch.util.data.DataLoader）都要继承这个类来实现。</li><li>当你的数据不是按照一个类别一个文件夹这种方式存储时，你就要自定义一个类来读取数据，自定义的这个类必须继承自torch.utils.data.Dataset这个基类，最后同样用torch.utils.data.DataLoader封装成Tensor。</li></ul><h5 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h5><p>将Tensor数据类型封装成Variable数据类型，便可以作为模型的输入了 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloders[<span class="string">'train'</span>]:  <span class="comment"># type(dataloaders): Dictionary</span></span><br><span class="line">   inputs, labels = data   <span class="comment"># type(input) / type(labels): Tensor</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> use_gpu:</span><br><span class="line">       inputs = Variable(inputs.cuda())</span><br><span class="line">       labels = Variable(labels.cuda())</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       inputs, labels = Variable(inputs), Variable(labels)</span><br></pre></td></tr></table></figure></p><ul><li>Tensor + gradient_Info → Variable</li><li><p>Variable.data → Tensor</p><ul><li>Tensor: torch.tensor</li><li>Variable: torch.autograd.Variable</li></ul></li></ul><h3 id="导入模型"><a href="#导入模型" class="headerlink" title="导入模型"></a>导入模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = models.resnet18(pretrained=<span class="keyword">True</span>)  <span class="comment"># 加载噫预训练的模型参数</span></span><br><span class="line">num_ftrs = model.fc.in_features  <span class="comment"># 获取全连接层的输入channel个数</span></span><br><span class="line">model.fc = nn.Linear(num_ftrs, <span class="number">2</span>) <span class="comment"># 替换最后的全连接层为你所需要的输出</span></span><br></pre></td></tr></table></figure><h3 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h3><p>使用交叉熵函数 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">criterion = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure></p><h4 id="定义优化函数"><a href="#定义优化函数" class="headerlink" title="定义优化函数"></a>定义优化函数</h4><p>Adam的优化方式 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure></p><h3 id="定义学习率的变化策略"><a href="#定义学习率的变化策略" class="headerlink" title="定义学习率的变化策略"></a>定义学习率的变化策略</h3><p>使用torch.optim.lr_scheduler模块的StepLR类 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 每隔step_size个epoch就将学习率降为原来的gamma倍</span></span><br><span class="line">scheduler = lr_scheduler.StepLR(optimizer, step_size=<span class="number">7</span>, gamma=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在每个epoch开始时都要更新学习率（according to 学习率的变化策略）</span></span><br><span class="line">scheduler.step()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型状态为训练状态</span></span><br><span class="line">model.train(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将网络中的所有梯度置0</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络的前向传播</span></span><br><span class="line">outputs = model(inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出的outputs和原来导入的labels作为loss函数的输入就可以得到损失</span></span><br><span class="line">loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get 模型预测该样本属于哪个类别的信息</span></span><br><span class="line">_, preds = torch.max(outputs.data, <span class="number">1</span>)  <span class="comment"># 第二个参数1是代表dim的意思，也就是取每一行的最大值，其实就是我们常见的取概率最大的那个index</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回传损失</span></span><br><span class="line">loss.backward()  <span class="comment"># 注意: 这是在训练的时候才会有的操作，测试时候只有forward过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据回传过程中计算得到的梯度更新参数</span></span><br><span class="line">optimizer.step()</span><br><span class="line"><span class="comment"># 查看各个层的梯度和权值信息</span></span><br><span class="line"><span class="comment"># optimizer.param_groups[0][‘params’]</span></span><br></pre></td></tr></table></figure><p>完整代码：<a href="https://github.com/miraclewkf/ImageClassification-PyTorch/blob/master/level1/train.py" target="_blank" rel="noopener">ImageClassification-PyTorch</a></p><h2 id="PyTorch学习之路（level2）——自定义数据读取"><a href="#PyTorch学习之路（level2）——自定义数据读取" class="headerlink" title="PyTorch学习之路（level2）——自定义数据读取"></a><a href="https://blog.csdn.net/u014380165/article/details/78634829" target="_blank" rel="noopener">PyTorch学习之路（level2）——自定义数据读取</a></h2><h3 id="ImageFolder"><a href="#ImageFolder" class="headerlink" title="ImageFolder"></a>ImageFolder</h3><h4 id="初始化init"><a href="#初始化init" class="headerlink" title="初始化init"></a>初始化<strong>init</strong></h4><ul><li><p><code>__init__</code>方法</p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root, transform=None, target_transform=None,loader=default_loader)</span></span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>通过find_classes函数得到分类的类别名（classes）和类别名与数字类别的映射关系字典（class_to_idx）</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classes, class_to_idx = find_classes(root)</span><br></pre></td></tr></table></figure></li><li><p>通过make_dataset函数得到imags，这个imags是一个列表，其中每个值是一个tuple，每个tuple包含两个元素：图像路径和标签。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imgs = make_dataset(root, class_to_idx)</span><br><span class="line"><span class="keyword">if</span> len(imgs) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span>(RuntimeError(<span class="string">"Found 0 images in subfolders of: "</span> + root + <span class="string">"\n"</span></span><br><span class="line">                           <span class="string">"Supported image extensions are: "</span> + <span class="string">","</span>.join(IMG_EXTENSIONS)))</span><br></pre></td></tr></table></figure></li><li><p>剩下的就是一些赋值操作了</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.root = root</span><br><span class="line">self.imgs = imgs</span><br><span class="line">self.classes = classes</span><br><span class="line">self.class_to_idx = class_to_idx</span><br><span class="line">self.transform = transform</span><br><span class="line">self.target_transform = target_transform</span><br><span class="line">self.loader = loader</span><br></pre></td></tr></table></figure></li></ol><h4 id="获取图像getitem"><a href="#获取图像getitem" class="headerlink" title="获取图像getitem"></a>获取图像<strong>getitem</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    </span><br><span class="line">    path, target = self.imgs[index]</span><br><span class="line">        img = self.loader(path)   <span class="comment"># 重点  #  self.loader = default_loader 👇 有解析</span></span><br><span class="line">        <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line">        <span class="keyword">if</span> self.target_transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            target = self.target_transform(target)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> img, target</span><br></pre></td></tr></table></figure><h5 id="default-loader函数"><a href="#default-loader函数" class="headerlink" title="default_loader函数"></a>default_loader函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default_loader</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> torchvision <span class="keyword">import</span> get_image_backend</span><br><span class="line">    <span class="keyword">if</span> get_image_backend() == <span class="string">'accimage'</span>:</span><br><span class="line">        <span class="keyword">return</span> accimage_loader(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pil_loader(path)</span><br></pre></td></tr></table></figure><h6 id="pil-loader方法"><a href="#pil-loader方法" class="headerlink" title="pil_loader方法"></a>pil_loader方法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pil_loader</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">with</span> Image.open(f) <span class="keyword">as</span> img:</span><br><span class="line">            <span class="keyword">return</span> img.convert(<span class="string">'RGB'</span>)</span><br></pre></td></tr></table></figure><h6 id="accimage-loader方法"><a href="#accimage-loader方法" class="headerlink" title="accimage_loader方法"></a>accimage_loader方法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accimage_loader</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> accimage</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> accimage.Image(path)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="comment"># Potentially a decoding problem, fall back to PIL.Image</span></span><br><span class="line">        <span class="keyword">return</span> pil_loader(path)</span><br></pre></td></tr></table></figure><h4 id="数据集数量len"><a href="#数据集数量len" class="headerlink" title="数据集数量len"></a>数据集数量<strong>len</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(self.imgs)</span><br></pre></td></tr></table></figure><h3 id="自定义数据读取接口"><a href="#自定义数据读取接口" class="headerlink" title="自定义数据读取接口"></a>自定义数据读取接口</h3><p>思路：</p><ol><li>在PyTorch中和数据读取相关的类基本都要继承一个基类：<code>torch.utils.data.Dataset</code></li><li>改写其中的<code>__init__</code>、<code>__len__</code>、<code>__getitem__</code>等方法即可</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img_path: [&apos;train&apos;, &apos;val&apos;]</span><br><span class="line">txt_path: [&apos;train.txt&apos;, &apos;val.txt&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">customData</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, img_path, txt_path, dataset = <span class="string">''</span>, data_transforms=None, loader = default_loader)</span>:</span></span><br><span class="line">    <span class="comment"># self.img_name和self.img_label的读取方式就跟你数据的存放方式有关，你可以根据你实际数据的维护方式做调整</span></span><br><span class="line">        <span class="keyword">with</span> open(txt_path) <span class="keyword">as</span> input_file:</span><br><span class="line">            lines = input_file.readlines()</span><br><span class="line">            self.img_name = [os.path.join(img_path, line.strip().split(<span class="string">'\t'</span>)[<span class="number">0</span>]) <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">            self.img_label = [int(line.strip().split(<span class="string">'\t'</span>)[<span class="number">-1</span>]) <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">            </span><br><span class="line">        self.data_transforms = data_transforms</span><br><span class="line">        self.dataset = dataset</span><br><span class="line">        self.loader = loader</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.img_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        img_name = self.img_name[item]</span><br><span class="line">        label = self.img_label[item]</span><br><span class="line">        img = self.loader(img_name)     <span class="comment"># 采用default_loader方法来读取图像</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.data_transforms <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 在Transform中将每张图像都封装成Tensor</span></span><br><span class="line">                img = self.data_transforms[self.dataset](img)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">"Cannot transform image: &#123;&#125;"</span>.format(img_name))</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br></pre></td></tr></table></figure><p>数据读取接口的使用 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># call</span></span><br><span class="line">image_datasets = &#123;x: customData(img_path=<span class="string">'/ImagePath'</span>,</span><br><span class="line">                                    txt_path=(<span class="string">'/TxtFile/'</span> + x + <span class="string">'.txt'</span>),</span><br><span class="line">                                    data_transforms=data_transforms,</span><br><span class="line">                                    dataset=x) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]&#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment"># DataLoader (list → Tensor)，将这个batch的图像数据和标签都分别封装成Tensor</span></span><br><span class="line">dataloders = &#123;x: torch.utils.data.DataLoader(image_datasets[x],</span><br><span class="line">                                                 batch_size=batch_size,</span><br><span class="line">                                                 shuffle=<span class="keyword">True</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]&#125;</span><br></pre></td></tr></table></figure></p><h3 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.save(model, <span class="string">'output/resnet_epoch&#123;&#125;.pkl'</span>.format(epoch)) <span class="comment"># 如果这个output文件夹没有，可以手动新建一个或者在代码里面新建</span></span><br></pre></td></tr></table></figure><p>完整代码：<a href="https://github.com/miraclewkf/ImageClassification-PyTorch/blob/master/level2/train_customData.py" target="_blank" rel="noopener">train_customData.py</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】转载于 &lt;a href=&quot;https://blog.csdn.net/u014380165&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AI之路&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>面经总结</title>
    <link href="http://yoursite.com/2019/03/13/%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/03/13/面经总结/</id>
    <published>2019-03-13T12:56:45.000Z</published>
    <updated>2019-03-13T12:59:17.618Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p><a href="https://blog.csdn.net/zongza/article/details/80167654" target="_blank" rel="noopener">【置顶】面试知识点</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DeepLiver_model_note</title>
    <link href="http://yoursite.com/2019/03/13/DeepLiver-model-note/"/>
    <id>http://yoursite.com/2019/03/13/DeepLiver-model-note/</id>
    <published>2019-03-13T12:47:58.000Z</published>
    <updated>2019-03-20T05:41:04.035Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h3 id="Method-Description"><a href="#Method-Description" class="headerlink" title="Method Description"></a>Method Description</h3><h4 id="simpleitk"><a href="#simpleitk" class="headerlink" title="simpleitk"></a>simpleitk</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SimpleITK <span class="keyword">as</span> sitk</span><br><span class="line"></span><br><span class="line">writer = sitk.ImageFileWriter()</span><br><span class="line">writer.SetFileName(target_file)</span><br><span class="line">writer.Execute(image)</span><br></pre></td></tr></table></figure><p><code>sitk.ReadImage(name)</code> 适用范围：…</p><h4 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a><a href="http://wiki.jikexueyuan.com/project/explore-python/Standard-Modules/argparse.html" target="_blank" rel="noopener">argparse</a></h4><ol><li>创建 <code>ArgumentParser()</code> 对象</li><li>调用 <code>add_argument()</code> 方法添加参数</li><li>使用 <code>parse_args()</code> 解析添加的参数</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="comment"># 创建 ArgumentParser() 对象</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'U-Net 2d'</span>) </span><br><span class="line"><span class="comment"># 调用 add_argument() 方法添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">'--resume'</span>, <span class="string">'-m'</span>, default=<span class="string">''</span>, metavar=<span class="string">'RESUME'</span>,help=<span class="string">'model parameters to load'</span>)   <span class="comment"># 可选参数</span></span><br><span class="line">parser.add_argument(<span class="string">'--save_dir'</span>, default=<span class="string">''</span>, type=str, metavar=<span class="string">'PATH'</span>,help=<span class="string">'path to save checkpoint files'</span>) <span class="comment"># 可选参数</span></span><br><span class="line">parser.add_argument(<span class="string">'--test'</span>, default=<span class="number">0</span>, type=int, metavar=<span class="string">'TEST'</span>,help=<span class="string">'1 do test evaluation, 0 not'</span>) <span class="comment"># 可选参数</span></span><br><span class="line"><span class="comment"># 使用 parse_args() 解析添加的参数</span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> args.resume</span><br></pre></td></tr></table></figure><ul><li>metavar - 在 usage 说明中的参数名称，对于必选参数默认就是参数名称，对于可选参数默认是全大写的参数名称.</li></ul><h4 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, out, seg)</span>:</span></span><br><span class="line">    b, w, h = seg.shape</span><br><span class="line">    seg = seg.unsqueeze(<span class="number">1</span>)</span><br><span class="line">    seg_one_hot = Variable(torch.FloatTensor(b,<span class="number">2</span>, w, h)).zero_().cuda()</span><br><span class="line">    seg = seg_one_hot.scatter_(<span class="number">1</span>, seg, <span class="number">1</span>)</span><br><span class="line">    loss = Variable(torch.FloatTensor(b)).zero_().cuda()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        loss += (<span class="number">1</span> - <span class="number">2.</span>*((out[:,i]*seg[:,i]).sum(<span class="number">1</span>).sum(<span class="number">1</span>)) / ((out[:,i]*out[:,i]).sum(<span class="number">1</span>).sum(<span class="number">1</span>)+(seg[:,i]*seg[:,i]).sum(<span class="number">1</span>).sum(<span class="number">1</span>)+<span class="number">1e-15</span>))</span><br><span class="line">    loss = loss.mean()</span><br><span class="line">    <span class="keyword">del</span> seg_one_hot, seg</span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><p>使用PyTorch进行训练和测试时一定注意要把实例化的model指定train/eval，<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train</span></span><br><span class="line">Model.train(mode=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">Model.eval() <span class="comment"># eval（）时，框架会自动把BN和DropOut固定住，不会取平均，而是用训练好的值，不然的话，一旦test的batch_size过小，很容易就会被BN层导致生成图片颜色失真极大！！！！！！</span></span><br></pre></td></tr></table></figure></p><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><p>写nrrd文件的时候，可以考虑nrrd的数组存储形式与正常数组维度不一致<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.squeeze(arr) <span class="comment"># 从数组的形状中删除单维度条目，即把shape中为1的维度去掉</span></span><br><span class="line">y=np.transpose(y,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))  <span class="comment"># 将数组的轴交换 (0, 1, 2) =&gt; (1, 2, 0)</span></span><br></pre></td></tr></table></figure></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="数据处理过程"><a href="#数据处理过程" class="headerlink" title="数据处理过程"></a>数据处理过程</h4><p>取最大连通域 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_connected_domain_3D</span><span class="params">(arr)</span>:</span></span><br><span class="line">    labels = measure.label(arr)  <span class="comment"># &lt;1.2s</span></span><br><span class="line">    t = np.bincount(labels.flatten())[<span class="number">1</span>:]  <span class="comment"># &lt;1.5s</span></span><br><span class="line">    max_pixel = np.argmax(t) + <span class="number">1</span>  <span class="comment"># 位置变了,去除了0</span></span><br><span class="line">    labels[labels != max_pixel] = <span class="number">0</span></span><br><span class="line">    labels[labels == max_pixel] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> labels.astype(np.uint8)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> measure</span><br><span class="line"></span><br><span class="line">arr = np.asarray([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">print(arr)</span><br><span class="line">print(max_connected_domain_3D(arr))</span><br></pre></td></tr></table></figure><p>$$\begin{bmatrix}1 & 1 & 0 & 3\\ 1 & 0 & 3 & 3\\ 0 & 1 & 3 & 3\\0 & 0 & 0 & 0\end{bmatrix}\Rightarrow \begin{bmatrix}0 & 0 & 0 & 1\\ 0 & 0 & 1 & 1\\ 0 & 0 & 1 & 1\\0 & 0 & 0 & 0\end{bmatrix}$$</p><p>归一化 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(img)</span>:</span>  </span><br><span class="line">    img = np.clip(img, <span class="number">-150</span>, <span class="number">250</span>)</span><br><span class="line">    min_nrrd_data = np.min(img)</span><br><span class="line">    max_nrrd_data = np.max(img)</span><br><span class="line">    img = (img - min_nrrd_data) / (max_nrrd_data - min_nrrd_data)</span><br><span class="line">    <span class="keyword">return</span> img</span><br></pre></td></tr></table></figure></p><h4 id="数组阈值处理"><a href="#数组阈值处理" class="headerlink" title="数组阈值处理"></a>数组阈值处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">img 为图像数组，同时也是numpy数组</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">img[np.where(img &lt; min)] = min  </span><br><span class="line">img[np.where(img &gt; <span class="number">250</span>)] = max</span><br></pre></td></tr></table></figure><h4 id="绘制模型"><a href="#绘制模型" class="headerlink" title="绘制模型"></a>绘制模型</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pip install graphviz</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"></span><br><span class="line">plot_model(model, <span class="string">"RUnet.png"</span>, <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Common-Operation"><a href="#Common-Operation" class="headerlink" title="Common Operation"></a>Common Operation</h2><h3 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h3><h4 id="Linux查看Nvidia显卡信息及使用情况"><a href="#Linux查看Nvidia显卡信息及使用情况" class="headerlink" title="Linux查看Nvidia显卡信息及使用情况"></a><a href="https://blog.csdn.net/dcrmg/article/details/78146797" target="_blank" rel="noopener">Linux查看Nvidia显卡信息及使用情况</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> nvidia-smi</span><br></pre></td></tr></table></figure><p><center><br><img src="/2019/03/13/DeepLiver-model-note/nvidia-smi.png" width="600"><br></center><br>表头释义 👇<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Fan：显示风扇转速，数值在0到100%之间，是计算机的期望转速，如果计算机不是通过风扇冷却或者风扇坏了，显示出来就是N/A； </span><br><span class="line">- Temp：显卡内部的温度，单位是摄氏度；</span><br><span class="line">- Perf：表征性能状态，从P0到P12，P0表示最大性能，P12表示状态最小性能；</span><br><span class="line">- Pwr：能耗表示； </span><br><span class="line">- Bus-Id：涉及GPU总线的相关信息； </span><br><span class="line">- Disp.A：是Display Active的意思，表示GPU的显示是否初始化； </span><br><span class="line">- Memory Usage：显存的使用率； </span><br><span class="line">- Volatile GPU-Util：浮动的GPU利用率；</span><br><span class="line">- Compute M：计算模式；</span><br><span class="line"></span><br><span class="line">- Processes显示每块GPU上每个进程所使用的显存情况。</span><br></pre></td></tr></table></figure></p><h4 id="判断torch是否可用GPU"><a href="#判断torch是否可用GPU" class="headerlink" title="判断torch是否可用GPU"></a>判断torch是否可用GPU</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python <span class="number">3.6</span><span class="number">.8</span> |Anaconda, Inc.| (default, Dec <span class="number">30</span> <span class="number">2018</span>, <span class="number">01</span>:<span class="number">22</span>:<span class="number">34</span>)</span><br><span class="line">[GCC <span class="number">7.3</span><span class="number">.0</span>] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> torch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.cuda.is_available()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="多GPU的使用"><a href="#多GPU的使用" class="headerlink" title="多GPU的使用"></a>多GPU的使用</h4><p>PyTorch支持多GPU训练模型，假设你的网络是model，那么只需要下面一行代码（调用 torch.nn.DataParallel接口）就可以让后续的模型训练在0和1两块GPU上训练，加快训练速度。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = torch.nn.DataParallel(model, device_ids=[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h2 id="优秀链接"><a href="#优秀链接" class="headerlink" title="优秀链接"></a>优秀链接</h2><p><a href="https://zhuanlan.zhihu.com/p/57958993?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=539484443807711232&amp;from=singlemessage&amp;s_r=0" target="_blank" rel="noopener">pytorch + apex 生活变得更美好</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vtk-Introduction</title>
    <link href="http://yoursite.com/2019/03/08/vtk-Introduction/"/>
    <id>http://yoursite.com/2019/03/08/vtk-Introduction/</id>
    <published>2019-03-08T11:04:27.000Z</published>
    <updated>2019-03-08T16:53:42.927Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】To be continued…</p><a id="more"></a><p>参考：<a href="https://lorensen.github.io/VTKExamples/site/Python/" target="_blank" rel="noopener">VTKExamples</a>、<a href="https://vtk.org/documentation/" target="_blank" rel="noopener">User’s Guide</a>、<a href="https://www.cnblogs.com/zhhfan/p/10312170.html" target="_blank" rel="noopener">Python vtk学习</a></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install vtk</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><center><br><img src="/2019/03/08/vtk-Introduction/vtk_example.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vtk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 箭头源</span></span><br><span class="line">arrow_source = vtk.vtkArrowSource()</span><br><span class="line"><span class="comment"># 映射器</span></span><br><span class="line">mapper = vtk.vtkPolyDataMapper()</span><br><span class="line"><span class="comment"># 映射器添加数据源</span></span><br><span class="line">mapper.SetInputConnection(arrow_source.GetOutputPort())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演员（执行者）</span></span><br><span class="line">actor = vtk.vtkActor()</span><br><span class="line"><span class="comment"># 演员添加映射器</span></span><br><span class="line">actor.SetMapper(mapper)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 渲染器</span></span><br><span class="line">ren = vtk.vtkRenderer()</span><br><span class="line"><span class="comment"># 渲染器添加演员</span></span><br><span class="line">ren.AddActor(actor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制窗口</span></span><br><span class="line">renWin = vtk.vtkRenderWindow()</span><br><span class="line"><span class="comment"># 绘制窗口添加渲染器</span></span><br><span class="line">renWin.AddRenderer(ren)</span><br><span class="line"><span class="comment"># 窗口读取渲染器生成的图形</span></span><br><span class="line">renWin.Render()   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建窗口交互器</span></span><br><span class="line">iren = vtk.vtkRenderWindowInteractor()</span><br><span class="line">iren.SetRenderWindow(renWin)</span><br><span class="line">iren.Initialize()</span><br><span class="line">iren.Start()</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    reader = vtk.vtkSTLReader()  <span class="comment"># 读取STL文件</span></span><br><span class="line">    reader.SetFileName(file_name)</span><br><span class="line">    <span class="keyword">return</span> reader</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">文件类型</th><th style="text-align:center">读取方法</th></tr></thead><tbody><tr><td style="text-align:center">STL</td><td style="text-align:center">vtkSTLReader()</td></tr><tr><td style="text-align:center">SLC</td><td style="text-align:center">vtkSLCReader()</td></tr><tr><td style="text-align:center">VTP</td><td style="text-align:center">vtkXMLPolyDataReader()</td></tr><tr><td style="text-align:center">UnstructuredGrid</td><td style="text-align:center">vtkNamedColors()</td></tr><tr><td style="text-align:center">ExodusData</td><td style="text-align:center">vtkExodusIIReader()</td></tr></tbody></table><h3 id="图像旋转"><a href="#图像旋转" class="headerlink" title="图像旋转"></a>图像旋转</h3><p>transform.RotateWXYZ(90, 0, 0, 1) 👇 横置→竖置</p><center><br><img src="/2019/03/08/vtk-Introduction/transform.RotateWXYZ(90, 0, 0, 1).png" width="500"><br></center><p>transform.RotateWXYZ(90, 1, 0, 1) 👇 正方形对角线</p><center><br><img src="/2019/03/08/vtk-Introduction/transform.RotateWXYZ(90, 1, 0, 1).png" width="500"><br></center><p>transform.RotateWXYZ(90, 1, 1, 1) 👇 立方体对角线 </p><center><br><img src="/2019/03/08/vtk-Introduction/transform.RotateWXYZ(90, 1, 1, 1).png" width="500"><br></center><p>代码详情 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vtk</span><br><span class="line"></span><br><span class="line">arrow_source = vtk.vtkArrowSource()</span><br><span class="line">mapper = vtk.vtkPolyDataMapper()</span><br><span class="line"></span><br><span class="line"><span class="comment"># transform</span></span><br><span class="line">transform = vtk.vtkTransform()</span><br><span class="line"><span class="comment"># transform.RotateWXYZ(angle, x, y, z)  # x,y,z旋转(0,1)表示是否旋转</span></span><br><span class="line">transform.RotateWXYZ(<span class="number">90</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment"># (90, 1, 0, 1) / (90, 1, 1, 1)  </span></span><br><span class="line">transformFilter = vtk.vtkTransformPolyDataFilter()</span><br><span class="line">transformFilter.SetTransform(transform)</span><br><span class="line">transformFilter.SetInputConnection(arrow_source.GetOutputPort())</span><br><span class="line">transformFilter.Update()</span><br><span class="line">mapper.SetInputConnection(transformFilter.GetOutputPort())</span><br><span class="line"></span><br><span class="line">actor = vtk.vtkActor()</span><br><span class="line">actor.SetMapper(mapper)</span><br><span class="line">ren = vtk.vtkRenderer()</span><br><span class="line">ren.AddActor(actor)</span><br><span class="line">renWin = vtk.vtkRenderWindow()</span><br><span class="line">renWin.AddRenderer(ren)</span><br><span class="line">renWin.Render()</span><br><span class="line">iren = vtk.vtkRenderWindowInteractor()</span><br><span class="line">iren.SetRenderWindow(renWin)</span><br><span class="line">iren.Initialize()</span><br><span class="line">renWin.Render()</span><br><span class="line">iren.Start()</span><br></pre></td></tr></table></figure><ul><li>缩放</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_scale</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    actor.SetScale(x, y, z)</span><br></pre></td></tr></table></figure><ul><li>平移</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_position</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    actor.AddPosition(x, y, z)</span><br></pre></td></tr></table></figure><h3 id="平面切割"><a href="#平面切割" class="headerlink" title="平面切割"></a>平面切割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    reader = read_data(file_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义切割平面</span></span><br><span class="line">    clipPlane = vtk.vtkPlane()</span><br><span class="line">    clipPlane.SetNormal(<span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>)</span><br><span class="line">    clipPlane.SetOrigin(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 平面切割三维数据</span></span><br><span class="line">    clipper = vtk.vtkClipPolyData()</span><br><span class="line">    clipper.SetInputConnection(reader.GetOutputPort())</span><br><span class="line">    clipper.SetClipFunction(clipPlane)</span><br><span class="line">    clipper.InsideOutOn()  <span class="comment"># ?</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义mapper和actor</span></span><br><span class="line">    superMapper = vtk.vtkPolyDataMapper()</span><br><span class="line">    superMapper.SetInputConnection(clipper.GetOutputPort())</span><br><span class="line">    superActor = vtk.vtkActor()</span><br><span class="line">    <span class="comment"># 设置偏转角度</span></span><br><span class="line">    set_origin(superActor, <span class="number">-50</span>, <span class="number">-75</span>, <span class="number">120</span>)</span><br><span class="line">    superActor.SetMapper(superMapper)</span><br><span class="line">    superActor.GetProperty().SetColor(colors.GetColor3d(<span class="string">"Cyan"</span>))</span><br><span class="line">    only_show(superActor)</span><br></pre></td></tr></table></figure><ul><li>设置演员初始方向</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_origin</span><span class="params">(actor, x, y, z)</span>:</span></span><br><span class="line">    actor.SetOrientation(x, y, z)</span><br></pre></td></tr></table></figure><h3 id="鼠标事件监听"><a href="#鼠标事件监听" class="headerlink" title="鼠标事件监听"></a>鼠标事件监听</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听事件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span><span class="params">(vtk.vtkInteractorStyleTrackballCamera)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        self.AddObserver(<span class="string">"MiddleButtonPressEvent"</span>, self.middle_button_press_event)</span><br><span class="line">        self.AddObserver(<span class="string">"MiddleButtonReleaseEvent"</span>, self.middle_button_release_event)</span><br><span class="line">        self.AddObserver(<span class="string">"LeftButtonPressEvent"</span>, self.left_button_press_event)</span><br><span class="line">        self.AddObserver(<span class="string">"LeftButtonReleaseEvent"</span>, self.left_button_release_event)</span><br><span class="line">        self.AddObserver(<span class="string">"RightButtonPressEvent"</span>, self.right_button_press_event)</span><br><span class="line">        self.AddObserver(<span class="string">"RightButtonReleaseEvent"</span>, self.right_button_release_event)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middle_button_press_event</span><span class="params">(self, obj, event)</span>:</span></span><br><span class="line">        print(<span class="string">"Middle Button pressed"</span>)</span><br><span class="line">        self.OnMiddleButtonDown()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middle_button_release_event</span><span class="params">(self, obj, event)</span>:</span></span><br><span class="line">        print(<span class="string">"Middle Button released"</span>)</span><br><span class="line">        self.OnMiddleButtonUp()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_button_press_event</span><span class="params">(self, obj, event)</span>:</span></span><br><span class="line">        print(<span class="string">"Left Button pressed"</span>)</span><br><span class="line">        self.OnLeftButtonDown()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_button_release_event</span><span class="params">(self, obj, event)</span>:</span></span><br><span class="line">        print(<span class="string">"Left Button released"</span>)</span><br><span class="line">        self.OnLeftButtonUp()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_button_press_event</span><span class="params">(self, obj, event)</span>:</span></span><br><span class="line">        print(<span class="string">"right Button pressed"</span>)</span><br><span class="line">        self.OnRightButtonDown()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_button_release_event</span><span class="params">(self, obj, event)</span>:</span></span><br><span class="line">        print(<span class="string">"right Button released"</span>)</span><br><span class="line">        self.OnLeftButtonUp()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入上一段代码调用</span></span><br><span class="line">iren.SetInteractorStyle(MyEvent())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】To be continued…&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="vtk" scheme="http://yoursite.com/tags/vtk/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5_2_exe/app</title>
    <link href="http://yoursite.com/2019/03/04/PyQt5-2-exe/"/>
    <id>http://yoursite.com/2019/03/04/PyQt5-2-exe/</id>
    <published>2019-03-03T17:00:09.000Z</published>
    <updated>2019-03-04T07:33:36.281Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】Not Completed</p><a id="more"></a><h2 id="PyQt5打包程序为可执行文件"><a href="#PyQt5打包程序为可执行文件" class="headerlink" title="PyQt5打包程序为可执行文件"></a>PyQt5打包程序为可执行文件</h2><ol><li><p><code>$ pyinstaller -Fw window.py</code></p><ul><li><p>Requirements：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -U pip setuptools / pip install --upgrade setuptools</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install tornado</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install IPython</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install ipykernel</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> #</span><span class="bash"> No module named <span class="string">'wx'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install -U  -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 \ wxPython </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cairo backend requires that cairocffi or pycairo is installed</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install cairocffi</span></span><br></pre></td></tr></table></figure></li><li><p>Some INFO</p><pre><code class="powershell"><span class="number">117</span> INFO: UPX is not available.<span class="number">38433</span> INFO:   Matplotlib backend <span class="string">"MacOSX"</span>: ignoredPython is not installed as a framework. The Mac OS X backend will not be able to <span class="keyword">function</span> correctly <span class="keyword">if</span> Python is not installed as a framework. See the Python documentation <span class="keyword">for</span> more information on installing Python as a framework on Mac OS X. Please either reinstall Python as a framework, or <span class="keyword">try</span> one of the other backends. <span class="keyword">If</span> you are using (Ana)Conda please install python.app and replace the use of <span class="string">'python'</span> with <span class="string">'pythonw'</span>. See <span class="string">'Working with Matplotlib on OSX'</span> <span class="keyword">in</span> the Matplotlib FAQ <span class="keyword">for</span> more information.<span class="number">51301</span> WARNING: library user32 required via ctypes not found<span class="number">53437</span> INFO: Warnings written to /Users/Captain/Desktop/client/build/window/warn-window.txt</code></pre></li><li>Output：<code>./build</code>、 <code>./dist</code>、 <code>./window.spec</code></li></ul></li><li><code>$ pyinstaller window.spec</code><ul><li>Output：<code>window.app</code> / <code>window.exe</code>    </li></ul></li><li>将与程序关联的代码（当前文件夹中除./build和./dist外的所有文件）均copy至<code>./dist</code>，即可</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】Not Completed&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch_可视化之TensorboardX</title>
    <link href="http://yoursite.com/2019/03/03/PyTorch-%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8BTensorboardX/"/>
    <id>http://yoursite.com/2019/03/03/PyTorch-可视化之TensorboardX/</id>
    <published>2019-03-03T04:33:11.000Z</published>
    <updated>2019-03-03T06:36:49.416Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="Tensorboard"><a href="#Tensorboard" class="headerlink" title="Tensorboard"></a>Tensorboard</h2><p>链接：<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/4-1-tensorboard1/" target="_blank" rel="noopener">https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/4-1-tensorboard1/</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(tensorflow) ➜  Morvan_Tensorflow tensorboard --logdir logs</span><br><span class="line">TensorBoard 1.11.0 at http://MacBook-Pro:6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><ul><li>Chrome</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://0.0.0.0:6006</span><br></pre></td></tr></table></figure><h2 id="TensorboardX"><a href="#TensorboardX" class="headerlink" title="TensorboardX"></a>TensorboardX</h2><p>详细内容，访问文档：<a href="https://tensorboardx.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://tensorboardx.readthedocs.io/en/latest/index.html</a><br>源代码：<a href="https://github.com/lanpa/tensorboardX" target="_blank" rel="noopener">https://github.com/lanpa/tensorboardX</a><br>参考：<a href="https://www.pytorchtutorial.com/pytorch-tensorboardx/" target="_blank" rel="noopener">https://www.pytorchtutorial.com/pytorch-tensorboardx/</a></p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tensorboardX</span><br></pre></td></tr></table></figure><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 模拟输入数据</span></span><br><span class="line">input_data = Variable(torch.rand(<span class="number">16</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从torchvision中导入已有模型</span></span><br><span class="line">model = torchvision.models.resnet18()</span><br><span class="line"><span class="comment"># print(model)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 声明writer对象，保存的文件夹，异己名称</span></span><br><span class="line">writer = SummaryWriter(log_dir=\<span class="string">'./log\', comment=\'resnet18\')</span></span><br><span class="line"><span class="string">with writer:   # necessary</span></span><br><span class="line"><span class="string">    writer.add_graph(model, (input_data,))</span></span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>在对应路径下运行tensorboard<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(pytorch) ➜  Desktop  tensorboard --logdir log</span><br><span class="line">TensorBoard 1.12.0 at http://MacBook-Pro:6006 (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure></p><h2 id="PyTorch-可视化工具-Visdom-介绍"><a href="#PyTorch-可视化工具-Visdom-介绍" class="headerlink" title="PyTorch 可视化工具 Visdom 介绍"></a>PyTorch 可视化工具 Visdom 介绍</h2><p>可参考 <a href="https://captainzj.github.io/2018/12/31/visdom-Tutorial/" target="_blank" rel="noopener">https://captainzj.github.io/2018/12/31/visdom-Tutorial/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="PyTorch" scheme="http://yoursite.com/categories/PyTorch/"/>
    
    
  </entry>
  
  <entry>
    <title>NiftyNet-Process</title>
    <link href="http://yoursite.com/2019/03/02/NiftyNet-Process/"/>
    <id>http://yoursite.com/2019/03/02/NiftyNet-Process/</id>
    <published>2019-03-02T08:04:58.000Z</published>
    <updated>2019-03-02T09:06:38.097Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】<br><a id="more"></a></p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a><a href="https://www.cnblogs.com/zhhfan/p/10424489.html" target="_blank" rel="noopener">数据预处理</a></h2><h3 id="生成-csv文件"><a href="#生成-csv文件" class="headerlink" title="生成.csv文件"></a>生成.csv文件</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">image</th><th style="text-align:center">path</th></tr></thead><tbody><tr><td style="text-align:center">img.csv</td><td style="text-align:center">img_name</td><td style="text-align:center">img_path</td></tr><tr><td style="text-align:center">label.csv</td><td style="text-align:center">img_label</td><td style="text-align:center">img_path</td></tr></tbody></table><ul><li>二分类的生成该文件的demo</li></ul><blockquote><p>准备工作：将两个类别的图片分别存储在两个文件夹中。</p></blockquote><p>下述代码中将分类的图片分别存储于<code>./DogsVSCats/train/cat</code> 和 <code>./DogsVSCats/train/dog</code><br>注: DogsVSCats datasets 可在<a href="https://www.kaggle.com/c/dogs-vs-cats/data" target="_blank" rel="noopener">此处</a>下载</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">dir_path = <span class="string">'./DogsVSCats/train'</span></span><br><span class="line">dir_names = os.listdir(dir_path)   <span class="comment"># ['cat', 'dog']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 img.csv</span></span><br><span class="line">list_img, list_path = [], []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir_name <span class="keyword">in</span> dir_names:</span><br><span class="line"></span><br><span class="line">    img_path = dir_path + <span class="string">"/"</span> + dir_name</span><br><span class="line">    img_name = os.listdir(img_path)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, item <span class="keyword">in</span> enumerate(img_name):</span><br><span class="line">        list_img.append(item)</span><br><span class="line">        list_path.append(img_path + <span class="string">"/"</span> + item)</span><br><span class="line">        </span><br><span class="line">data_frame = pd.DataFrame(&#123;<span class="string">'image'</span>: list_img, <span class="string">'path'</span>: list_path&#125;)</span><br><span class="line">data_frame.to_csv(<span class="string">'./img_path.csv'</span>, index=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成label.csv</span></span><br><span class="line">list_label_name, list_label_path = [], []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir_name <span class="keyword">in</span> dir_names:</span><br><span class="line"></span><br><span class="line">    label_path = dir_path + <span class="string">"/"</span> + dir_name</span><br><span class="line">    label_name = os.listdir(label_path)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, elem <span class="keyword">in</span> enumerate(label_name):</span><br><span class="line">        list_label_name.append(elem[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># elem[0:3] : cat / dog</span></span><br><span class="line">        list_label_path.append(label_path + <span class="string">"/"</span> + elem)</span><br><span class="line"></span><br><span class="line">label_dataframe = pd.DataFrame(&#123;<span class="string">'label'</span>: list_label_name, <span class="string">'path'</span>: list_label_path&#125;)</span><br><span class="line">label_dataframe.to_csv(<span class="string">'./label.csv'</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="医疗图像" scheme="http://yoursite.com/categories/%E5%8C%BB%E7%96%97%E5%9B%BE%E5%83%8F/"/>
    
    
      <category term="NiftyNet" scheme="http://yoursite.com/tags/NiftyNet/"/>
    
  </entry>
  
  <entry>
    <title>NiftyNet-Configuration-file</title>
    <link href="http://yoursite.com/2019/03/02/NiftyNet-Configuration-file/"/>
    <id>http://yoursite.com/2019/03/02/NiftyNet-Configuration-file/</id>
    <published>2019-03-02T07:59:58.000Z</published>
    <updated>2019-03-02T13:06:58.664Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】<a href="https://www.cnblogs.com/zhhfan/p/9806900.html" target="_blank" rel="noopener">NiftyNet开源平台的使用 – 配置文件</a></p><a id="more"></a><p>官方文档：<a href="https://niftynet.readthedocs.io/en/latest/config_spec.html" target="_blank" rel="noopener">https://niftynet.readthedocs.io/en/latest/config_spec.html</a></p><h3 id="运行NiftyNet工作流"><a href="#运行NiftyNet工作流" class="headerlink" title="运行NiftyNet工作流"></a>运行NiftyNet工作流</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python net_run.py [train|inference|evaluation] -c &lt;path_to/config.ini&gt; -a &lt;application&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> net_run命令也支持命令行参数，以`--&lt;name&gt; &lt;value&gt;`或`--&lt;name&gt;=&lt;value&gt;`的形式表示。输入的参数将取代系统默认的和配置文件中的参数。</span></span><br></pre></td></tr></table></figure><ul><li><code>[train|inference|evaluation]</code><ul><li>train：使用提供的数据 更新 已存在的网络模型</li><li>inference：根据提供的数据生成响应（加载已存在的网络模型）</li><li>evaluation：？？</li></ul></li><li><code>-c &lt;path_to/config.ini&gt;</code>：指定配置文件路径</li><li><code>-a &lt;application&gt;</code>：指定应用种类（常见种类如下表👇）</li></ul><table><thead><tr><th style="text-align:left">application参数</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">图像分割 <small> [SEGMENTATION] </small></td><td style="text-align:left"><code>net_segment -c ...</code></td></tr><tr><td style="text-align:left">图像回归 <small> [REGRESSION] </small></td><td style="text-align:left"><code>net_regress -c ...</code></td></tr><tr><td style="text-align:left">自动编码 <small> [AUTOENCODER] </small></td><td style="text-align:left"><code>net_autoencoder -c ...</code></td></tr><tr><td style="text-align:left">生成对抗网络 <small> [GAN] </small></td><td style="text-align:left"><code>net_gan -c ...</code></td></tr></tbody></table><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>每个网络想要运行<strong>必须</strong>包含一个<code>config.ini</code>配置文件，用来设置训练/测试所用的全部参数。</p><h4 id="Configuration-File-Structure"><a href="#Configuration-File-Structure" class="headerlink" title="Configuration-File-Structure"></a>Configuration-File-Structure</h4><p>每个配置文件中包含的sections: </p><ul><li>[SYSTEM]  </li><li>[NETWORK]  </li><li>[APPLICATION] （custom👇）<ul><li><code>[GAN]</code> – 生成对抗网络  </li><li><code>[SEGMENTATION]</code> – 分割网络  </li><li><code>[REGRESSION]</code> – 回归网络  </li><li><code>[AUTOENCODER]</code> – 自动编码网络 </li></ul></li><li>[TRAINING]   （可选—when need train）</li><li>[INFERENCE]   （可选—when need inference）</li></ul><h4 id="Section-Arguments"><a href="#Section-Arguments" class="headerlink" title="Section_Arguments"></a>Section_Arguments</h4><h5 id="Input-data-source"><a href="#Input-data-source" class="headerlink" title="[Input data source]"></a>[Input data source]</h5><p><small></small></p><ul><li>csv_file:  输入图像路径  </li><li>path_to_search: 搜索图像的单个或多个文件，如果有多个用逗号分开  </li><li>filename_contains:  匹配文件名的关键词  </li><li>filename_not_contains:  排除文件名的关键词  </li><li>filename_removefromid:  从文件命中抽取主题id的正则表达式，被匹配的模式将从文件名中移除并生成主题id。  </li><li>interp_order:  插值法，当设定采样方法为resize时，需要该参数对图片进行上采样或下采样，0表示最近插值，1表示双线性插值，3表示三次样条插值，默认为3  </li><li>pixdim：  如果被指定，输入volum在被喂给网络之前将被重采样成voxel尺寸  </li><li>axcodes：  如果被指定，输入volum在被喂给网络之前将被调整为坐标码(axes code)  </li><li>spatial_window_size:  输入到网络中的图片尺寸，需指明三个维度，第一个和第二个分别表示图片的长和宽，第三个如果为1表示使用2d卷积，否则使用3d卷积  </li><li>loader：  图片读取器，默认值None将尝试所有可得到的读取器<br>　　读取器支持的类型有：<br>　　nibabel  支持.nii医学文件格式<br>　　simpleitk  支持.dcm和.mhd格式的医疗图像<br>　　opencv  支持.jpg等常见图像，读取后通道顺序为BGR<br>　　skimage  支持.jpg等常见图像<br>　　pillow  支持.jpg等常见图像，读取后通道顺序为RGB<br></li></ul><p>　　</p><h5 id="System"><a href="#System" class="headerlink" title="[System]"></a>[System]</h5><p><small></small></p><ul><li>cuda_devices:  设置tensorflow的CUDA_VISIBLE_DEVICES变量  </li><li>num_threads:  设置训练的预处理线程数  </li><li>num_gpus:  设置训练的GPU的数量  </li><li>model_dir:  训练模型的保存和加载路径  </li><li>dataset_split_file:  文件分配科目到子集  </li><li>event_handler:  事件处理器<br></li></ul><h5 id="NETWORK"><a href="#NETWORK" class="headerlink" title="[NETWORK]"></a>[NETWORK]</h5><p><small></small></p><ul><li>name:  niftynet/network中的网络类或用户自定义的模块  </li><li>activation_function:  网络的激活函数集合  </li><li>batch_size:  设置每次迭代图像窗口的数量  </li><li>smaller_final_batch_mode:  当batch_size的窗口采样器总数是不可见的时支持最后的batch使用不同的模式<br>　　可选类型有：<br>　　drop:  终止剩余的batch<br>　　pad: 用-1填补最后更小的batch<br>　　dynamic: 直接输出剩余的batch </li><li>reg_type:  可训练的正规化参数的类型  </li><li>decay:  正规化的强度，用于预防过拟合  </li><li>volume_padding_size:  图片的填补值  </li><li>window_sampling:  进入网络的图片的采样方法<br>　　uniform:  输出的图片保持原本大小<br>　　weighted:  对成比例的voxel的采样到累积直方图的似然<br>　　balanced:  每个标签都被采样的可能性同样<br>　　resize:  将进入网络的图片首先resize到spatial_window_size </li><li>queue_length:  NiftyNet会设置两个队列，一个负责从数据集中读取数据并扰乱，另一个从前一个队列中读取batch_size张图片输入网络，这个参数是指第一个队列的长度，最小值为batch_size * 2.5  </li><li>keep_prob: 如果失活被网络支持的话，每个元素存活的可能性<br></li></ul><h5 id="Volume-normalisation"><a href="#Volume-normalisation" class="headerlink" title="[Volume-normalisation]"></a>[Volume-normalisation]</h5><p><small></small></p><ul><li>normalisation:  指示直方图标准化是否应该被应用于数据  </li><li>whitening:  只是被加载的图片是否应该被增白，如果是，输入I，返回(I - mean(I)) / std(I)  </li><li>histogram_ref_file:  标准化参数的文件  </li><li>norm_file:  基于直方图的标准化的直方图landmark类型  </li><li>cutoff:  下级和上级的基于直方图的标准化的截断  </li><li>normalise_foreground_only:  指示一个mask是否需要被基于前景或多样前景进行计算，如设置True，所有的标准化步骤都将被应用于生成前景区  </li><li>foreground_type:  生成一个前景mask，并且它只用于前景  </li><li>mutimod_foreground_type:  结合前景mask和多模态的策略<br>　　可选类型：<br>　　or:  可得到的masks的合集<br>　　and:  可得到的mask的交集<br>　　all:  mask从每个模态独立计算<br></li></ul><h5 id="TRAINING"><a href="#TRAINING" class="headerlink" title="[TRAINING]"></a>[TRAINING]</h5><p><small></small></p><ul><li>optimiser:  计算图梯度优化器的类型，支持adagrade，adam，gradientdescent，momentum，rmsprop，nesterov  </li><li>sample_per_volume：每张图的采样次数  </li><li>lr:  学习率  </li><li>loss_type:  loss函数的类型，支持segmentation,regression,autoencoder,gan  </li><li>starting_iter:  设置重新训练模型的迭代次数  </li><li>save_every_n:  保存当前模型的频率，0为不保存  </li><li>tensorboard_every_n:  计算图中的元素和写到tensorboard上的频率  </li><li>max_iter:  最大训练迭代次数<br></li></ul><h5 id="Validation-during-training"><a href="#Validation-during-training" class="headerlink" title="[Validation during training]"></a>[Validation during training]</h5><p><small></small></p><ul><li>validation_every_n:  每n次迭代运行一次验证迭代  </li><li>validation_max_iter:  验证迭代运行的次数  </li><li>exclude_fraction_for_validation:  用于验证的数据集的比例  </li><li>exclude_fraction_for_inference:  用于推断的数据集的比例<br></li></ul><h5 id="Data-augmentation-during-training"><a href="#Data-augmentation-during-training" class="headerlink" title="[Data augmentation during training]"></a>[Data augmentation during training]</h5><p><small></small></p><ul><li>rotation_angle:  指示输入的图片旋转一个随机的旋转  </li><li>scaling_percentage:  指示一个随机的缩放比例(-50,50)  </li><li>random_flipping_axes:  可以翻转增强数据的轴(???)<br></li></ul><h5 id="INFERENCE"><a href="#INFERENCE" class="headerlink" title="[INFERENCE]"></a>[INFERENCE]</h5><p><small></small></p><ul><li>spatial_window_size:  指示输入窗口的大小(int array)  </li><li>border:  一个用于修剪输出窗口大小的边界值(int tuple)，如设置(3,3,3)，将把一个(64*64*64)的窗口修剪为(58*58*58)  </li><li>inference_iter:  指定已训练的模型用于推测(integer)  </li><li>save_seg_dir:  预测目录的名字  </li><li>output_postfix:  向每一个输出文件的名称后添加后缀  </li><li>output_interp_order:  网络输出的推断顺序  </li><li>dataset_to_infer:  字符串指定计算推理的数据集（‘training’, ‘validation’, ‘inference’）<br></li></ul><h5 id="EVALUATION"><a href="#EVALUATION" class="headerlink" title="[EVALUATION]"></a>[EVALUATION]</h5><p><small></small></p><ul><li>save_csv_dir:  存储输出的csv文件的路径  </li><li>evaluations:  要计算的评价指标列表以逗号分隔的字符串表示，每个应用程序可能的评估指标列表可用于回归评估、分段评估和分类评估  </li><li>evaluation_units:  描述在分割的情况下应该如何进行评估<br>　　foreground:  只对一个标签<br>　　label：  对每一个标签度量<br>　　cc:  对每个连接组件度量<br></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】&lt;a href=&quot;https://www.cnblogs.com/zhhfan/p/9806900.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NiftyNet开源平台的使用 – 配置文件&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="医疗图像" scheme="http://yoursite.com/categories/%E5%8C%BB%E7%96%97%E5%9B%BE%E5%83%8F/"/>
    
    
      <category term="NiftyNet" scheme="http://yoursite.com/tags/NiftyNet/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch-官方文档-学习路线</title>
    <link href="http://yoursite.com/2019/03/01/PyTorch-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://yoursite.com/2019/03/01/PyTorch-官方文档-学习路线/</id>
    <published>2019-03-01T03:54:25.000Z</published>
    <updated>2019-03-16T17:28:05.972Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h3 id="DATA-LOADING-AND-PROCESSING-TUTORIAL"><a href="#DATA-LOADING-AND-PROCESSING-TUTORIAL" class="headerlink" title="DATA LOADING AND PROCESSING TUTORIAL"></a><a href="https://pytorch.org/tutorials/beginner/data_loading_tutorial.html#" target="_blank" rel="noopener">DATA LOADING AND PROCESSING TUTORIAL</a></h3><p>Let’s quickly read the CSV and get the annotations in an (N, 2) array where N is the number of landmarks.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">landmarks_frame = pd.read_csv(<span class="string">'data/faces/face_landmarks.csv'</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">65</span></span><br><span class="line">img_name = landmarks_frame.iloc[n, <span class="number">0</span>]  <span class="comment">#select the first column (image_name) in .csv file</span></span><br><span class="line">landmarks = landmarks_frame.iloc[n, <span class="number">1</span>:].as_matrix() <span class="comment">#select the rest datas in .csv file #landmarks.shape: (136,)</span></span><br><span class="line">landmarks = landmarks.astype(<span class="string">'float'</span>).reshape(<span class="number">-1</span>, <span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">print(<span class="string">'Image name: &#123;&#125;'</span>.format(img_name))  </span><br><span class="line">print(<span class="string">'Landmarks shape: &#123;&#125;'</span>.format(landmarks.shape))</span><br><span class="line">print(<span class="string">'First 4 Landmarks: &#123;&#125;'</span>.format(landmarks[:<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><p>Out:</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Image name: person-<span class="number">7</span>.jpg</span><br><span class="line">Landmarks shape: (<span class="number">68</span>, <span class="number">2</span>)</span><br><span class="line">First <span class="number">4</span> Landmarks: [[<span class="number">32</span>. <span class="number">65</span>.]  <span class="comment"># 对应于 person-7.jpg</span></span><br><span class="line"> [<span class="number">33</span>. <span class="number">76</span>.]</span><br><span class="line"> [<span class="number">34</span>. <span class="number">86</span>.]</span><br><span class="line"> [<span class="number">34</span>. <span class="number">97</span>.]]</span><br></pre></td></tr></table></figure><h4 id="Dataset-class"><a href="#Dataset-class" class="headerlink" title="Dataset class"></a>Dataset class</h4><ul><li><code>__len__</code>: so that <code>len(dataset)</code> returns the size of the dataset.</li><li><code>__getitem__</code>: to support the indexing such that <code>dataset[i]</code> can be used to get $ith$ sample</li></ul><h4 id="Transforms"><a href="#Transforms" class="headerlink" title="Transforms"></a>Transforms</h4><ul><li><code>Rescale</code>: to scale the image</li><li><code>RandomCrop</code>: to crop from image randomly. This is data augmentation.</li><li><code>ToTensor</code>: to convert the numpy images to torch images (we need to swap axes).</li></ul><h4 id="Iterating-through-the-dataset"><a href="#Iterating-through-the-dataset" class="headerlink" title="Iterating through the dataset"></a>Iterating through the dataset</h4><ul><li><code>torch.utils.data.DataLoader</code>: an iterator which provides all these features (i. <code>Batching the data</code>   ii. <code>Shuffling the data</code>    iii. <code>Load the data in parallel using multiprocessing workers</code>).</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">transformed_dataset = FaceLandmarksDataset(csv_file=<span class="string">'data/faces/face_landmarks.csv'</span>,</span><br><span class="line">                                           root_dir=<span class="string">'data/faces/'</span>,</span><br><span class="line">                                           transform=transforms.Compose([</span><br><span class="line">                                               Rescale(<span class="number">256</span>),</span><br><span class="line">                                               RandomCrop(<span class="number">224</span>),</span><br><span class="line">                                               ToTensor()</span><br><span class="line">                                           ]))</span><br><span class="line">                                           </span><br><span class="line">dataloader = DataLoader(transformed_dataset, batch_size=<span class="number">4</span>,</span><br><span class="line">                        shuffle=<span class="keyword">True</span>, num_workers=<span class="number">4</span>) <span class="comment"># !!! &lt;class 'torch.utils.data.dataloader.DataLoader'&gt;  (inputs, labels)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper function to show a batch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_landmarks_batch</span><span class="params">(sample_batched)</span>:</span></span><br><span class="line">    <span class="string">"""Show image with landmarks for a batch of samples."""</span></span><br><span class="line">    images_batch, landmarks_batch = \</span><br><span class="line">            sample_batched[<span class="string">'image'</span>], sample_batched[<span class="string">'landmarks'</span>]</span><br><span class="line">    batch_size = len(images_batch) <span class="comment"># batch_size: 4</span></span><br><span class="line">    im_size = images_batch.size(<span class="number">2</span>) <span class="comment">#images_batch.size(): torch.Size([4, 3, 224, 224])  #im_size: 224</span></span><br><span class="line"></span><br><span class="line">    grid = utils.make_grid(images_batch) <span class="comment"># &lt;class 'torch.Tensor'&gt;</span></span><br><span class="line">    plt.imshow(grid.numpy().transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))) <span class="comment"># transpose &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_size):</span><br><span class="line">        plt.scatter(landmarks_batch[i, :, <span class="number">0</span>].numpy() + i * im_size, <span class="comment"># x  #landmarks_batch.size(): torch.Size([4, 68, 2])</span></span><br><span class="line">                    landmarks_batch[i, :, <span class="number">1</span>].numpy(),<span class="comment"># y</span></span><br><span class="line">                    s=<span class="number">10</span>, marker=<span class="string">'.'</span>, c=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">        plt.title(<span class="string">'Batch from dataloader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i_batch, sample_batched <span class="keyword">in</span> enumerate(dataloader):</span><br><span class="line">    print(i_batch, sample_batched[<span class="string">'image'</span>].size(),  <span class="comment"># torch.Size([4, 3, 224, 224])</span></span><br><span class="line">          sample_batched[<span class="string">'landmarks'</span>].size()) <span class="comment"># torch.Size([4, 68, 2])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># observe 4th batch and stop.</span></span><br><span class="line">    <span class="keyword">if</span> i_batch == <span class="number">3</span>:</span><br><span class="line">        plt.figure()</span><br><span class="line">        show_landmarks_batch(sample_batched)</span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br><span class="line">        plt.ioff()</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="Afterword-torchvision"><a href="#Afterword-torchvision" class="headerlink" title="Afterword: torchvision"></a>Afterword: torchvision</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets</span><br><span class="line"></span><br><span class="line">data_transform = transforms.Compose([</span><br><span class="line">        transforms.RandomSizedCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.RandomHorizontalFlip(), <span class="comment">#  operate on PIL.Image</span></span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                             std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ImageFolder is one of the more generic datasets available in torchvision.</span></span><br><span class="line">hymenoptera_dataset = datasets.ImageFolder(root=<span class="string">'hymenoptera_data/train'</span>,</span><br><span class="line">                                           transform=data_transform)</span><br><span class="line">                                           </span><br><span class="line">dataset_loader = torch.utils.data.DataLoader(hymenoptera_dataset,</span><br><span class="line">                                             batch_size=<span class="number">4</span>, shuffle=<span class="keyword">True</span>,</span><br><span class="line">                                             num_workers=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="TRANSFER-LEARNING-TUTORIAL"><a href="#TRANSFER-LEARNING-TUTORIAL" class="headerlink" title="TRANSFER LEARNING TUTORIAL"></a><a href="https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html" target="_blank" rel="noopener">TRANSFER LEARNING TUTORIAL</a></h3><p>These two major transfer learning scenarios look as follows:</p><ul><li><strong>Finetuning the convnet</strong>: Instead of random initializaion, we initialize the network with <code>a pretrained network</code>, like the one that is trained on imagenet 1000 dataset. Rest of the training looks as usual.</li><li><strong>ConvNet as fixed feature extractor</strong>: Here, we will <code>freeze the weights</code> for all of the network except that of the final fully connected layer. This last fully connected layer is replaced with a new one with random weights and only this layer is trained.</li></ul><p><strong>参考</strong>：<a href="https://blog.csdn.net/u014380165/article/details/78525273/" target="_blank" rel="noopener">PyTorch学习之路（level1）——训练一个图像分类模型</a></p><h4 id="Load-Data"><a href="#Load-Data" class="headerlink" title="Load Data"></a>Load Data</h4><h4 id="Training-the-model"><a href="#Training-the-model" class="headerlink" title="Training the model"></a>Training the model</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span><span class="params">(model, criterion, optimizer, scheduler, num_epochs=<span class="number">25</span>)</span>:</span></span><br><span class="line">    since = time.time()</span><br><span class="line"></span><br><span class="line">    best_model_wts = copy.deepcopy(model.state_dict()) <span class="comment"># 深拷贝 （'非引用'拷贝）</span></span><br><span class="line">    best_acc = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        print(<span class="string">'Epoch &#123;&#125;/&#123;&#125;'</span>.format(epoch, num_epochs - <span class="number">1</span>))</span><br><span class="line">        print(<span class="string">'-'</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Each epoch has a training and validation phase</span></span><br><span class="line">        <span class="keyword">for</span> phase <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]:</span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">'train'</span>:</span><br><span class="line">                scheduler.step()  <span class="comment"># 更新学习率</span></span><br><span class="line">                model.train()  <span class="comment"># Set model to training mode</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                model.eval()   <span class="comment"># Set model to evaluate mode</span></span><br><span class="line"></span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line">            running_corrects = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Iterate over data.</span></span><br><span class="line">            <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloaders[phase]:</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 选取调用 gpu or cpu </span></span><br><span class="line">                <span class="comment"># (数据类型不变 &lt;class 'torch.Tensor'&gt; → &lt;class 'torch.Tensor'&gt;)</span></span><br><span class="line">                inputs = inputs.to(device)</span><br><span class="line">                labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># zero the parameter gradients 网络中的所有梯度置0</span></span><br><span class="line">                optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># forward</span></span><br><span class="line">                <span class="comment"># track history if only in train</span></span><br><span class="line">                <span class="keyword">with</span> torch.set_grad_enabled(phase == <span class="string">'train'</span>):</span><br><span class="line">                    outputs = model(inputs) <span class="comment"># 网络的前向传播</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 预测该样本属于哪个类别的信息   </span></span><br><span class="line">                    <span class="comment"># torch.max()的第一个输入是tensor格式,第二个参数1是代表dim的意思 </span></span><br><span class="line">                    <span class="comment"># 取每一行的最大值，其实就是我们常见的取概率最大的那个index</span></span><br><span class="line">                    _, preds = torch.max(outputs, <span class="number">1</span>) </span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 将输出的outputs和原来导入的labels作为loss函数的输入就可以得到损失</span></span><br><span class="line">                    loss = criterion(outputs, labels) </span><br><span class="line"></span><br><span class="line">                    <span class="comment"># backward + optimize only if in training phase</span></span><br><span class="line">                    <span class="comment"># 计算得到loss后就要回传损失.要注意的是这是在训练的时候才会有的操作（测试时只有forward过程）</span></span><br><span class="line">                    <span class="keyword">if</span> phase == <span class="string">'train'</span>:</span><br><span class="line">                        loss.backward()</span><br><span class="line">                        optimizer.step() <span class="comment"># 更新参数（梯度和权值信息）</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># statistics</span></span><br><span class="line">                running_loss += loss.item() * inputs.size(<span class="number">0</span>)</span><br><span class="line">                running_corrects += torch.sum(preds == labels.data)</span><br><span class="line"></span><br><span class="line">            epoch_loss = running_loss / dataset_sizes[phase]</span><br><span class="line">            epoch_acc = running_corrects.double() / dataset_sizes[phase]</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'&#123;&#125; Loss: &#123;:.4f&#125; Acc: &#123;:.4f&#125;'</span>.format(</span><br><span class="line">                phase, epoch_loss, epoch_acc))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># deep copy the model</span></span><br><span class="line">            <span class="keyword">if</span> phase == <span class="string">'val'</span> <span class="keyword">and</span> epoch_acc &gt; best_acc:</span><br><span class="line">                best_acc = epoch_acc</span><br><span class="line">                best_model_wts = copy.deepcopy(model.state_dict())</span><br><span class="line"></span><br><span class="line">        print()</span><br><span class="line"></span><br><span class="line">    time_elapsed = time.time() - since</span><br><span class="line">    print(<span class="string">'Training complete in &#123;:.0f&#125;m &#123;:.0f&#125;s'</span>.format(</span><br><span class="line">        time_elapsed // <span class="number">60</span>, time_elapsed % <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'Best val Acc: &#123;:4f&#125;'</span>.format(best_acc))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load best model weights</span></span><br><span class="line">    model.load_state_dict(best_model_wts)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h4 id="Visualizing-the-model-predictions"><a href="#Visualizing-the-model-predictions" class="headerlink" title="Visualizing the model predictions"></a>Visualizing the model predictions</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">was_training = model.training  <span class="comment"># record the last model mode</span></span><br></pre></td></tr></table></figure><h4 id="Finetuning-the-convnet"><a href="#Finetuning-the-convnet" class="headerlink" title="Finetuning the convnet"></a>Finetuning the convnet</h4><p>Load a pretrained model and <code>reset</code> final fully connected layer.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_ft = models.resnet18(pretrained=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters of newly constructed modules have requires_grad=True by default</span></span><br><span class="line">num_ftrs = model_ft.fc.in_features  <span class="comment"># in_features: num inputs </span></span><br><span class="line">model_ft.fc = nn.Linear(num_ftrs, <span class="number">2</span>)  <span class="comment"># 2: num outputs  </span></span><br><span class="line"></span><br><span class="line">model_ft = model_ft.to(device)</span><br><span class="line"></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Observe that all parameters are being optimized</span></span><br><span class="line">optimizer_ft = optim.SGD(model_ft.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decay LR (learning rate) by a factor of 0.1 every 7 epochs</span></span><br><span class="line"><span class="comment"># torch.optim.lr_scheduler模块的StepLR类，表示每隔step_size个epoch就将学习率降为原来的gamma倍</span></span><br><span class="line">exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=<span class="number">7</span>, gamma=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure></p><h4 id="Train-and-evaluate"><a href="#Train-and-evaluate" class="headerlink" title="Train and evaluate"></a>Train and evaluate</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train and evaluate</span></span><br><span class="line">model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,</span><br><span class="line">                       num_epochs=<span class="number">25</span>)</span><br><span class="line"><span class="comment"># visualize</span></span><br><span class="line">visualize_model(model_ft)</span><br></pre></td></tr></table></figure><h4 id="ConvNet-as-fixed-feature-extractor"><a href="#ConvNet-as-fixed-feature-extractor" class="headerlink" title="ConvNet as fixed feature extractor"></a>ConvNet as fixed feature extractor</h4><p>Here, we need to <code>freeze</code> all the network except the final layer. We need to set <code>requires_grad == False</code> to freeze the parameters so that the gradients are not computed in <code>backward()</code>.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model_conv = torchvision.models.resnet18(pretrained=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model_conv.parameters():</span><br><span class="line">    param.requires_grad = <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h4 id="Train-and-evaluate-1"><a href="#Train-and-evaluate-1" class="headerlink" title="Train and evaluate"></a>Train and evaluate</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Train and evaluate</span></span><br><span class="line">model_conv = train_model(model_conv, criterion, optimizer_conv,</span><br><span class="line">                         exp_lr_scheduler, num_epochs=<span class="number">25</span>)</span><br><span class="line">              </span><br><span class="line"><span class="comment"># visualize           </span></span><br><span class="line">visualize_model(model_conv)</span><br><span class="line"></span><br><span class="line">plt.ioff()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="Extended-Reading"><a href="#Extended-Reading" class="headerlink" title="Extended Reading"></a>Extended Reading</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/29024978" target="_blank" rel="noopener">PyTorch实战指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>古词</title>
    <link href="http://yoursite.com/2019/03/01/%E5%8F%A4%E8%AF%8D/"/>
    <id>http://yoursite.com/2019/03/01/古词/</id>
    <published>2019-03-01T02:23:25.000Z</published>
    <updated>2019-03-11T02:42:04.368Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h5 id="《虞美人·听雨》（宋）蒋捷"><a href="#《虞美人·听雨》（宋）蒋捷" class="headerlink" title="《虞美人·听雨》（宋）蒋捷"></a>《虞美人·听雨》（宋）蒋捷</h5><p>  少年听雨歌楼上，红烛昏罗帐。壮年听雨客舟中，江阔云低，断雁叫西风。<br>  而今听雨僧庐下，鬓已星星也。悲欢离合总无情，一任阶前点滴到天明。</p><h5 id="《洛神赋》节选-（三国）曹植"><a href="#《洛神赋》节选-（三国）曹植" class="headerlink" title="《洛神赋》节选 （三国）曹植"></a>《洛神赋》节选 （三国）曹植</h5><p>  其形也，翩若惊鸿，婉若游龙，荣曜秋菊，华茂春松。<br>  髣髴（fǎng fú）兮若轻云之蔽月，飘飖（yáo）兮若流风之回雪。<br>  远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌（lù）波。<br>  秾纤得中，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。<br>  芳泽无加，铅华不御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜。<br>  明眸善睐，靥辅承权。瓌姿艳逸，仪静体闲。柔情绰态，媚于语言。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>迁移学习-Introduction</title>
    <link href="http://yoursite.com/2019/02/27/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/02/27/迁移学习/</id>
    <published>2019-02-27T13:30:31.000Z</published>
    <updated>2019-03-02T06:37:28.737Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】深度学习之PyTorch实战计算机视觉 第7章</p><a id="more"></a><p>如果我们用这么多资源训练的模型能够<code>解决同一类问题</code>，那么模型的性价比会提高很多，这就促使使用迁移模型解决同 一类问题的方法出现 。因为该方法的出现，我们通过对 一个训练好的模型进行细微调整，就能将其应用到相似的问题中，最后还能取得很好的效果 ; 另外，对于原始数据较少的问题，我们也能够通过采用迁移模型进行有效解决 ，所以，如果能够选取合适的迁移学习方法，则会对解决我们所面临的问题有很大的帮助 。</p><p>建议可同时阅读 <a href="https://captainzj.github.io/2018/12/28/torchvision-pretrained-Model/" target="_blank" rel="noopener">torchvision_pretrained_Model</a>，并且请参考官方文档<a href="https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html" target="_blank" rel="noopener">Transfer Learning Tutorial</a>。 </p><h3 id="模型搭建和参数优化"><a href="#模型搭建和参数优化" class="headerlink" title="模型搭建和参数优化"></a>模型搭建和参数优化</h3><p>本节会先基于一个简化的VGGNet 架构搭建卷积神经网络模型井进行模型训练和参数优化，然后迁移一个完整的VGGI6架构的卷积神经网络模型，最后迁移一个ResNet50架构的卷积神经网络模型，并对比这三个模型在预测结果上的准确性和在泛化能力上的差异 。</p><h4 id="自定义VGGNet"><a href="#自定义VGGNet" class="headerlink" title="自定义VGGNet"></a>自定义VGGNet</h4><p>我们首先需要搭建一个卷积神经网络模型， 考虑到训练时间的成本，我们基于VGG16架构来搭建一个简化版的VGGNet模型，这个简化版模型要求输入的图片大小全部<code>缩放到64×64</code>， 而在标准的VGGl6架构模型中输入的图片大小应当是224×224的; 同时简化版模型<code>删除了VGG16最后的三个卷积层和池化层</code>，也<code>改变了全连接层中的连接参数</code>，这一系列的改变都是为了减少整个模型参与训练的参数数量。<br>在搭建好模型后，通过 print 对搭建的模型进行打印输出来显示模型中的细节，打印输出的代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Models() </span><br><span class="line"><span class="keyword">print</span> (model)</span><br></pre></td></tr></table></figure><p>然后，定义模型的损失函数和对参数进行优化的优化函数（在代码中优化函数使用的是 Adam， 损失函数使用的是交叉熵，训练次数总共是 10 次）<br>观察输出结果可见，Training…<code>train Loss:0.5051 Acc:75.3450</code> Validing… <code>valid Loss:0.4841 Acc:76.6600</code> (Time) <code>29520.38271522522</code>（约为492分钟）<br>显然，过于耗时，我们可以使用GPUs计算来加速训练，这个过程非常简单和方便，<code>只需重新对这部分参数进行类型转换就可以了</code>. 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数迁移至 GPUs 的具体代码</span></span><br><span class="line">model = model.cuda()</span><br><span class="line">X, y = Variable(X.cuda()), Variable(y.cuda())</span><br></pre></td></tr></table></figure><p>当然，在此之前，我们需要先确认GPUs硬件是否可用， 具体的代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(torch.cuda.is_available ())   <span class="comment"># 若返回的值是True，这说明我们的GPUs已经具备了被使用的全部条件</span></span><br></pre></td></tr></table></figure><p>观察输出结果可见，Training…<code>train Loss:0.1903 Acc:92.4450</code> Validing… <code>valid Loss:0.2874 Acc:88.0400</code> (Time) <code>855.5901200771332</code>（约为14分钟）<br>从结果可以看出，不仅验证测试集的准确率提升了近10%，而且耗时大幅下降。（使用GPU计算参数，效率有明显提升）</p><h4 id="迁移-VGG16"><a href="#迁移-VGG16" class="headerlink" title="迁移 VGG16"></a>迁移 VGG16</h4><p>因为承担整个模型输出分类工作的是卷积神经网络模型中的<code>全连接层</code>，所以在迁移学习的过程 中调整最多的也是全连接层部分。其基本思路是<code>冻结</code>卷积神经网络中全连接层之前的全部网络层次，让这些被冻结的网络层次中的参数在模型的训练过程中不进行梯度更新 ，能够被优化的参数仅仅是没有被冻结的全连接层（即自定义修改的新的全连接层）的全部参数。</p><p>下面看看具体的代码。首先，迁移过来的 VGG16架构模型在最后输出的结果是 1000 个 ，在我们的问题中只需两个输出结果，所以全连接层必须进行调整。模型调整的具体<a href="https://github.com/Captainzj/PyTorch_Practice/blob/master/chapter-7/chapter-7.ipynb" target="_blank" rel="noopener">code</a>如下:  </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> parma <span class="keyword">in</span> model.parameters():</span><br><span class="line">    parma.requires_grad = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">model.classifier = torch.nn.Sequential(torch.nn.Linear(<span class="number">25088</span>, <span class="number">4096</span>),</span><br><span class="line">                                           torch.nn.ReLU(),</span><br><span class="line">                                           torch.nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">                                           torch.nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">                                           torch.nn.ReLU(),</span><br><span class="line">                                           torch.nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">                                           torch.nn.Linear(<span class="number">4096</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">if</span> Use_gpu:</span><br><span class="line">    model = model.cuda()</span><br><span class="line"></span><br><span class="line">cost = torch.nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.Adam(model.classifier.parameters())</span><br></pre></td></tr></table></figure><p>观察输出结果可见，Training…<code>train Loss:0.0033 Acc:99.8950</code> Validing… <code>valid Loss:0.0899 Acc:98.3200</code><br>准确率有明显提升，说明了迁移学习是一种提升棋型泛化能力的非常有效的方法。</p><h4 id="迁移ResNet50"><a href="#迁移ResNet50" class="headerlink" title="迁移ResNet50"></a>迁移ResNet50</h4><p>模型迁移的代码为 <code>model = models.resnet50(pretrained=True)</code><br>对 ResNet50 的全连接层部分进行调整，具体<a href="https://github.com/Captainzj/PyTorch_Practice/blob/master/chapter-7/chapter-7.ipynb" target="_blank" rel="noopener">code</a>调整如下:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> parma <span class="keyword">in</span> model.parameters(): </span><br><span class="line">    parma . requires_grad = <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line">model.fc = torch.nn.Linear(<span class="number">2048</span>, <span class="number">2</span>)  <span class="comment"># 因为ResNet50中的全连接层只有一 层，所以对代码的调整非常简单</span></span><br></pre></td></tr></table></figure></p><p>观察输出结果可见，Training…<code>train Loss:0.1349 Acc:95.8950</code> Validing… <code>valid Loss:0.0929 Acc:97.7400</code> -&gt;&gt; 准确率近似（略逊）于 VGG16</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>GPU训练优于CPU训练 </li><li>迁移学习可节约时间成本；相较于盲目地从头训练，准确率会有更好的保障</li></ol><p>注：如果模型的训练结果不很理想，则还可以训练更多的模型层次，优化更多的模型参数。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】深度学习之PyTorch实战计算机视觉 第7章&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>PyQt4_For_Windows_10 </title>
    <link href="http://yoursite.com/2019/02/25/PyQt4-For-Windows-10/"/>
    <id>http://yoursite.com/2019/02/25/PyQt4-For-Windows-10/</id>
    <published>2019-02-25T12:14:37.000Z</published>
    <updated>2019-02-26T13:51:08.582Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h3 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h3><ul><li>教程：<a href="https://blog.51cto.com/5001660/2084273" target="_blank" rel="noopener">windows 10 64位安装Python3.6.4</a></li><li>下载地址：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a></li><li>虚拟机Parallels Desktop For Windows10 安装路径：<code>C:\Users\Captain\AppData\Local\Programs\Python\Python36</code></li></ul><h3 id="安装PyQt4"><a href="#安装PyQt4" class="headerlink" title="安装PyQt4"></a>安装PyQt4</h3><ul><li>教程：<a href="https://blog.csdn.net/Eppley/article/details/80240305" target="_blank" rel="noopener">Windows+Python 3.6环境下安装PyQt4</a></li><li>下载地址：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4</a> <a href="https://blog.csdn.net/js1568/article/details/80391761" target="_blank" rel="noopener">Win10，Python 3.6环境下安装PyQt4</a></li><li><p>安装指令：<code>pip install PyQt4-4.11.4-cp36-cp36m-win_amd64.whl</code></p><center><br>  <img src="/2019/02/25/PyQt4-For-Windows-10/PyQt4ForWin10.png" width="500/"><br></center><ul><li>若执行指令”pip install PyQt4-4.11.4-cp36-cp36m-win_amd64.whl”后，提示”PyQt4-4.11.4-cp36-cp36m-win_amd64.whl is not a supported wheel on this platform.”  可能的原因是 pip 与 该.whl 版本不匹配 （pip 可能默认调用了Anaconda3的python 3.7版本） </li></ul></li></ul><h3 id="安装Anaconda-For-win10"><a href="#安装Anaconda-For-win10" class="headerlink" title="安装Anaconda For win10"></a>安装Anaconda For win10</h3><ul><li>教程：<a href="https://www.zhihu.com/question/50003671" target="_blank" rel="noopener">win10：Anaconda安装好后,如何安装pyqt4？</a></li><li>下载地址：<a href="https://stackoverflow.com/questions/21637922/how-to-install-pyqt4-in-anaconda" target="_blank" rel="noopener">How to install PyQt4 in anaconda?</a></li><li>虚拟机Parallels Desktop For Windows10 安装路径：<code>C:\Users\Captain\Anaconda3</code></li></ul><h3 id="安装其他软件"><a href="#安装其他软件" class="headerlink" title="安装其他软件"></a>安装其他软件</h3><p>虚拟机Parallels Desktop For Windows10 安装路径：</p><ul><li>百度网盘：<code>C:\Users\Captain\AppData\Roaming\baidu\BaiduNetdisk</code></li><li>迅雷：<code>C:\Program Files (x86)\Thunder Network\Thunder</code></li><li>VSCode：<code>C:\Users\Captain\AppData\Local\Programs\Microsoft VS Code</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="环境配置" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="win10" scheme="http://yoursite.com/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>古记</title>
    <link href="http://yoursite.com/2019/02/23/%E5%8F%A4%E9%A3%8E%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/23/古风小记/</id>
    <published>2019-02-23T03:20:26.933Z</published>
    <updated>2019-03-08T11:01:47.781Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】</p><a id="more"></a><h1 id="怪口历史"><a href="#怪口历史" class="headerlink" title="怪口历史"></a>怪口历史</h1><blockquote><p>诗与远方真的存在，愿你相信</p></blockquote><h2 id="文化自信"><a href="#文化自信" class="headerlink" title="文化自信"></a>文化自信</h2><ul><li>记得2008年奥运会开幕式，NBC的解说员有一句话我至今记忆犹新：“过去十个世纪里，中国🇨🇳有九个世纪都是GDP世界第一。“没错，我们只是不小心落后了一阵子而已，再看看当年和我们齐头并进的文明，古埃及当年很牛吧？看看现在，除了金字塔和象形文字以外还剩下什么呢？古印度孔雀王朝很厉害吧，现在呢？连创造古印度文明的后代现在全是贱民，或者是“不可接触”的阶层。和其他文明相比，我们的文化始终没有断代。我们海乃百川，包容兼济，务实变通，我想这就是我们的文化伟大之处吧！</li><li><p>每当这个民族这个国家面临生死存亡之际…</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">湖南人会说：“若中华灭亡，除非湖南死光！”</span><br><span class="line">陕西人说：“两狼山战胡儿天摇地动，好男儿为国家何惧死生！”</span><br><span class="line">四川娃说：“不退外敌誓不回川！”</span><br><span class="line">河南人说：“国破尚如此，我何惜此头！”</span><br><span class="line">江南民说：“寄语行人休掩鼻，活人不及死人香！”</span><br><span class="line">河北人说：“燕赵多有慷慨悲歌之士！”</span><br><span class="line">两广人民更是有：“饮冰十年，难凉热血！”</span><br><span class="line">东北三省也有：“何如誓死一拼以尽天职！”</span><br></pre></td></tr></table></figure><p>这就是我们国家刀劈斧剁的天地间到处都是不愿做奴隶的人们。</p></li><li><p>中华文明是独立培育出粮食作物的5个文明之一；中华文明是独立驯化出动物的4个文明之一；中华民族是独立出现语言的17个文明之一；中华文明也是最早使用铁器的文明之一。曾经我看过台湾网友说过一这样的段话：中国这个民族的自尊心和自豪感来自于历史，是不怎么依赖于当今的外在世界而存在的，因为历史不可更改，所以最为稳固。</p></li><li><p>从西方殖民史来看，所有被西方列强全力侵略或者殖民的民族里面，诸如印度、印第安人、玛雅人、印加人、非洲黑人、东南亚京族人和马来人相比，只有中国翻身最快速，也最彻底。其中一个根本的原因就是中国人自身的自尊心最强，对西方列强最不服气，也最敢斗争！即使贫穷落后也不妨碍中国人“悍然”用小米加步枪去跟美国人的坦克飞机原子弹正面对抗！“饿死不弯腰，冻死迎风站”的态度去对待苏联的制裁！在吃不饱饭的情况下仍然搞出氢弹、洲际弹道导弹和卫星！无论治乱兴衰，中国人的民族自尊心始终都在。只因我们存活了5000年，老祖宗告诉我们精卫可以填海，后裔可以射日。只因我们5000年的文化告诉我们“天行健，君子以自强不息。”</p></li><li><p>最后用三十九画生的一句话作为总结：“我走过的山路是徐霞客曾经留宿过的，我走过的关隘是六国曾经逡巡而不敢前的，我驻足远眺的城楼是于谦曾经坚定守卫过的，我现在能驰骋由疆的西北草原是霍去病曾经为之而奋战过的，我还能吃到苏轼当年手不停箸的红烧肉，我还能饮到太白当年举杯邀月的花间美酒，我还能在众多浩劫后读到前人的筋骨血肉，我还能在大喜大悲后脱口而出一句他们曾经用来形容自己的爱恨离愁。这片土地留给我们后人的礼物，应该就这么两件了吧，一件是历史，一件是文化，前者可鉴世，后者可润心。”</p></li></ul><h2 id="中华文明为何没有断代"><a href="#中华文明为何没有断代" class="headerlink" title="中华文明为何没有断代"></a>中华文明为何没有断代</h2><blockquote><p>因为有这样一群伟大的人，造就了一个伟大的民族</p></blockquote><ul><li>周公旦——文化的奠定者，传闻周公旦作《周礼》；第一次引出了夷夏之辩，在文化上，形成了中国的文化范畴，《左传》有言：”中国有礼仪之大，故称夏；有服章之美，谓之华；华夏，皆出于《周礼》，《周礼》出自周公旦“当之无愧的华夏文化的奠定者。</li><li>嬴政——统一的实践者，历史最终让武统成为中国形成的最后一步，秦始皇嬴政的书同文，车同轨，行同伦的政策，让我们这个国家往后，无论分裂到何种程度，一定会有先贤去努力再次统一，使中国最终成为中国🇨🇳，而不是类似欧盟的存在，嬴政统一的实践者，后世之楷模</li><li>汉武帝刘彻——疆界的划定者，中国的农耕属性，本应让这个国家的疆域定在中原气候适中、湿度适中的平原地区。但是，正是因为我们汉武大帝的雄心，让这个国家去做了，本不需要去做的事情，也为千秋后世打下了一个大大的疆土概念，不仅划定了九段线，还将大汉的军旗插在了那里。你知道吗？不仅乌鲁木齐、呼和浩特市音译的地名，其实芜湖、姑苏、余杭也都是音译。</li><li>王导——火种的保护者，当年五胡之乱，中华民族在外族的屠杀下接近灭族。这是我们第一个最危险的时刻，很可能像其他文明那样，埃及文明、古印度文明一样只留在遗迹之中，但正是王导力主南迁，衣冠南渡，使得中华民族在长江以南留下了火种，等待再次燃烧的时刻，以致我们的文明从未有过断代。</li><li>杨广——霸权的制定者，隋炀帝离千古一帝只差一步，不仅一条大运河是南北终成一体，伐高句丽、征突厥，整个初唐和盛唐都在延续隋炀帝的国策，隋唐是不修长城的，高句丽的覆灭也让整个东亚地区永远不再存在第二个农耕文明大国。</li><li>朱元璋——文明的拯救者，这是我们第二个最危险的时刻，在蒙元帝国因缺少文化因素，将自己和整个中国彻底划向伊斯兰教文化之前，以朱元璋为代表的中国人再次站了出来，让东方的海边依然是儒生的国家而不是阿訇的国度。</li></ul><h2 id="中国神话注定华夏之光"><a href="#中国神话注定华夏之光" class="headerlink" title="中国神话注定华夏之光"></a>中国神话注定华夏之光</h2><ul><li>有人问，什么样的精神是刻在每个中国人的骨子里的，我觉得可以在我们的神话中寻找到答案。在西方的神话中，火是上帝赐予的；在希腊神话里，火是普罗米修斯偷来的；而在中国的神话里，火是人们钻木取火坚韧不拔摩擦出来的！这就是中国人，不同于世界其他任何民族的地方。</li><li>在神话中，面对末日洪水，西方人是在诺亚方舟里躲避；但是在我们的神话里，是大禹治水，三过家门而不入。当我们仔细思考这些从小我们耳濡目染的神话故事之后，抛开那些故事情节，找到神话里的真正核心。你就会发现中国的神话只有两个字：抗争。</li><li>假如有一座山挡在你的门前，你是选择搬家还是挖隧道？显而易见，搬家是最好的选择；但是在我们中华的神话里，我们是必须把山移开的。这就是精神内核，全世界只有在我们的神话里能够找到！</li><li>再比如，每个国家都有太阳神的传说，在部落时代，太阳神是绝对的权威。纵览所有太阳神的神话，你会发现只有中国人的神话里有敢于挑战太阳神的故事：据说那个时候天上有九个太阳，因为太阳太热，他一口气射下来八个，大概全世界也只有中国神话敢这么写了。每一代中国人就是听着这样的神话故事长大，勇于抗争的精神已经成为我们的遗传基因。</li><li>当有一个小女孩被大海淹死，化作一只精卫鸟，想要把海填平；我们从没有嘲笑过她的渺小。当有一个人挑战天帝的权威，被砍下头颅，他挥起斧子继续斗争；我们从没有骂他大逆不道，相反我们写诗赞美他：“刑天舞干戚，猛志固常在”。可能我们自己都意识不到，但这种“冻死迎风站,饿死不弯腰”的精神，早已刻在了我们的骨子里。</li><li>大概也正因为此，让我们五千年来一直屹立在世界民族之林，并且大部分时间都是第一名！👍</li></ul><h1 id="英雄述说"><a href="#英雄述说" class="headerlink" title="英雄述说"></a>英雄述说</h1><ul><li><a href="https://baike.baidu.com/item/东皇太一/16006021" target="_blank" rel="noopener"><code>东皇太一</code></a>,上古天庭的主宰者,乃是混沌孕育而出的大神。执掌先天至宝混沌钟，在盘古开天辟地，女娲造人造物之际镇压鸿蒙世界。东皇太一奉鸿钧道人法旨（鸿钧法旨：盘古开天，女娲造灵，太一治世）：统一洪荒万族，并且将洪荒万族合称为“妖族”。开创旷古绝今的无上霸业，登立天帝，自称东皇。立天规戒律，为三界正统至尊。</li></ul><h2 id="故事改编"><a href="#故事改编" class="headerlink" title="故事改编"></a>故事改编</h2><h3 id="悟空"><a href="#悟空" class="headerlink" title="悟空"></a>悟空</h3><p>八戒情绪低沉：猴哥我有一故事，你想不想听，悟空闭着眼睛不耐烦道：不想听，不想听…叹息一声，八戒转身离去…<br>八戒走后，悟空睁开双眼轻笑一声：真是个呆子，数百年来也只会讲一个故事，随后只见悟空一把扯下身上袈裟，唤出紫金战甲，掏出耳中金棒，转身消失不见…<br>没有人知道悟空去了哪里，只是后来听人说起，那一日，屹立千年的南天门突然崩塌，天庭诸神皆是身受重伤，凌霄殿内也是乱成一团，更为奇怪的是那深居广寒宫的嫦娥仙子，却是从此消失不见…</p><h3 id="猪八戒"><a href="#猪八戒" class="headerlink" title="猪八戒"></a>猪八戒</h3><p>蛮荒叛乱，使得三界动荡不安…<br>蛮夷之地，天蓬亲率十万水军击溃蛮荒百万军团，平定战乱，一战成名，唯恐养虎为患，庆功宴上，玉帝杯酒释兵权，将天蓬贬入凡间…<br>西行之际，八戒一路皆是放荡不羁游戏人间…分封完毕，净坛使者心中释然，做个闲人，吃饱穿暖，诸事不管…数年之后，花果山上烈火焚烧，悟空暴怒，直冲凌霄，却遭仙佛诡计，困于弑神阵中…<br>净坛庙中，八戒怒睁双眼：欺我可以，动我兄弟，不行…<br>九尺钉耙初现，怒攻满天神佛，奈何孤立无援…<br>千钧一发之际，只听战鼓之声撼天，十万铁骑怒吼：元帅，天河水军，请战…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】&lt;/p&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>本科生毕业设计（论文）安排</title>
    <link href="http://yoursite.com/2019/02/22/%E6%9C%AC%E7%A7%91%E7%94%9F%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%AE%BA%E6%96%87%EF%BC%89%E5%AE%89%E6%8E%92/"/>
    <id>http://yoursite.com/2019/02/22/本科生毕业设计（论文）安排/</id>
    <published>2019-02-22T13:07:09.000Z</published>
    <updated>2019-02-22T14:59:02.030Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】流程简述</p><a id="more"></a><ul><li><a href="http://www.sohu.com/a/258607457_682145" target="_blank" rel="noopener">喇叭扩音丨2015级本科生毕业设计（论文）工作安排 </a></li><li><a href="http://www.paper120.net/j4786.html" target="_blank" rel="noopener">西安电子科技大学关于本科毕业生毕业设计论文检测查重相关事项的说明</a></li></ul><p>@timeline{</p><p>@item{</p><h6 id="2018-10月"><a href="#2018-10月" class="headerlink" title="2018.10月"></a>2018.10月</h6><p>① 启动通知</p><p>}</p><p>@item{</p><h6 id="2018-11月"><a href="#2018-11月" class="headerlink" title="2018.11月"></a>2018.11月</h6><p>② 确定选题</p><p>}</p><p>@item{</p><h6 id="2019-1月"><a href="#2019-1月" class="headerlink" title="2019.1月"></a>2019.1月</h6><p>③ 初期检查：<br>检查学生选题后对资料的收集、阅读及掌握情况，对任务的熟悉理解情况；…</p><p>}</p><p>@item{</p><h6 id="2019-3月中旬-4月上旬"><a href="#2019-3月中旬-4月上旬" class="headerlink" title="2019.3月中旬-4月上旬"></a>2019.3月中旬-4月上旬</h6><p>④ 中期检查：<br>填写“本科生毕业设计（论文）中期检查表”；<br>组织外出毕业设计检查</p><p>}</p><p>@item{</p><h6 id="2019-5月"><a href="#2019-5月" class="headerlink" title="2019.5月"></a>2019.5月</h6><p>⑤ 盲审<br>教务处：公布各学院毕业设计（论文）盲审名单，组织盲审工作<br>学院：按要求上交盲审论文；盲审结果公布后，组织学生进行修改</p><p>}</p><p>@item{</p><h6 id="2019-6月"><a href="#2019-6月" class="headerlink" title="2019.6月"></a>2019.6月</h6><p>⑥ 答辩及后期检查检查普查评估<br>检查论文的格式规范、指导教师对论文的审阅批改、<br>答辩的组织实施、论文成绩评定…</p><p>}</p><p>@item{</p><h6 id="2019-7月"><a href="#2019-7月" class="headerlink" title="2019.7月"></a>2019.7月</h6><p>⑦ 论文评优</p><p>}</p><p>@item{</p><h6 id="2019-寒假前"><a href="#2019-寒假前" class="headerlink" title="2019 寒假前"></a>2019 寒假前</h6><p>⑧ 总结、归档</p><p>}</p><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】流程简述&lt;/p&gt;
    
    </summary>
    
      <category term="XD" scheme="http://yoursite.com/categories/XD/"/>
    
    
  </entry>
  
  <entry>
    <title>SPJ文件简介</title>
    <link href="http://yoursite.com/2019/02/18/SPJ%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/02/18/SPJ文件简介/</id>
    <published>2019-02-18T11:01:58.000Z</published>
    <updated>2019-03-02T07:42:37.303Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】spj文件是和医疗的3维数据相关的文件 ……</p><a id="more"></a><p>同时了解 stl 文件</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>.spj文件”是由清华斯维尔公司计价软件—“清单计价2003” 生成的项目文件，它是针对单位工程编制的造价文件。</li></ul><h3 id="How-to-open"><a href="#How-to-open" class="headerlink" title="How to open"></a>How to open</h3><p><a href="https://fileinfo.com/extension/spj" target="_blank" rel="noopener">.SPJ File Extension</a></p><ul><li>PhotoStage Slideshow Project <a href="https://www.nchsoftware.com/slideshow/index.html?ref=cj&amp;cjevent=1f0060ab350811e983be00a70a180514" target="_blank" rel="noopener">PhotoStage</a><ul><li>SPJ file is a <code>PhotoStage Slideshow Project</code>. NCH PhotoStage Slideshow Software is a software that enables you to create dynamic slideshows from your photos.</li></ul></li><li>Microsoft ICE Panorama Project <a href="https://www.microsoft.com/en-us/research/product/computational-photography-applications/image-composite-editor/" target="_blank" rel="noopener">ICE</a></li><li>SPSS Production Job File <a href="http://www.sdifen.com/spssstatistics25.html" target="_blank" rel="noopener">SPSS</a></li></ul><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】spj文件是和医疗的3维数据相关的文件 ……&lt;/p&gt;
    
    </summary>
    
      <category term="精诊科技" scheme="http://yoursite.com/categories/%E7%B2%BE%E8%AF%8A%E7%A7%91%E6%8A%80/"/>
    
    
  </entry>
  
  <entry>
    <title>Frequently-used Software/ISO</title>
    <link href="http://yoursite.com/2019/02/15/Frequently-used-Software-ISO/"/>
    <id>http://yoursite.com/2019/02/15/Frequently-used-Software-ISO/</id>
    <published>2019-02-15T08:36:19.000Z</published>
    <updated>2019-02-15T14:55:38.744Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h4 id="Windows-镜像"><a href="#Windows-镜像" class="headerlink" title="Windows 镜像"></a>Windows 镜像</h4><p><a href="http://msdn.itellyou.cn" target="_blank" rel="noopener">MSDN, 我告诉你</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（九）</title>
    <link href="http://yoursite.com/2019/02/01/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/01/PyQt5-Python-实战课程（九）/</id>
    <published>2019-01-31T16:01:53.000Z</published>
    <updated>2019-02-24T09:31:20.839Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="窗口、绘图与特效"><a href="#窗口、绘图与特效" class="headerlink" title="窗口、绘图与特效"></a>窗口、绘图与特效</h2><h3 id="设置窗口风格"><a href="#设置窗口风格" class="headerlink" title="设置窗口风格"></a>设置窗口风格</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/WindowStyle.png" width="500"><br></center><ul><li><p>要点说明：<code>QApplication.setStyle(...)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowStyle</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置窗口风格'</span>)</span><br><span class="line">        horizontalLayout = QHBoxLayout()</span><br><span class="line">        self.styleLabel = QLabel(<span class="string">'设置窗口风格：'</span>)</span><br><span class="line">        self.styleComboBox = QComboBox()</span><br><span class="line">        self.styleComboBox.addItems(QStyleFactory.keys())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前窗口的风格</span></span><br><span class="line">        print(QApplication.style().objectName()) <span class="comment"># macintosh</span></span><br><span class="line">        index = self.styleComboBox.findText(QApplication.style().objectName(),QtCore.Qt.MatchFixedString)</span><br><span class="line"></span><br><span class="line">        self.styleComboBox.setCurrentIndex(index)</span><br><span class="line">        self.styleComboBox.activated[str].connect(self.handleStyleChanged)</span><br><span class="line"></span><br><span class="line">        horizontalLayout.addWidget(self.styleLabel)</span><br><span class="line">        horizontalLayout.addWidget(self.styleComboBox)</span><br><span class="line">        self.setLayout(horizontalLayout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleStyleChanged</span><span class="params">(self,style)</span>:</span></span><br><span class="line">        QApplication.setStyle(style)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = WindowStyle()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="设置窗口样式"><a href="#设置窗口样式" class="headerlink" title="设置窗口样式"></a>设置窗口样式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/WindowPattern.png" width="500"><br></center><ul><li><p>要点说明：</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowPattern</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.resize(<span class="number">500</span>,<span class="number">260</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置窗口的样式'</span>)</span><br><span class="line"></span><br><span class="line">        self.setWindowFlags(Qt.WindowMaximizeButtonHint | Qt.WindowStaysOnTopHint )</span><br><span class="line">        self.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        self.setStyleSheet(<span class="string">"#MainWindow&#123;border-image:url(images/python.jpg);&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = WindowPattern()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用代码设置窗口的最大化和最小化"><a href="#用代码设置窗口的最大化和最小化" class="headerlink" title="用代码设置窗口的最大化和最小化"></a>用代码设置窗口的最大化和最小化</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/WindowMaxMin.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 自定义窗口类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowMaxMin</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###  构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        <span class="string">'''构造函数'''</span></span><br><span class="line">        <span class="comment"># 调用父类构造函数</span></span><br><span class="line">        super(WindowMaxMin, self).__init__(parent)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">400</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"用代码控制窗口的最大化和最小化"</span>)</span><br><span class="line">        self.setWindowFlags(Qt.WindowMaximizeButtonHint)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        maxButton1 = QPushButton()</span><br><span class="line">        maxButton1.setText(<span class="string">'窗口最大化1'</span>)</span><br><span class="line">        maxButton1.clicked.connect(self.maximized1)</span><br><span class="line"></span><br><span class="line">        maxButton2 = QPushButton()</span><br><span class="line">        maxButton2.setText(<span class="string">'窗口最大化2'</span>)</span><br><span class="line">        maxButton2.clicked.connect(self.showMaximized)</span><br><span class="line"></span><br><span class="line">        minButton = QPushButton()</span><br><span class="line">        minButton.setText(<span class="string">'窗口最小化'</span>)</span><br><span class="line">        minButton.clicked.connect(self.showMinimized)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(maxButton1)</span><br><span class="line">        layout.addWidget(maxButton2)</span><br><span class="line">        layout.addWidget(minButton)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximized1</span><span class="params">(self)</span>:</span></span><br><span class="line">        desktop = QApplication.desktop()</span><br><span class="line">        <span class="comment"># 获取桌面可用尺寸</span></span><br><span class="line">        rect = desktop.availableGeometry()</span><br><span class="line"></span><br><span class="line">        self.setGeometry(rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = WindowMaxMin()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="项目实战：实现绘图应用"><a href="#项目实战：实现绘图应用" class="headerlink" title="项目实战：实现绘图应用"></a>项目实战：实现绘图应用</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Drawing.png" width="500"><br></center><ul><li><p>要点说明（需要解决3个核心内容）</p><ol><li><p>如何绘图<br>在paintEvent方法中绘图，通过调用update方法触发painEvent的调用</p></li><li><p>在哪里绘图<br>在白色背景的QPixmap对象中绘图</p></li><li><p>如何通过移动鼠标进行绘图<br>鼠标拥有3个事件：(缺任一，不可运行)<br>（1）鼠标按下：mousePressEvent<br>（2）鼠标移动：mouseMoveEvent<br>（3）鼠标抬起：mouseReleaseEvent</p></li></ol></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(Drawing, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"绘图应用"</span>)</span><br><span class="line">        self.pix = QPixmap()</span><br><span class="line">        self.lastPoint = QPoint()</span><br><span class="line">        self.endPoint = QPoint()</span><br><span class="line">        self.initUi()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUi</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.resize(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">        <span class="comment"># 画布大小为400*400，背景为白色</span></span><br><span class="line">        self.pix = QPixmap(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">        self.pix.fill(Qt.white)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        pp = QPainter(self.pix)</span><br><span class="line">        <span class="comment"># 根据鼠标指针前后两个位置绘制直线</span></span><br><span class="line">        pp.drawLine(self.lastPoint, self.endPoint)</span><br><span class="line">        <span class="comment"># 让前一个坐标值等于后一个坐标值，这样就能实现画出连续的线</span></span><br><span class="line">        self.lastPoint = self.endPoint</span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, self.pix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.lastPoint = event.pos()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.buttons() <span class="keyword">and</span> Qt.LeftButton:</span><br><span class="line">            self.endPoint = event.pos()</span><br><span class="line">            self.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="comment"># 鼠标左键释放</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.endPoint = event.pos()</span><br><span class="line">            <span class="comment"># 进行重新绘制</span></span><br><span class="line">            self.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Drawing()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QSS基础"><a href="#QSS基础" class="headerlink" title="QSS基础"></a>QSS基础</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/BasicQSS.png" width="500"><br></center><ul><li>要点说明<br>  QSS（<code>Qt Style Sheets</code>） Qt样式表</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicQSS</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"QSS样式"</span>)</span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn1.setText(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2 = QPushButton(self)</span><br><span class="line">        btn2.setText(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3 = QPushButton(self)</span><br><span class="line">        btn3.setText(<span class="string">"按钮3"</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line">        vbox.addWidget(btn2)</span><br><span class="line">        vbox.addWidget(btn3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = BasicQSS()</span><br><span class="line">    <span class="comment"># 选择器</span></span><br><span class="line">    qssStyle = <span class="string">'''</span></span><br><span class="line"><span class="string">        QPushButton &#123;</span></span><br><span class="line"><span class="string">            background-color:pink</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    form.setStyleSheet(qssStyle)</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用QSS选择器设置控件样式"><a href="#使用QSS选择器设置控件样式" class="headerlink" title="使用QSS选择器设置控件样式"></a>使用QSS选择器设置控件样式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/QSSSelector.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> qdarkstyle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSSSelector</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"QSS样式"</span>)</span><br><span class="line"></span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn1.setText(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2 = QPushButton(self)</span><br><span class="line">        btn2.setProperty(<span class="string">'name'</span>,<span class="string">'btn2'</span>)</span><br><span class="line">        btn2.setText(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3 = QPushButton(self)</span><br><span class="line">        btn3.setProperty(<span class="string">'name'</span>,<span class="string">'btn3'</span>)</span><br><span class="line">        btn3.setText(<span class="string">"按钮3"</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line">        vbox.addWidget(btn2)</span><br><span class="line">        vbox.addWidget(btn3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = QSSSelector()</span><br><span class="line">    <span class="comment"># 选择器</span></span><br><span class="line">    qssStyle = <span class="string">'''</span></span><br><span class="line"><span class="string">        QPushButton[name="btn2"] &#123;</span></span><br><span class="line"><span class="string">            background-color:red;</span></span><br><span class="line"><span class="string">            color:yellow;</span></span><br><span class="line"><span class="string">            height:50;</span></span><br><span class="line"><span class="string">            font-size:30px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        QPushButton[name="btn3"] &#123;</span></span><br><span class="line"><span class="string">            background-color:blue;</span></span><br><span class="line"><span class="string">            color:yellow;</span></span><br><span class="line"><span class="string">            height:25;</span></span><br><span class="line"><span class="string">            font-size:15px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># form.setStyleSheet(qssStyle)</span></span><br><span class="line">    form.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QSS子控件选择器"><a href="#QSS子控件选择器" class="headerlink" title="QSS子控件选择器"></a>QSS子控件选择器</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/QSSSubControl.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSSSubControl</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"QSS子控件选择器"</span>)</span><br><span class="line">        combo = QComboBox(self)</span><br><span class="line">        combo.setObjectName(<span class="string">"myComboBox"</span>)</span><br><span class="line">        combo.addItem(<span class="string">"Window"</span>)</span><br><span class="line">        combo.addItem(<span class="string">"Linux"</span>)</span><br><span class="line">        combo.addItem(<span class="string">"Mac OS X"</span>)</span><br><span class="line"></span><br><span class="line">        combo.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">250</span>,<span class="number">200</span>,<span class="number">320</span>,<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = QSSSubControl()</span><br><span class="line">    qssStyle = <span class="string">'''</span></span><br><span class="line"><span class="string">       QComboBox#myComboBox::drop-down &#123;</span></span><br><span class="line"><span class="string">           image:url(./images/dropdown.png)</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    form.setStyleSheet(qssStyle)</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QDarkStyleSheet样式"><a href="#QDarkStyleSheet样式" class="headerlink" title="QDarkStyleSheet样式"></a>QDarkStyleSheet样式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/DarkStyleSheet.png" width="500"><br></center><ul><li><p>要点说明：<code>pip install qdarkstyle</code>/<code>conda install qdarkstyle</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, QtCore</span><br><span class="line"><span class="comment"># make the example runnable without the need to install</span></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> abspath, dirname</span><br><span class="line">sys.path.insert(<span class="number">0</span>, abspath(dirname(abspath(__file__)) + <span class="string">'/..'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> qdarkstyle</span><br><span class="line"><span class="keyword">import</span> ui.example_pyqt5_ui <span class="keyword">as</span> example_ui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Application entry point</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">    <span class="comment"># create the application and the main window</span></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    window = QtWidgets.QMainWindow()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup ui</span></span><br><span class="line">    ui = example_ui.Ui_MainWindow()</span><br><span class="line">    ui.setupUi(window)</span><br><span class="line">    ui.bt_delay_popup.addActions([</span><br><span class="line">        ui.actionAction,</span><br><span class="line">        ui.actionAction_C</span><br><span class="line">    ])</span><br><span class="line">    ui.bt_instant_popup.addActions([</span><br><span class="line">        ui.actionAction,</span><br><span class="line">        ui.actionAction_C</span><br><span class="line">    ])</span><br><span class="line">    ui.bt_menu_button_popup.addActions([</span><br><span class="line">        ui.actionAction,</span><br><span class="line">        ui.actionAction_C</span><br><span class="line">    ])</span><br><span class="line">    item = QtWidgets.QTableWidgetItem(<span class="string">"Test"</span>)</span><br><span class="line">    item.setCheckState(QtCore.Qt.Checked)</span><br><span class="line">    ui.tableWidget.setItem(<span class="number">0</span>, <span class="number">0</span>, item)</span><br><span class="line">    window.setWindowTitle(<span class="string">"QDarkStyle example"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tabify dock widgets to show bug #6</span></span><br><span class="line">    window.tabifyDockWidget(ui.dockWidget1, ui.dockWidget2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup stylesheet</span></span><br><span class="line">    print(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># auto quit after 2s when testing on travis-ci</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"--travis"</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">        QtCore.QTimer.singleShot(<span class="number">2000</span>, app.exit)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># run</span></span><br><span class="line">    window.show()</span><br><span class="line">    app.exec_()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3种设置背景色和背景图片的方式"><a href="#3种设置背景色和背景图片的方式" class="headerlink" title="3种设置背景色和背景图片的方式"></a>3种设置背景色和背景图片的方式</h3><ul><li>使用多种方式设置窗口背景色和背景图片<ol><li>QSS</li><li>QPalette</li><li>直接绘制</li></ol></li></ul><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">win = QMainWindow()</span><br><span class="line">win.setWindowTitle(<span class="string">"背景图片"</span>)</span><br><span class="line">win.resize(<span class="number">350</span>,<span class="number">250</span>)</span><br><span class="line">win.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 通过QSS动态修改窗口的背景颜色和背景图片</span></span><br><span class="line"><span class="string">#win.setStyleSheet("#MainWindow&#123;border-image:url(./images/python.jpg);&#125;")</span></span><br><span class="line"><span class="string">win.setStyleSheet("#MainWindow&#123;background-color:yellow&#125;")</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过QPalette设置背景图片和背景颜色</span></span><br><span class="line"><span class="comment"># palette = QPalette()</span></span><br><span class="line"><span class="comment"># palette.setBrush(QPalette.Background,QBrush(QPixmap("./images/python.jpg")))</span></span><br><span class="line"><span class="comment"># palette.setColor(QPalette.Background,Qt.red)</span></span><br><span class="line"><span class="comment"># win.setPalette(palette)</span></span><br><span class="line"></span><br><span class="line">win.show()</span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background1.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Background1</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"绘制背景颜色"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.setBrush(Qt.yellow)</span><br><span class="line">        painter.drawRect(self.rect())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Background1()</span><br><span class="line"></span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background2.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Background2</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"绘制背景图片"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        pixmap = QPixmap(<span class="string">'./images/screen1.jpg'</span>)</span><br><span class="line"></span><br><span class="line">        painter.drawPixmap(self.rect(),pixmap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Background2()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="实现不规则窗口（异形窗口）"><a href="#实现不规则窗口（异形窗口）" class="headerlink" title="实现不规则窗口（异形窗口）"></a>实现不规则窗口（异形窗口）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/AbnormityWindow.png" width="500"><br></center><ul><li><p>要点说明</p><ol><li>通过mask实现异形窗口</li><li>需要一张透明的png图，透明部分被扣出，形成一个非矩形的区域</li><li>移动和关闭不规则窗口</li></ol></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbnormityWindow</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"异形窗口"</span>)</span><br><span class="line">        self.pix = QBitmap(<span class="string">'./images/mask.png'</span>)</span><br><span class="line">        self.resize(self.pix.size())</span><br><span class="line">        self.setMask(self.pix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.m_drag = <span class="keyword">True</span></span><br><span class="line">            self.m_DragPosition = event.globalPos() - self.pos()</span><br><span class="line">            self.setCursor(QCursor(Qt.OpenHandCursor))</span><br><span class="line">            print(<span class="string">"event.globalPos()"</span>,event.globalPos())  <span class="comment">#</span></span><br><span class="line">            print(<span class="string">"event.pos()"</span>,event.pos())</span><br><span class="line">            print(<span class="string">"self.pos()"</span>,self.pos())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.RightButton:</span><br><span class="line">            self.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> Qt.LeftButton <span class="keyword">and</span> self.m_drag:</span><br><span class="line">            <span class="comment"># 当左键移动窗体修改偏移值</span></span><br><span class="line">            <span class="comment"># QPoint</span></span><br><span class="line">            <span class="comment"># 实时计算窗口左上角坐标</span></span><br><span class="line">            self.move(QMouseEvent.globalPos() - self.m_DragPosition)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        self.m_drag = <span class="keyword">False</span></span><br><span class="line">        self.setCursor(QCursor(Qt.ArrowCursor))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.drawPixmap(<span class="number">0</span>,<span class="number">0</span>,self.pix.width(),self.pix.height(),QPixmap(<span class="string">'./images/screen1.jpg'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = AbnormityWindow()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="移动和关闭不规则窗口（异形窗口）"><a href="#移动和关闭不规则窗口（异形窗口）" class="headerlink" title="移动和关闭不规则窗口（异形窗口）"></a>移动和关闭不规则窗口（异形窗口）</h3><h3 id="实现异形窗口动画效果"><a href="#实现异形窗口动画效果" class="headerlink" title="实现异形窗口动画效果"></a>实现异形窗口动画效果</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/AnimationWindows.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap, QPainter, QCursor</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QTimer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationWindows</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(AnimationWindows, self).__init__(parent)</span><br><span class="line">        self.i = <span class="number">1</span></span><br><span class="line">        self.mypix()</span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.setInterval(<span class="number">500</span>)  <span class="comment"># 500毫秒</span></span><br><span class="line">        self.timer.timeout.connect(self.timeChange)</span><br><span class="line">        self.timer.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示不规则 pic</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mypix</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.update()</span><br><span class="line">        <span class="keyword">if</span> self.i == <span class="number">5</span>:</span><br><span class="line">            self.i = <span class="number">1</span></span><br><span class="line">        self.mypic = &#123;<span class="number">1</span>: <span class="string">'./images/left.png'</span>, <span class="number">2</span>: <span class="string">"./images/up.png"</span>, <span class="number">3</span>: <span class="string">'./images/right.png'</span>, <span class="number">4</span>: <span class="string">'./images/down.png'</span>&#125;</span><br><span class="line">        self.pix = QPixmap(self.mypic[self.i])</span><br><span class="line">        self.resize(self.pix.size())</span><br><span class="line">        self.setMask(self.pix.mask())</span><br><span class="line">        self.dragPosition = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标双击事件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == <span class="number">1</span>:</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line">            self.mypix()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每500毫秒修改paint</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeChange</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.i += <span class="number">1</span></span><br><span class="line">        self.mypix()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.m_drag = <span class="keyword">True</span></span><br><span class="line">            self.m_DragPosition = event.globalPos() - self.pos()</span><br><span class="line"></span><br><span class="line">            self.setCursor(QCursor(Qt.OpenHandCursor))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> Qt.LeftButton <span class="keyword">and</span> self.m_drag:</span><br><span class="line">            self.move(QMouseEvent.globalPos() - self.m_DragPosition)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        self.m_drag = <span class="keyword">False</span></span><br><span class="line">        self.setCursor(QCursor(Qt.ArrowCursor))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, self.pix.width(), self.pix.height(), self.pix)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = AnimationWindows()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="装载gif动画文件"><a href="#装载gif动画文件" class="headerlink" title="装载gif动画文件"></a>装载gif动画文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/gifanim.png" width="500"><br></center><ul><li><p>要点说明： <code>QMovie</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,  QLabel  ,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QMovie</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingGif</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.label = QLabel(<span class="string">""</span>,self)</span><br><span class="line">        self.setFixedSize(<span class="number">128</span>,<span class="number">128</span>)</span><br><span class="line">        self.setWindowFlags(Qt.Dialog | Qt.CustomizeWindowHint)</span><br><span class="line">        self.movie = QMovie(<span class="string">'./images/loading.gif'</span>)</span><br><span class="line">        self.label.setMovie(self.movie)</span><br><span class="line">        self.movie.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = LoadingGif()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用QSS为标签和按钮添加背景图"><a href="#使用QSS为标签和按钮添加背景图" class="headerlink" title="使用QSS为标签和按钮添加背景图"></a>使用QSS为标签和按钮添加背景图</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/LabelButtonBackground.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabelButtonBackground</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        label1 = QLabel(self)</span><br><span class="line">        label1.setToolTip(<span class="string">'这是一个文本标签'</span>)</span><br><span class="line">        label1.setStyleSheet(<span class="string">'QLabel&#123;border-image:url(./images/python.jpg);&#125;'</span>)</span><br><span class="line">        label1.setFixedWidth(<span class="number">476</span>)</span><br><span class="line">        label1.setFixedHeight(<span class="number">259</span>)</span><br><span class="line"></span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn1.setObjectName(<span class="string">'btn1'</span>)</span><br><span class="line">        btn1.setMaximumSize(<span class="number">48</span>, <span class="number">48</span>)</span><br><span class="line">        btn1.setMinimumSize(<span class="number">48</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        style = <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            #btn1&#123;</span></span><br><span class="line"><span class="string">                border-radius:4px;</span></span><br><span class="line"><span class="string">                background-image:url('./images/add.png');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            #btn1:Pressed &#123;</span></span><br><span class="line"><span class="string">                background-image:url('./images/addhover.png');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        btn1.setStyleSheet(style)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addStretch()</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line">        self.setWindowTitle(<span class="string">'使用QSS为标签和按钮添加背景图'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = LabelButtonBackground()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/ScaleImage.png" width="500"><br></center><ul><li><p>要点说明：<code>QImage.scaled</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QLabel, QWidget, QVBoxLayout</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaleImage</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"图片大小缩放例子"</span>)</span><br><span class="line">        filename = <span class="string">'./images/Cloudy_72px.png'</span></span><br><span class="line">        img = QImage(filename)</span><br><span class="line">        label1 = QLabel(self)</span><br><span class="line">        label1.setFixedWidth(<span class="number">200</span>)</span><br><span class="line">        label1.setFixedHeight(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        result = img.scaled(label1.width(),label1.height(),Qt.IgnoreAspectRatio,Qt.SmoothTransformation)</span><br><span class="line">        label1.setPixmap(QPixmap.fromImage(result))</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = ScaleImage()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="创建透明和半透明窗口"><a href="#创建透明和半透明窗口" class="headerlink" title="创建透明和半透明窗口"></a>创建透明和半透明窗口</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/OpacityWindow.png" width="500"><br></center><ul><li><p>要点说明：<code>win.setWindowOpacity(0.6)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = QMainWindow()</span><br><span class="line">    win.setWindowTitle(<span class="string">'窗口的透明度设置'</span>)</span><br><span class="line">    <span class="comment"># 0到1，1表示不透明，0表示完全透明</span></span><br><span class="line">    win.setWindowOpacity(<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    button = QPushButton(<span class="string">'我的按钮'</span>,win)</span><br><span class="line"></span><br><span class="line">    win.resize(<span class="number">400</span>,<span class="number">200</span>)</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="装载QSS文件"><a href="#装载QSS文件" class="headerlink" title="装载QSS文件"></a>装载QSS文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/LoadQSS.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> CommonHelper <span class="keyword">import</span> CommonHelper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MainWindow, self).__init__(parent)</span><br><span class="line">        self.resize(<span class="number">477</span>, <span class="number">258</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"加载QSS文件"</span>)</span><br><span class="line">        btn = QPushButton()</span><br><span class="line">        btn.setText(<span class="string">'装载QSS文件'</span>)</span><br><span class="line">        btn.setToolTip(<span class="string">'提示文本'</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(btn)</span><br><span class="line">        btn.clicked.connect(self.onClick)</span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        widget  = QWidget(self)</span><br><span class="line">        self.setCentralWidget(widget)</span><br><span class="line">        widget.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        styleFile = <span class="string">'./style.qss'</span></span><br><span class="line">        qssStyle = CommonHelper.readQSS(styleFile)</span><br><span class="line">        win.setStyleSheet(qssStyle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MainWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>CommonHelper.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonHelper</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readQSS</span><span class="params">(style)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(style,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> f.read()</span><br></pre></td></tr></table></figure><p>style.qss 👇</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">QMainWindow</span>&#123;</span><br><span class="line">    <span class="attribute">border-image</span>:<span class="built_in">url</span>(./images/python.jpg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">QToolTip</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="built_in">rgb</span>(45,45,45);</span><br><span class="line">   <span class="attribute">background</span>:white;</span><br><span class="line">   <span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用动画效果改变窗口的尺寸"><a href="#用动画效果改变窗口的尺寸" class="headerlink" title="用动画效果改变窗口的尺寸"></a>用动画效果改变窗口的尺寸</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/AnimWindow.png" width="500"><br></center><ul><li><p>要点说明：<code>QPropertyAnimation</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimWindow</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(AnimWindow, self).__init__()</span><br><span class="line">        self.OrigHeight = <span class="number">50</span></span><br><span class="line">        self.ChangeHeight = <span class="number">150</span></span><br><span class="line">        self.setGeometry(QRect(<span class="number">500</span>, <span class="number">400</span>, <span class="number">150</span>, self.OrigHeight))</span><br><span class="line">        self.btn = QPushButton(<span class="string">'展开'</span>, self)</span><br><span class="line">        self.btn.setGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">60</span>, <span class="number">35</span>)</span><br><span class="line">        self.btn.clicked.connect(self.change)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(self)</span>:</span></span><br><span class="line">        currentHeight = self.height()</span><br><span class="line">        <span class="keyword">if</span> self.OrigHeight == currentHeight:</span><br><span class="line">            startHeight = self.OrigHeight</span><br><span class="line">            endHeight = self.ChangeHeight</span><br><span class="line">            self.btn.setText(<span class="string">'收缩'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            startHeight = self.ChangeHeight</span><br><span class="line">            endHeight= self.OrigHeight</span><br><span class="line">            self.btn.setText(<span class="string">'展开'</span>)</span><br><span class="line"></span><br><span class="line">        self.animation = QPropertyAnimation(self,<span class="string">b'geometry'</span>)</span><br><span class="line">        self.animation.setDuration(<span class="number">500</span>)</span><br><span class="line">        self.animation.setStartValue(QRect(<span class="number">500</span>,<span class="number">400</span>,<span class="number">150</span>,startHeight))</span><br><span class="line">        self.animation.setEndValue(QRect(<span class="number">500</span>,<span class="number">400</span>,<span class="number">150</span>,endHeight))</span><br><span class="line">        self.animation.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = AnimWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用动画效果–不同速度移动窗口"><a href="#用动画效果–不同速度移动窗口" class="headerlink" title="用动画效果–不同速度移动窗口"></a>用动画效果–不同速度移动窗口</h3><ul><li>效果说明: 两个窗口（window1、window2）并行（同时）/串行（一先一后）biubiubiu动画移动</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window1 = QMainWindow()</span><br><span class="line">window1.show()</span><br><span class="line">window2 = QMainWindow()</span><br><span class="line">window2.show()</span><br><span class="line"></span><br><span class="line">animation1 = QPropertyAnimation(window1, <span class="string">b'geometry'</span>)</span><br><span class="line">animation2 = QPropertyAnimation(window2, <span class="string">b'geometry'</span>)</span><br><span class="line"></span><br><span class="line">group = QParallelAnimationGroup()  <span class="comment"># 并行</span></span><br><span class="line"><span class="comment"># group = QSequentialAnimationGroup()  # 串行</span></span><br><span class="line"></span><br><span class="line">group.addAnimation(animation1)</span><br><span class="line">group.addAnimation(animation2)</span><br><span class="line"></span><br><span class="line">animation1.setDuration(<span class="number">3000</span>)</span><br><span class="line">animation1.setStartValue(QRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation1.setEndValue(QRect(<span class="number">250</span>,<span class="number">250</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation1.setEasingCurve(QEasingCurve.OutBounce)</span><br><span class="line"></span><br><span class="line">animation2.setDuration(<span class="number">4000</span>)</span><br><span class="line">animation2.setStartValue(QRect(<span class="number">250</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation2.setEndValue(QRect(<span class="number">850</span>,<span class="number">250</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation2.setEasingCurve(QEasingCurve.CosineCurve)</span><br><span class="line"></span><br><span class="line">group.start()</span><br><span class="line"></span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><h3 id="用PyInstaller打包PyQt5"><a href="#用PyInstaller打包PyQt5" class="headerlink" title="用PyInstaller打包PyQt5"></a>用PyInstaller打包PyQt5</h3><ul><li>要点说明</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line"></span><br><span class="line">pyinstaller -Fw Calc.py</span><br><span class="line"></span><br><span class="line">-w：不显示终端</span><br><span class="line">-F：将所有的库打包成一个单独的文件</span><br></pre></td></tr></table></figure><h3 id="操作SQLite数据库"><a href="#操作SQLite数据库" class="headerlink" title="操作SQLite数据库"></a>操作SQLite数据库</h3><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtSql <span class="keyword">import</span> QSqlDatabase,QSqlQuery</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDB</span><span class="params">()</span>:</span></span><br><span class="line">    db = QSqlDatabase.addDatabase(<span class="string">'QSQLITE'</span>)</span><br><span class="line">    <span class="comment"># 指定SQLite数据库的文件名</span></span><br><span class="line">    db.setDatabaseName(<span class="string">'./db/database.db'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db.open():</span><br><span class="line">        print(<span class="string">'无法建立与数据库的连接'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    query = QSqlQuery()</span><br><span class="line">    query.exec(<span class="string">'create table people(id int primary key,name varchar(10),address varchar(50))'</span>)</span><br><span class="line">    query.exec(<span class="string">'insert into people values(1,"李宁","Shenyang")'</span>)</span><br><span class="line">    query.exec(<span class="string">'insert into people values(2,"超人","克星")'</span>)</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    createDB()</span><br></pre></td></tr></table></figure><h3 id="使用可视化的方式对SQLite数据库进行增、删、改、查操作"><a href="#使用可视化的方式对SQLite数据库进行增、删、改、查操作" class="headerlink" title="使用可视化的方式对SQLite数据库进行增、删、改、查操作"></a>使用可视化的方式对SQLite数据库进行增、删、改、查操作</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/DataGrid.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtSql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initializeModel</span><span class="params">(model)</span>:</span></span><br><span class="line">    model.setTable(<span class="string">'people'</span>)</span><br><span class="line">    model.setEditStrategy(QSqlTableModel.OnFieldChange)</span><br><span class="line">    model.select()</span><br><span class="line">    model.setHeaderData(<span class="number">0</span>, Qt.Horizontal,<span class="string">'ID'</span>)</span><br><span class="line">    model.setHeaderData(<span class="number">1</span>, Qt.Horizontal, <span class="string">'姓名'</span>)</span><br><span class="line">    model.setHeaderData(<span class="number">2</span>, Qt.Horizontal, <span class="string">'地址'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createView</span><span class="params">(title,model)</span>:</span></span><br><span class="line">    view = QTableView()</span><br><span class="line">    view.setModel(model)</span><br><span class="line">    view.setWindowTitle(title)</span><br><span class="line">    <span class="keyword">return</span> view</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findrow</span><span class="params">(i)</span>:</span></span><br><span class="line">    delrow = i.row()</span><br><span class="line">    print(<span class="string">'find row=%s'</span> % str(delrow))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addrow</span><span class="params">()</span>:</span></span><br><span class="line">    ret = model.insertRows(model.rowCount(),<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'insertRow=%s'</span> % str(ret))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    db = QSqlDatabase.addDatabase(<span class="string">'QSQLITE'</span>)</span><br><span class="line">    db.setDatabaseName(<span class="string">'./db/database.db'</span>)</span><br><span class="line"></span><br><span class="line">    model = QSqlTableModel()</span><br><span class="line">    delrow = <span class="number">-1</span></span><br><span class="line">    initializeModel(model)</span><br><span class="line">    view = createView(<span class="string">"展示数据"</span>,model)</span><br><span class="line">    view.clicked.connect(findrow)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addBtn = QPushButton(<span class="string">'添加一行'</span>)</span><br><span class="line">    addBtn.clicked.connect(addrow)</span><br><span class="line"></span><br><span class="line">    delBtn = QPushButton(<span class="string">'删除一行'</span>)</span><br><span class="line">    delBtn.clicked.connect(<span class="keyword">lambda</span> :model.removeRow(view.currentIndex().row()))</span><br><span class="line"></span><br><span class="line">    layout = QVBoxLayout()</span><br><span class="line">    layout.addWidget(view)</span><br><span class="line">    layout.addWidget(addBtn)</span><br><span class="line">    layout.addWidget(delBtn)</span><br><span class="line"></span><br><span class="line">    dlg = QDialog()</span><br><span class="line">    dlg.setLayout(layout)</span><br><span class="line">    dlg.setWindowTitle(<span class="string">"Database Demo"</span>)</span><br><span class="line">    dlg.resize(<span class="number">500</span>,<span class="number">400</span>)</span><br><span class="line">    dlg.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="分页显示数据"><a href="#分页显示数据" class="headerlink" title="分页显示数据"></a>分页显示数据</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/DataGrid1.png" width="500"><br></center><ul><li><p>要点说明：<code>limit n,m</code></p></li><li><p>完整代码：<a href="https://github.com/Captainzj/PyQt5_Practice/blob/master/src/ext/DataGrid1.py" target="_blank" rel="noopener">DataGrid1.py</a></p></li></ul><h3 id="使用PyQtGraph进行数据可视化"><a href="#使用PyQtGraph进行数据可视化" class="headerlink" title="使用PyQtGraph进行数据可视化"></a>使用PyQtGraph进行数据可视化</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Graph.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication</span><br><span class="line"><span class="keyword">import</span> pyqtgraph <span class="keyword">as</span> pg</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pyqtgraph_pyqt <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(MainWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        pg.setConfigOption(<span class="string">'background'</span>, <span class="string">'#f0f0f0'</span>)</span><br><span class="line">        pg.setConfigOption(<span class="string">'foreground'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.draw1()</span><br><span class="line">        self.draw2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pyqtgraph1.clear()</span><br><span class="line"></span><br><span class="line">        <span class="string">'''第一种绘图方式'''</span></span><br><span class="line">        print(np.random.normal(size=<span class="number">120</span>))</span><br><span class="line">        self.pyqtgraph1.addPlot(title=<span class="string">"绘图单条线"</span>, y=np.random.normal(size=<span class="number">120</span>), pen=pg.mkPen(color=<span class="string">'b'</span>, width=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        <span class="string">'''第二种绘图方式'''</span></span><br><span class="line">        plt2 = self.pyqtgraph1.addPlot(title=<span class="string">'绘制多条线'</span>)</span><br><span class="line"></span><br><span class="line">        plt2.plot(np.random.normal(size=<span class="number">150</span>), pen=pg.mkPen(color=<span class="string">'r'</span>, width=<span class="number">2</span>),</span><br><span class="line">                  name=<span class="string">"Red curve"</span>)</span><br><span class="line">        plt2.plot(np.random.normal(size=<span class="number">110</span>) + <span class="number">5</span>, pen=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), name=<span class="string">"Green curve"</span>)</span><br><span class="line">        plt2.plot(np.random.normal(size=<span class="number">120</span>) + <span class="number">10</span>, pen=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), name=<span class="string">"Blue curve"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw2</span><span class="params">(self)</span>:</span></span><br><span class="line">        plt = self.pyqtgraph2.addPlot(title=<span class="string">'绘制条状图'</span>)</span><br><span class="line">        x = np.arange(<span class="number">10</span>)</span><br><span class="line">        print(x)</span><br><span class="line">        y1 = np.sin(x)</span><br><span class="line">        y2 = <span class="number">1.1</span> * np.sin(x + <span class="number">1</span>)</span><br><span class="line">        y3 = <span class="number">1.2</span> * np.sin(x + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        bg1 = pg.BarGraphItem(x=x, height=y1, width=<span class="number">0.3</span>, brush=<span class="string">'r'</span>)</span><br><span class="line">        bg2 = pg.BarGraphItem(x=x + <span class="number">0.33</span>, height=y2, width=<span class="number">0.3</span>, brush=<span class="string">'g'</span>)</span><br><span class="line">        bg3 = pg.BarGraphItem(x=x + <span class="number">0.66</span>, height=y3, width=<span class="number">0.3</span>, brush=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">        plt.addItem(bg1)</span><br><span class="line">        plt.addItem(bg2)</span><br><span class="line">        plt.addItem(bg3)</span><br><span class="line"></span><br><span class="line">        self.pyqtgraph2.nextRow()</span><br><span class="line"></span><br><span class="line">        p4 = self.pyqtgraph2.addPlot(title=<span class="string">"参数图+显示网格"</span>)</span><br><span class="line">        x = np.cos(np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">1000</span>))</span><br><span class="line">        y = np.sin(np.linspace(<span class="number">0</span>, <span class="number">4</span> * np.pi, <span class="number">1000</span>))</span><br><span class="line">        p4.plot(x, y, pen=pg.mkPen(color=<span class="string">'d'</span>, width=<span class="number">2</span>))</span><br><span class="line">        <span class="comment">#p4.showGrid(x=True, y=True)  # 显示网格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ui = MainWindow()</span><br><span class="line">    ui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>pyqtgraph_pyqt.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'pyqtgraph_pyqt.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.9.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.pyqtgraph1 = GraphicsLayoutWidget(self.centralwidget)</span><br><span class="line">        self.pyqtgraph1.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">721</span>, <span class="number">251</span>))</span><br><span class="line">        self.pyqtgraph1.setObjectName(<span class="string">"pyqtgraph1"</span>)</span><br><span class="line">        self.pyqtgraph2 = GraphicsLayoutWidget(self.centralwidget)</span><br><span class="line">        self.pyqtgraph2.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">290</span>, <span class="number">501</span>, <span class="number">281</span>))</span><br><span class="line">        self.pyqtgraph2.setObjectName(<span class="string">"pyqtgraph2"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">22</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"MainWindow"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyqtgraph <span class="keyword">import</span> GraphicsLayoutWidget</span><br></pre></td></tr></table></figure><h3 id="项目实战：天气信息查询"><a href="#项目实战：天气信息查询" class="headerlink" title="项目实战：天气信息查询"></a>项目实战：天气信息查询</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/CallWeatherWin.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,requests</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> WeatherWin <span class="keyword">import</span> Ui_Form</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MainWindow, self).__init__(parent)</span><br><span class="line">        self.ui = Ui_Form()</span><br><span class="line">        self.ui.setupUi(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queryWeather</span><span class="params">(self)</span>:</span></span><br><span class="line">        cityName = self.ui.weatherComboBox.currentText()</span><br><span class="line">        cityCode = self.transCityName(cityName)</span><br><span class="line"></span><br><span class="line">        rep = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/'</span> + cityCode + <span class="string">'.html'</span>)</span><br><span class="line">        rep.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        print(rep.json())</span><br><span class="line"></span><br><span class="line">        msg1 = <span class="string">'城市: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'city'</span>] + <span class="string">'\n'</span></span><br><span class="line">        msg2 = <span class="string">'风向: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WD'</span>] + <span class="string">'\n'</span></span><br><span class="line">        msg3 = <span class="string">'温度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'temp'</span>] + <span class="string">' 度'</span> + <span class="string">'\n'</span></span><br><span class="line">        msg4 = <span class="string">'风力: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WS'</span>] + <span class="string">'\n'</span></span><br><span class="line">        msg5 = <span class="string">'湿度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'SD'</span>] + <span class="string">'\n'</span></span><br><span class="line">        result = msg1 + msg2 + msg3 + msg4 + msg5</span><br><span class="line">        self.ui.resultText.setText(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transCityName</span><span class="params">(self, cityName)</span>:</span></span><br><span class="line">        cityCode = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> cityName == <span class="string">'北京'</span>:</span><br><span class="line">            cityCode = <span class="string">'101010100'</span></span><br><span class="line">        <span class="keyword">elif</span> cityName == <span class="string">'天津'</span>:</span><br><span class="line">            cityCode = <span class="string">'101030100'</span></span><br><span class="line">        <span class="keyword">elif</span> cityName == <span class="string">'上海'</span>:</span><br><span class="line">            cityCode = <span class="string">'101020100'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cityCode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearResult</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'* clearResult  '</span>)</span><br><span class="line">        self.ui.resultText.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MainWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>WeatherWin.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'WeatherWin.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.9.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Form</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Form)</span>:</span></span><br><span class="line">        Form.setObjectName(<span class="string">"Form"</span>)</span><br><span class="line">        Form.resize(<span class="number">450</span>, <span class="number">347</span>)</span><br><span class="line">        self.groupBox = QtWidgets.QGroupBox(Form)</span><br><span class="line">        self.groupBox.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">431</span>, <span class="number">251</span>))</span><br><span class="line">        self.groupBox.setObjectName(<span class="string">"groupBox"</span>)</span><br><span class="line">        self.weatherComboBox = QtWidgets.QComboBox(self.groupBox)</span><br><span class="line">        self.weatherComboBox.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">30</span>, <span class="number">131</span>, <span class="number">21</span>))</span><br><span class="line">        self.weatherComboBox.setObjectName(<span class="string">"weatherComboBox"</span>)</span><br><span class="line">        self.weatherComboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.weatherComboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.weatherComboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.resultText = QtWidgets.QTextEdit(self.groupBox)</span><br><span class="line">        self.resultText.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">60</span>, <span class="number">411</span>, <span class="number">181</span>))</span><br><span class="line">        self.resultText.setObjectName(<span class="string">"resultText"</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.groupBox)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">30</span>, <span class="number">72</span>, <span class="number">21</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        self.queryBtn = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.queryBtn.setGeometry(QtCore.QRect(<span class="number">90</span>, <span class="number">300</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        self.queryBtn.setObjectName(<span class="string">"queryBtn"</span>)</span><br><span class="line">        self.clearBtn = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.clearBtn.setGeometry(QtCore.QRect(<span class="number">230</span>, <span class="number">300</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        self.clearBtn.setObjectName(<span class="string">"clearBtn"</span>)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        self.clearBtn.clicked.connect(Form.clearResult)</span><br><span class="line">        self.queryBtn.clicked.connect(Form.queryWeather)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Form)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">"Form"</span>, <span class="string">"Form"</span>))</span><br><span class="line">        self.groupBox.setTitle(_translate(<span class="string">"Form"</span>, <span class="string">"查询城市天气"</span>))</span><br><span class="line">        self.weatherComboBox.setItemText(<span class="number">0</span>, _translate(<span class="string">"Form"</span>, <span class="string">"北京"</span>))</span><br><span class="line">        self.weatherComboBox.setItemText(<span class="number">1</span>, _translate(<span class="string">"Form"</span>, <span class="string">"天津"</span>))</span><br><span class="line">        self.weatherComboBox.setItemText(<span class="number">2</span>, _translate(<span class="string">"Form"</span>, <span class="string">"上海"</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">"Form"</span>, <span class="string">"城市"</span>))</span><br><span class="line">        self.queryBtn.setText(_translate(<span class="string">"Form"</span>, <span class="string">"查询"</span>))</span><br><span class="line">        self.clearBtn.setText(_translate(<span class="string">"Form"</span>, <span class="string">"清空"</span>))</span><br></pre></td></tr></table></figure><p>Test_demo 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">rep = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/101010100.html'</span>)</span><br><span class="line">rep.encoding = <span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'返回结果: %s'</span> % rep.json() )</span><br><span class="line">print(<span class="string">'城市: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'city'</span>] )</span><br><span class="line">print(<span class="string">'风向: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WD'</span>] )</span><br><span class="line">print(<span class="string">'温度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'temp'</span>] + <span class="string">" 度"</span>)</span><br><span class="line">print(<span class="string">'风力: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WS'</span>] )</span><br><span class="line">print(<span class="string">'湿度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'SD'</span>] )</span><br></pre></td></tr></table></figure><p>Out: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">返回结果: &#123;'weatherinfo': &#123;'city': '北京', 'cityid': '101010100', 'temp': '27.9', 'WD': '南风', 'WS': '小于3级', 'SD': '28%', 'AP': '1002hPa', 'njd': '暂无实况', 'WSE': '&lt;3', 'time': '17:55', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9010_JB'&#125;&#125;</span><br><span class="line">城市: 北京</span><br><span class="line">风向: 南风</span><br><span class="line">温度: 27.9 度</span><br><span class="line">风力: 小于3级</span><br><span class="line">湿度: 28%</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
</feed>
