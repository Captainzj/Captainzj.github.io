<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Go Further</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-15T14:55:38.744Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CaptainSE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frequently-used Software/ISO</title>
    <link href="http://yoursite.com/2019/02/15/Frequently-used-Software-ISO/"/>
    <id>http://yoursite.com/2019/02/15/Frequently-used-Software-ISO/</id>
    <published>2019-02-15T08:36:19.000Z</published>
    <updated>2019-02-15T14:55:38.744Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h4 id="Windows-镜像"><a href="#Windows-镜像" class="headerlink" title="Windows 镜像"></a>Windows 镜像</h4><p><a href="http://msdn.itellyou.cn" target="_blank" rel="noopener">MSDN, 我告诉你</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（九）</title>
    <link href="http://yoursite.com/2019/02/01/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/01/PyQt5-Python-实战课程（九）/</id>
    <published>2019-01-31T16:01:53.000Z</published>
    <updated>2019-01-30T17:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="窗口、绘图与特效"><a href="#窗口、绘图与特效" class="headerlink" title="窗口、绘图与特效"></a>窗口、绘图与特效</h2><h3 id="设置窗口风格"><a href="#设置窗口风格" class="headerlink" title="设置窗口风格"></a>设置窗口风格</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 设置窗口样式</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="用代码设置窗口的最大化和最小化"><a href="#用代码设置窗口的最大化和最小化" class="headerlink" title="用代码设置窗口的最大化和最小化"></a>用代码设置窗口的最大化和最小化</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 项目实战：实现绘图应用</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/Drawing.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="QSS基础"><a href="#QSS基础" class="headerlink" title="QSS基础"></a>QSS基础</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/BasicQSS.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用QSS选择器设置控件样式</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="QSS子控件选择器"><a href="#QSS子控件选择器" class="headerlink" title="QSS子控件选择器"></a>QSS子控件选择器</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### QDarkStyleSheet样式</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/DarkStyleSheet.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="3种设置背景色和背景图片的方式"><a href="#3种设置背景色和背景图片的方式" class="headerlink" title="3种设置背景色和背景图片的方式"></a>3种设置背景色和背景图片的方式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background.png" width="500"><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background1.png" width="500"><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background2.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 实现不规则窗口（异形窗口）</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/AbnormityWindow.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="移动和关闭不规则窗口（异形窗口）"><a href="#移动和关闭不规则窗口（异形窗口）" class="headerlink" title="移动和关闭不规则窗口（异形窗口）"></a>移动和关闭不规则窗口（异形窗口）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 实现异形窗口动画效果</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/AnimationWindows.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="装载gif动画文件"><a href="#装载gif动画文件" class="headerlink" title="装载gif动画文件"></a>装载gif动画文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/gitanim.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用QSS为标签和按钮添加背景图</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/LabelButtonBackground.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建透明和半透明窗口</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="装载QSS文件"><a href="#装载QSS文件" class="headerlink" title="装载QSS文件"></a>装载QSS文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/LoadQSS.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 用动画效果改变窗口的尺寸</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/AnimWindow.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="用动画效果–不同速度移动窗口"><a href="#用动画效果–不同速度移动窗口" class="headerlink" title="用动画效果–不同速度移动窗口"></a>用动画效果–不同速度移动窗口</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 其他应用</span></span><br><span class="line"><span class="comment">### 用PyInstaller打包PyQt5</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="操作SQLite数据库"><a href="#操作SQLite数据库" class="headerlink" title="操作SQLite数据库"></a>操作SQLite数据库</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用可视化的方式对SQLite数据库进行增、删、改、查操作</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="分页显示数据"><a href="#分页显示数据" class="headerlink" title="分页显示数据"></a>分页显示数据</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用PyQtGraph进行数据可视化</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（九）/.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="项目实战：天气信息查询"><a href="#项目实战：天气信息查询" class="headerlink" title="项目实战：天气信息查询"></a>项目实战：天气信息查询</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/CallWeatherWin.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><pre><code class="python"></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（八）</title>
    <link href="http://yoursite.com/2019/01/31/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/31/PyQt5-Python-实战课程（八）/</id>
    <published>2019-01-30T16:18:58.000Z</published>
    <updated>2019-02-15T15:38:46.099Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="PyQt5与Web交互"><a href="#PyQt5与Web交互" class="headerlink" title="PyQt5与Web交互"></a>PyQt5与Web交互</h2><h3 id="用Web浏览器控件（QWebEngineView）显示网页"><a href="#用Web浏览器控件（QWebEngineView）显示网页" class="headerlink" title="用Web浏览器控件（QWebEngineView）显示网页"></a>用Web浏览器控件（QWebEngineView）显示网页</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/QWebEngineView.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 装载本地Web页面</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/LocalHTML.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="显示嵌入Web页面"><a href="#显示嵌入Web页面" class="headerlink" title="显示嵌入Web页面"></a>显示嵌入Web页面</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### PyQt5调用JavaScript代码，并返回值</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/PyQtCallJS.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="JavaScript调用Python-API计算阶乘"><a href="#JavaScript调用Python-API计算阶乘" class="headerlink" title="JavaScript调用Python API计算阶乘"></a>JavaScript调用Python API计算阶乘</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/PyFactorial.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">## 布局</span></span><br><span class="line"><span class="comment">### 绝对布局</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/AbsoluteLayout.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="水平盒布局（QHBoxLayout）"><a href="#水平盒布局（QHBoxLayout）" class="headerlink" title="水平盒布局（QHBoxLayout）"></a>水平盒布局（QHBoxLayout）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/HBoxLayout.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 设置控件的对齐方式</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/HBoxLayoutAlign.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="垂直盒布局"><a href="#垂直盒布局" class="headerlink" title="垂直盒布局"></a>垂直盒布局</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/VBoxLayout.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 设置布局的伸缩量</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/Stretch.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/Stretch1.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="让按钮永远在窗口的右下角"><a href="#让按钮永远在窗口的右下角" class="headerlink" title="让按钮永远在窗口的右下角"></a>让按钮永远在窗口的右下角</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/RightBottomButton.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 栅格布局：用循环方式实现计算器UI</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/Calc.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="栅格布局：进行表单UI设计"><a href="#栅格布局：进行表单UI设计" class="headerlink" title="栅格布局：进行表单UI设计"></a>栅格布局：进行表单UI设计</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/GridForm.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 表单布局</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/FormLayout.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="拖动控件之间的边界（QSplitter）"><a href="#拖动控件之间的边界（QSplitter）" class="headerlink" title="拖动控件之间的边界（QSplitter）"></a>拖动控件之间的边界（QSplitter）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/Splitter.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 信号（Signal）与槽（Slot）</span></span><br><span class="line"><span class="comment">### 信号与槽基础</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/SignalSlotDemo.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="自定义信号实现对象之间的通信"><a href="#自定义信号实现对象之间的通信" class="headerlink" title="自定义信号实现对象之间的通信"></a>自定义信号实现对象之间的通信</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/CustomSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 可以传递多个参数的信号</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/CustomSignal.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="为类添加多个信号（重载形式的信号）"><a href="#为类添加多个信号（重载形式的信号）" class="headerlink" title="为类添加多个信号（重载形式的信号）"></a>为类添加多个信号（重载形式的信号）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/MultiSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 信号和槽的N对N连接与断开连接</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/NNSignal.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="为窗口添加新号"><a href="#为窗口添加新号" class="headerlink" title="为窗口添加新号"></a>为窗口添加新号</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/WinSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 多线程更新UI数据</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/ThreadUpdateUI.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="信号与槽自动连接"><a href="#信号与槽自动连接" class="headerlink" title="信号与槽自动连接"></a>信号与槽自动连接</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/AutoSignalSlot.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用Lambda表达式为槽传递参数</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/LambdaSlotArg.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="使用Partial对象为槽传递参数"><a href="#使用Partial对象为槽传递参数" class="headerlink" title="使用Partial对象为槽传递参数"></a>使用Partial对象为槽传递参数</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/PartialSlotArg.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">### Override（覆盖）槽函数</span></span><br><span class="line">**Presentation**</span><br><span class="line">&lt;center&gt;</span><br><span class="line"> &lt;img src = <span class="string">'./PyQt5-Python-实战课程（八）/OverrideSlot.png'</span> width=<span class="number">500</span>&gt;    </span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">- 要点说明</span><br><span class="line"></span><br><span class="line">- 完整代码</span><br><span class="line"></span><br><span class="line">```python</span><br></pre></td></tr></table></figure><h3 id="多窗口交互（1）：不使用信号和槽"><a href="#多窗口交互（1）：不使用信号和槽" class="headerlink" title="多窗口交互（1）：不使用信号和槽"></a>多窗口交互（1）：不使用信号和槽</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/MultiWindow1.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多窗口交互（2）：使用信号和槽"><a href="#多窗口交互（2）：使用信号和槽" class="headerlink" title="多窗口交互（2）：使用信号和槽"></a>多窗口交互（2）：使用信号和槽</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/MultiWindow2.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><pre><code class="python"></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>许是一观</title>
    <link href="http://yoursite.com/2019/01/30/%E8%AE%B8%E6%98%AF%E4%B8%80%E8%A7%82/"/>
    <id>http://yoursite.com/2019/01/30/许是一观/</id>
    <published>2019-01-30T13:36:18.000Z</published>
    <updated>2019-02-15T08:30:18.414Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="快意人生"><a href="#快意人生" class="headerlink" title="快意人生"></a>快意人生</h2><blockquote><p>开心自得便好，与他人何干</p></blockquote><ul><li>愿你出走半生，归来仍是少年</li><li>以梦为马，诗酒趁年华</li></ul><h2 id="古风"><a href="#古风" class="headerlink" title="古风"></a>古风</h2><blockquote><p>诗与远方真的存在，愿你相信</p></blockquote><ul><li>我走过的山路是徐霞客曾经留宿过的，我走过的关隘是六国曾经逡巡而不敢前的，我驻足远眺的城楼是于谦曾经坚定守卫过的，我现在能驰骋由疆的西北草原是霍去病曾经为之而奋战过的，我还能吃到苏轼当年手不停箸的红烧肉，我还能饮到太白当年举杯邀月的花间美酒，我还能在众多浩劫后读到前人的筋骨血肉，我还能在大喜大悲后脱口而出一句他们曾经用来形容自己的爱恨离愁。这片土地留给我们后人的礼物，应该就这么两件了吧，一件是历史，一件是文化，前者可鉴世，后者可润心。</li></ul><h2 id="孤狼"><a href="#孤狼" class="headerlink" title="孤狼"></a>孤狼</h2><blockquote><p>一个人才知道什么是自由，对吧</p></blockquote><ul><li>像我这种人就不适合谈恋爱，因为爱会唤醒我的占有欲、控制欲、疑心，也会勾引出我的狭隘、自私、敏感。而这每一种情绪，都足以令我和我爱的人痛苦。</li><li>我不想取悦别人，也不奢望会有人来哄我开心。我可以独自承受一切，我不需要任何人来陪伴。</li></ul><h2 id="毒鸡汤"><a href="#毒鸡汤" class="headerlink" title="毒鸡汤"></a>毒鸡汤</h2><blockquote><p>干了这碗，好好拼命</p></blockquote><ul><li>所有的不顺意，都是因为自己菜</li><li>钱真的可以为所欲为，请努力挣钱</li><li>弱，即是罪</li></ul><h2 id="心伤"><a href="#心伤" class="headerlink" title="心伤"></a>心伤</h2><blockquote><p>有情人终被情伤，何苦自陷于此</p></blockquote><ul><li>纵我心如红铁，难融你三尺冰寒</li></ul><h2 id="心动"><a href="#心动" class="headerlink" title="心动"></a>心动</h2><blockquote><p>愿有情人终成眷属，可我不想掺和</p></blockquote><ul><li>最是初见惊鸿，开在尘世繁艳</li></ul><h2 id="表白"><a href="#表白" class="headerlink" title="表白"></a>表白</h2><blockquote><p>假装一下 </p></blockquote><ul><li>我还是很喜欢你，像日月轮回交替，不理朝夕</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Macbook A1502 升级SSD</title>
    <link href="http://yoursite.com/2019/01/30/Macbook-A1502-%E5%8D%87%E7%BA%A7SSD/"/>
    <id>http://yoursite.com/2019/01/30/Macbook-A1502-升级SSD/</id>
    <published>2019-01-30T07:11:39.000Z</published>
    <updated>2019-02-16T16:16:19.870Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><p>参考:</p><ul><li><a href="https://www.crifan.com/macbook_pro_a1502_2015_early_13_inch_ssd_upgrade_volume/" target="_blank" rel="noopener">【整理】Macbook Pro A1502 2015 Early13寸硬盘升级扩容</a></li><li><a href="https://zhuanlan.zhihu.com/p/35806613" target="_blank" rel="noopener">2015款retina macbook pro自行升级SSD</a></li><li><a href="https://blog.csdn.net/hanhailong18/article/details/82345877" target="_blank" rel="noopener">Mac pro更换大内存固态硬盘实践教程</a></li></ul><h4 id="硬件选择"><a href="#硬件选择" class="headerlink" title="硬件选择"></a>硬件选择</h4><p>参考：<a href="https://zhuanlan.zhihu.com/p/35806613" target="_blank" rel="noopener">2015款retina macbook pro自行升级SSD</a></p><ol><li>SM951a  M.2接口  NVME规范  容量512G  价格1000左右<ul><li>马云家的“企业店铺”，购入的是五个字的企业卖家</li></ul></li><li>转接卡  <ul><li>某宝店铺”迪奥科技” 18元/卡</li></ul></li><li>合适的螺丝刀<ul><li>某宝店铺”迪奥科技” 1元/套 (一次性，可用)</li></ul></li></ol><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><h5 id="电脑备份"><a href="#电脑备份" class="headerlink" title="电脑备份"></a>电脑备份</h5><p>备份方式：Time Machine<br>注意事项：泪的教训… 一定在拆机前再次备份（!!!），以免备份资料有遗漏.否则，要重新换上旧的SSD，进行备份，保证数据的最新状态.</p><h5 id="U盘启动盘制作"><a href="#U盘启动盘制作" class="headerlink" title="U盘启动盘制作"></a>U盘启动盘制作</h5><p><a href="https://www.iplaysoft.com/macos-usb-install-drive.html" target="_blank" rel="noopener">制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)</a> </p><ol><li>在 App Store 下载 Mojave 安装器.<a href="https://support.apple.com/zh-cn/HT201475" target="_blank" rel="noopener">如何升级到macOS Mojave - Apple 支持</a></li><li><p>插入一个不小于8G的U盘，“应用程序 → 实用工具 → 磁盘工具 → Erase”:</p><ol><li>将 U盘命名为「MOJAVE」/ 「Mojave」名称</li><li>「Mac OS X 扩展（日志式）」格式</li><li>「GUID 分区图」方案</li></ol></li><li><p>打开terminal，输入以下命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MOJAVE /Applications/Install\ macOS\ Mojave.app --nointeraction</span><br></pre></td></tr></table></figure></li></ol><h5 id="通过-U-盘安装-macOS-Mojave"><a href="#通过-U-盘安装-macOS-Mojave" class="headerlink" title="通过 U 盘安装 macOS Mojave"></a>通过 U 盘安装 macOS Mojave</h5><ol><li>备份好 Mac 里所有的重要数据（TimeMachine）</li><li>插上制作好的安装U盘，如果系统能识别出来即可，这时我们先关机了</li><li>按下电源键开机，当听到“噹”的一声时，按住 Option 键不放，直到出现启动菜单选项</li><li>这时选择安装U盘 (黄色图标) 并回车，就可以开始安装了，在过程中你可以通过“磁盘工具”对 Mac 的磁盘式化或者重新分区等操作。</li><li>之后就是一步一步的安装直到完成了。</li></ol><h4 id="拆机步骤"><a href="#拆机步骤" class="headerlink" title="拆机步骤"></a>拆机步骤</h4><p>请参考：<a href="https://www.crifan.com/upgrade_mac_ssd_disk_volume_from_120gb_to_owc_pcie_480gb/" target="_blank" rel="noopener">详解笔记</a>、<a href="https://www.youtube.com/watch?v=engdHBU7fwY" target="_blank" rel="noopener">OWC 详解视频</a></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>再次强调：拆机前备份一次，避免上次备份之后修改了部分文件，造成未备份至最新状态</li><li>一定要注意先把电池电源接口<a href="https://mp.weixin.qq.com/s/OE0hyGBT48Y1iROL9F-TiQ" target="_blank" rel="noopener">断开</a>。带电进行的任何操作都有烧机的风险。 <ul><li>在做SSD硬盘拆换之前，一定要记得请先断开电池的接口，给主板断电。带电操作永远是错误的，万一烧机了就全完了，切记，切记！<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/断电图例.jpg" width="500"><br><img src="/2019/01/30/Macbook-A1502-升级SSD/断电示例.png" width="500"><br></center></li></ul></li><li>螺丝顺序不能乱（不同位置的螺丝是有差异的），不要用蛮力，不要滑丝(<code>说到此处，我的心，这个痛啊....</code>)<ul><li>如若遇到滑丝的情况，稍作尝试，拧不下来就stop，趁着螺丝没被彻底拧花，找专业人员处理（此时的情况收费不会很贵，10来块钱就搞定了  如若完全拧花了，收费可能会贵些）<ul><li>（仅针对西安的”同学”）：<ol><li>优先去“赛格电脑城”，附近有许多维修店，许是因为竞争关系，价格都很公道，态度也很和善（换个后盖螺丝，10元.  和那些“道貌岸然、趾高气昂”的苹果维修店相比，已经很合理了） </li><li>如若解决不了，就去所谓的“苹果售后维修点”（据观察推荐 阳明国际10楼9号 会好一些） 收费自然贵一些，还概不讲价（大写的“坑”） </li></ol></li></ul></li><li>倘若螺丝已经拧出来了一些，可以用钳子或尖嘴钳将断在里面的螺丝拧出，仅适用于下图情况.（请小心尝试）<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/可拔螺丝的情况.png" width="500"><br></center>  </li><li>自行处理的“可行”方法：<ol><li>用502将螺丝刀与螺丝粘在一起，等待502硬化以后，将其拧下（502填充刀头与螺丝口间缝隙，听似可行，但并不可行）</li><li>用电烙铁将焊锡滴在螺丝口，把螺丝刀插进螺丝口与其焊在一起（不敢尝试）</li><li>电钻暴力拆解，把螺丝打穿（目前已有<a href="https://post.smzdm.com/p/318674/" target="_blank" rel="noopener">成果案例</a>）<ul><li>一定是手枪钻，千万别错用成冲击钻<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/手枪钻使用说明.png" width="500"><br></center></li></ul></li></ol></li></ul></li></ul><h4 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h4><p><a href="https://www.crifan.com/after_mac_change_ssd_and_restore_system/" target="_blank" rel="noopener">【记录】Mac更换SSD硬盘后恢复系统</a></p><ul><li>用Mac OS的启动U盘全新安装完系统之后，记得要重置一下SMC 和 NVRAM （<code>若是用TimeMachine恢复的情况，可以略过此步骤</code>）<ul><li><a href="https://support.apple.com/zh-cn/HT201295" target="_blank" rel="noopener">如何重置 Mac 上的系统管理控制器 (SMC)</a></li><li><a href="https://support.apple.com/zh-cn/HT204063" target="_blank" rel="noopener">如何重置 Mac 上的 NVRAM</a></li></ul></li></ul><h4 id="双系统安装"><a href="#双系统安装" class="headerlink" title="双系统安装"></a>双系统安装</h4><ul><li>可能会因为转接卡的问题，双系统中的读写速度会受影响</li></ul><h4 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h4><ul><li>查看磁盘容量  <center><br>  <img src="/2019/01/30/Macbook-A1502-升级SSD/Storeage.png" width="500"><br>  </center></li><li>从系统信息中查看，SATA express/NVMExpress 信息（链接宽度是X4（正常））  <center><br>  <img src="/2019/01/30/Macbook-A1502-升级SSD/NVMExpress.png" width="500"><br>  </center></li><li>“Disk Speed Test”软件测试读写速度   <center><br>  <img src="/2019/01/30/Macbook-A1502-升级SSD/DiskSpeedTest.png" width="500"><br>  </center></li></ul><h4 id="后期的“坑”"><a href="#后期的“坑”" class="headerlink" title="后期的“坑”"></a>后期的“坑”</h4><h5 id="无法连接WiFi"><a href="#无法连接WiFi" class="headerlink" title="无法连接WiFi"></a>无法连接WiFi</h5><ul><li>原装硬盘接头是在金属壳子里面的，新的转接卡接头是悬空的而且没屏蔽，你可以试试<code>用两面绝缘的金属箔覆盖硬盘</code>来改善电磁干扰<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/屏蔽转接头电磁干扰.jpg" width="300"><br></center></li></ul><h5 id="Macbook-Pro-休眠后黑屏重启修复一例"><a href="#Macbook-Pro-休眠后黑屏重启修复一例" class="headerlink" title="Macbook Pro 休眠后黑屏重启修复一例"></a>Macbook Pro 休眠后黑屏重启修复一例</h5><ul><li>偶尔会出现“休眠后黑屏，无法唤醒，需强制重启”的情况，可能是无线网卡的问题。详情可参考<a href="https://zhuanlan.zhihu.com/p/51188437" target="_blank" rel="noopener">此处</a>，同时可了解<a href="https://www.jianshu.com/p/1bc730bd129c" target="_blank" rel="noopener">MacOS休眠机制</a>的知识。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="动手捣鼓" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%89%8B%E6%8D%A3%E9%BC%93/"/>
    
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（七）</title>
    <link href="http://yoursite.com/2019/01/28/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/28/PyQt5-Python-实战课程（七）/</id>
    <published>2019-01-28T08:29:18.000Z</published>
    <updated>2019-01-30T16:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="表格与树🌲"><a href="#表格与树🌲" class="headerlink" title="表格与树🌲"></a>表格与树🌲</h2><h3 id="显示二维表数据（QTableView控件）"><a href="#显示二维表数据（QTableView控件）" class="headerlink" title="显示二维表数据（QTableView控件）"></a>显示二维表数据（QTableView控件）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TableView.png" width="500"><br></center><br>- 要点说明<br>    - 需要创建QTableView实例和一个数据源（Model），然后将两者关联 <code>self.tableview.setModel(self.model)</code><br>    - <code>MVC：Model   Viewer   Controller</code>    MVC的目的是将后端的数据和前端页面的耦合度降低<br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableView</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg=None)</span>:</span></span><br><span class="line">        super(TableView, self).__init__(arg)</span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableView表格视图控件演示"</span>)</span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Model</span></span><br><span class="line">        self.model = QStandardItemModel(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">        self.model.setHorizontalHeaderLabels([<span class="string">'id'</span>, <span class="string">'姓名'</span>, <span class="string">'年龄'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># QTableView控件</span></span><br><span class="line">        self.tableview = QTableView()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关联QTableView控件和Model</span></span><br><span class="line">        self.tableview.setModel(self.model)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        item11 = QStandardItem(<span class="string">'10'</span>)</span><br><span class="line">        item12 = QStandardItem(<span class="string">'雷神'</span>)</span><br><span class="line">        item13 = QStandardItem(<span class="string">'2000'</span>)</span><br><span class="line">        self.model.setItem(<span class="number">0</span>, <span class="number">0</span>, item11)</span><br><span class="line">        self.model.setItem(<span class="number">0</span>, <span class="number">1</span>, item12)</span><br><span class="line">        self.model.setItem(<span class="number">0</span>, <span class="number">2</span>, item13)</span><br><span class="line"></span><br><span class="line">        item31 = QStandardItem(<span class="string">'30'</span>)</span><br><span class="line">        item32 = QStandardItem(<span class="string">'死亡女神'</span>)</span><br><span class="line">        item33 = QStandardItem(<span class="string">'3000'</span>)</span><br><span class="line">        self.model.setItem(<span class="number">2</span>, <span class="number">0</span>, item31)</span><br><span class="line">        self.model.setItem(<span class="number">2</span>, <span class="number">1</span>, item32)</span><br><span class="line">        self.model.setItem(<span class="number">2</span>, <span class="number">2</span>, item33)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(self.tableview)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    table = TableView()</span><br><span class="line">    table.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 显示列数据（QListView控件）<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ListView.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QVBoxLayout, QListView, QMessageBox</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QStringListModel</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListViewDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(ListViewDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"QListView 例子"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>, <span class="number">270</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Model</span></span><br><span class="line">        listModel = QStringListModel()</span><br><span class="line">        self.list = [<span class="string">"列表项1"</span>,<span class="string">"列表项2"</span>, <span class="string">"列表项3"</span>]</span><br><span class="line">        listModel.setStringList(self.list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># QListView控件</span></span><br><span class="line">        listview = QListView()</span><br><span class="line">        listview.setModel(listModel)</span><br><span class="line">        listview.clicked.connect(self.clicked)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(listview)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clicked</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        QMessageBox.information(self,<span class="string">"QListView"</span>,<span class="string">"您选择了："</span> + self.list[item.row()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = ListViewDemo()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="扩展的列表控件（QListWidget）"><a href="#扩展的列表控件（QListWidget）" class="headerlink" title="扩展的列表控件（QListWidget）"></a>扩展的列表控件（QListWidget）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ListWidget.png" width="500"><br></center><br>- 要点说明<br>    - 不通过model，直接在控件中添加数据 <code>class QListWidget(QListView)</code><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListWidgetDemo</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">super(ListWidgetDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">self.setWindowTitle(<span class="string">"QListWidget 例子"</span>)</span><br><span class="line">self.resize(<span class="number">300</span>, <span class="number">270</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># QListWidget控件</span></span><br><span class="line">self.listwidget = QListWidget()</span><br><span class="line">self.listwidget.addItem(<span class="string">"item1"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item2"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item3"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item4"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item5"</span>)</span><br><span class="line">self.listwidget.itemClicked.connect(self.clicked)</span><br><span class="line"></span><br><span class="line">self.setCentralWidget(self.listwidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clicked</span><span class="params">(self,Index)</span>:</span></span><br><span class="line">QMessageBox.information(self,<span class="string">"QListWidget"</span>,<span class="string">"您选择了："</span> + self.listwidget.item(self.listwidget.row(Index)).text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">win = ListWidgetDemo()</span><br><span class="line">win.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 扩展的表格控件（QTableWidget）<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TableWidget.png" width="500"><br></center><br>- 要点说明：每一个Cell（单元格）是一个QTableWidgetItem<br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem, QAbstractItemView)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableWidgetDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(TableWidgetDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableWidget演示"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        tablewidget = QTableWidget()</span><br><span class="line">        tablewidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tablewidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(tablewidget)</span><br><span class="line"></span><br><span class="line">        tablewidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'籍贯'</span>])</span><br><span class="line">        nameItem = QTableWidgetItem(<span class="string">"小明"</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>,<span class="number">0</span>,nameItem)</span><br><span class="line"></span><br><span class="line">        ageItem = QTableWidgetItem(<span class="string">"24"</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>,<span class="number">1</span>,ageItem)</span><br><span class="line"></span><br><span class="line">        jgItem = QTableWidgetItem(<span class="string">"北京"</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>,<span class="number">2</span>,jgItem)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 禁止编辑</span></span><br><span class="line">        tablewidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 整行选择</span></span><br><span class="line">        tablewidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line">        <span class="comment"># 调整列和行</span></span><br><span class="line">        tablewidget.resizeColumnsToContents()</span><br><span class="line">        tablewidget.resizeRowsToContents()</span><br><span class="line"></span><br><span class="line">        tablewidget.horizontalHeader().setVisible(<span class="keyword">False</span>)</span><br><span class="line">     <span class="comment">#   tablewidget.verticalHeader().setVisible(False)</span></span><br><span class="line"></span><br><span class="line">        tablewidget.setVerticalHeaderLabels([<span class="string">"a"</span>,<span class="string">"b"</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 隐藏表格线</span></span><br><span class="line">        tablewidget.setShowGrid(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = TableWidgetDemo()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在单元格中放置控件<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/PlaceControlInCell.png" width="500"><br></center><br>- 要点说明<br>    - setItem：将文本放到单元格中<br>    - setCellWidget：将控件放到单元格中<br>    - setStyleSheet：设置控件的样式（QSS）<br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem, QAbstractItemView,</span><br><span class="line">                              QComboBox, QPushButton)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlaceControlInCell</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PlaceControlInCell,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"在单元格中放置控件"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>,<span class="string">'性别'</span>,<span class="string">'体重（kg）'</span>])</span><br><span class="line">        textItem = QTableWidgetItem(<span class="string">'小明'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,textItem)</span><br><span class="line"></span><br><span class="line">        combox = QComboBox()</span><br><span class="line">        combox.addItem(<span class="string">'男'</span>)</span><br><span class="line">        combox.addItem(<span class="string">'女'</span>)</span><br><span class="line">        <span class="comment"># QSS Qt StyleSheet</span></span><br><span class="line">        combox.setStyleSheet(<span class="string">'QComboBox&#123;margin:3px&#125;;'</span>)</span><br><span class="line">        tableWidget.setCellWidget(<span class="number">0</span>,<span class="number">1</span>,combox)</span><br><span class="line"></span><br><span class="line">        modifyButton = QPushButton(<span class="string">'修改'</span>)</span><br><span class="line">        modifyButton.setDown(<span class="keyword">True</span>)</span><br><span class="line">        modifyButton.setStyleSheet(<span class="string">'QPushButton&#123;margin:3px&#125;;'</span>)</span><br><span class="line">        tableWidget.setCellWidget(<span class="number">0</span>,<span class="number">2</span>,modifyButton)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = PlaceControlInCell()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在表格中搜索Cell和行定位<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/DataLocation.png" width="500"><br></center><br>- 要点说明<br>    1. 数据的定位：<code>findItems</code>  返回一个列表<br>    2. 如果找到了满足条件的单元格，会定位到单元格所在的行：<code>setSliderPosition(row)</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QColor, QBrush</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataLocation</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DataLocation,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableWidget 例子"</span>)</span><br><span class="line">        self.resize(<span class="number">600</span>, <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">40</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                itemContent = <span class="string">'(%d,%d)'</span> %(i,j)</span><br><span class="line">                tableWidget.setItem(i,j,QTableWidgetItem(itemContent))</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 搜索满足条件的Cell</span></span><br><span class="line">        text = <span class="string">'(1'</span></span><br><span class="line">        items = tableWidget.findItems(text,QtCore.Qt.MatchStartsWith)</span><br><span class="line">        <span class="keyword">if</span> len(items) &gt; <span class="number">0</span>:</span><br><span class="line">            item = items[<span class="number">0</span>]</span><br><span class="line">            item.setBackground(QBrush(QColor(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)))</span><br><span class="line">            item.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">            row = item.row()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定位到指定的行</span></span><br><span class="line">            tableWidget.verticalScrollBar().setSliderPosition(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = DataLocation()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置单元格字体和颜色<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellFontAndColor.png" width="500"><br></center><br>- 要点片段代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">14</span>,QFont.Black))</span><br><span class="line">newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line">tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br></pre></td></tr></table></figure><br><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QBrush, QColor, QFont</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellFontAndColor</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellFontAndColor,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"设置单元格字体和颜色"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">14</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'女'</span>)</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)))</span><br><span class="line">        newItem.setBackground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">20</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellFontAndColor()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 按表格的某一列排序<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ColumnSort.png" width="500"><br></center><br>- 要点说明: <code>sortItems(columnIndex，orderType）</code><br>  1. 按哪一列排序<br>  2. 排序类型：升序或降序<br><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.orderType == Qt.DescendingOrder:</span><br><span class="line">        self.orderType = Qt.AscendingOrder</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.orderType = Qt.DescendingOrder</span><br><span class="line"></span><br><span class="line">    self.tableWidget.sortItems(<span class="number">2</span>,self.orderType)</span><br></pre></td></tr></table></figure><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColumnSort</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ColumnSort,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"按列排序"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.tableWidget = QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        self.tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(self.tableWidget)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'张三'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem=QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem=QTableWidgetItem(<span class="string">'165'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'李四'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'女'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'王五'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'170'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(<span class="string">'排序'</span>)</span><br><span class="line">        self.button.clicked.connect(self.order)</span><br><span class="line">        layout.addWidget(self.button)</span><br><span class="line"></span><br><span class="line">        self.orderType = Qt.DescendingOrder</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.orderType == Qt.DescendingOrder:</span><br><span class="line">            self.orderType = Qt.AscendingOrder</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.orderType = Qt.DescendingOrder</span><br><span class="line"></span><br><span class="line">        self.tableWidget.sortItems(<span class="number">2</span>,self.orderType)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = ColumnSort()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置单元格的文本对齐方式<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellTextAlignment.png" width="500"><br></center><br>- 要点片段<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newItem.setTextAlignment(Qt.AlignRight | Qt.AlignBottom)</span><br><span class="line">newItem.setTextAlignment(Qt.AlignCenter | Qt.AlignBottom)</span><br><span class="line">newItem.setTextAlignment(Qt.AlignRight)</span><br></pre></td></tr></table></figure><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellTextAlignment</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellTextAlignment,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"设置单元格的文本对齐方式"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        newItem.setTextAlignment(Qt.AlignRight | Qt.AlignBottom)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        newItem.setTextAlignment(Qt.AlignCenter | Qt.AlignBottom)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'190'</span>)</span><br><span class="line">        newItem.setTextAlignment(Qt.AlignRight)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellTextAlignment()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 合并单元格<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/Span.png" width="500"><br></center><br>- 要点说明: <code>setSpan(row,col,要合并的行数，要合并的列数）</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Span</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Span,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"合并单元格"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line">        tableWidget.setSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line">        tableWidget.setSpan(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line">        tableWidget.setSpan(<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = Span()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置单元格的尺寸<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellSize.png" width="500"><br></center><br>- 要点说明<br>    - 设置行高<code>tableWidget.setRowHeight(0, 80)</code><br>    - 设置列宽<code>tableWidget.setColumnWidth(2, 120)</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QBrush, QColor, QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellSize</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellSize,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableWidget之设置单元格尺寸"</span>)</span><br><span class="line">        self.resize(<span class="number">530</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line">        tableWidget.setRowHeight(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">        tableWidget.setColumnWidth(<span class="number">2</span>, <span class="number">120</span>)</span><br><span class="line">        tableWidget.setRowHeight(<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">40</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'女'</span>)</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)))</span><br><span class="line">        newItem.setBackground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">60</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellSize()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在单元格中实现图文混排的效果<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellImageText.png" width="500"><br></center><br>- 要点代码:<code>newItem = QTableWidgetItem(QIcon(&#39;./images/bao1.png&#39;),&#39;背包&#39;)</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellImageText</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellImageText,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"在单元格中实现图文混排的效果"</span>)</span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.tableWidget = QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(<span class="number">5</span>)</span><br><span class="line">        self.tableWidget.setColumnCount(<span class="number">4</span>)</span><br><span class="line">        layout.addWidget(self.tableWidget)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重'</span>, <span class="string">'显示图片'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'李宁'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(QIcon(<span class="string">'./images/bao1.png'</span>),<span class="string">'背包'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">3</span>,newItem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellImageText()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 改变单元格中图片的尺寸<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellImageSize.png" width="500"><br></center><br>- 要点说明: <code>setIconSize(QSize(width,height))</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellImageSize</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellImageSize,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"改变单元格中图片的尺寸"</span>)</span><br><span class="line">        self.resize(<span class="number">1000</span>, <span class="number">900</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        tablewidget = QTableWidget()</span><br><span class="line">        tablewidget.setIconSize(QSize(<span class="number">300</span>,<span class="number">200</span>))</span><br><span class="line">        tablewidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        tablewidget.setRowCount(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tablewidget.setHorizontalHeaderLabels([<span class="string">'图片1'</span>, <span class="string">'图片2'</span>, <span class="string">'图片3'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让列的宽度和图片的宽度相同</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            tablewidget.setColumnWidth(i,<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让行的高度和图片的高度相同</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">            tablewidget.setRowHeight(i,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">            i = k / <span class="number">3</span>   <span class="comment"># 行</span></span><br><span class="line">            j = k % <span class="number">3</span>   <span class="comment"># 列</span></span><br><span class="line">            item = QTableWidgetItem()</span><br><span class="line"></span><br><span class="line">            item.setIcon(QIcon(<span class="string">'./images/bao%d.png'</span> % k))</span><br><span class="line">            tablewidget.setItem(i,j,item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        layout.addWidget(tablewidget)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellImageSize()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在表格中显示上下文菜单<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TableWidgetContextMenu.png" width="500"><br></center><br>- 要点说明<br>    1. 如何弹出菜单<br><br>        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line">self.tableWidget.customContextMenuRequested.connect(self.generateMenu)</span><br></pre></td></tr></table></figure><br><br>    3. 如果在满足条件的情况下弹出菜单：槽方法被触发后，<code>QMenu()</code><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QMenu, QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem,QHeaderView)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableWidgetContextMenu</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(TableWidgetContextMenu,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"在表格中显示上下文菜单"</span>)</span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.tableWidget = QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(<span class="number">5</span>)</span><br><span class="line">        self.tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(self.tableWidget)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"张三"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"男"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"160"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>, <span class="number">2</span>, newItem)</span><br><span class="line">        <span class="comment"># 表格中第二行记录</span></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"李四"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"女"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"170"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 表格中第二行记录</span></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"李"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"女"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"170"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.customContextMenuRequested.connect(self.generateMenu)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMenu</span><span class="params">(self,pos)</span>:</span></span><br><span class="line">        print(pos)  <span class="comment"># 相对于窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.tableWidget.selectionModel().selection().indexes():</span><br><span class="line">            rowNum = i.row()</span><br><span class="line">        <span class="comment"># 如果选择的行索引小于2，弹出上下文菜单</span></span><br><span class="line">        <span class="keyword">if</span> rowNum &lt; <span class="number">2</span>:</span><br><span class="line">            menu = QMenu()</span><br><span class="line">            item1 = menu.addAction(<span class="string">"菜单项1"</span>)</span><br><span class="line">            item2 = menu.addAction(<span class="string">"菜单项2"</span>)</span><br><span class="line">            item3 = menu.addAction(<span class="string">"菜单项3"</span>)</span><br><span class="line">            screenPos = self.tableWidget.mapToGlobal(pos)</span><br><span class="line">            print(screenPos) <span class="comment"># 相对于屏幕</span></span><br><span class="line">            <span class="comment"># 被阻塞</span></span><br><span class="line">            action = menu.exec(screenPos)</span><br><span class="line">            <span class="keyword">if</span> action == item1:</span><br><span class="line">                print(<span class="string">'选择了第1个菜单项'</span>,self.tableWidget.item(rowNum,<span class="number">0</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum,<span class="number">1</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum, <span class="number">2</span>).text())</span><br><span class="line">            <span class="keyword">elif</span> action == item2:</span><br><span class="line">                print(<span class="string">'选择了第2个菜单项'</span>,self.tableWidget.item(rowNum,<span class="number">0</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum,<span class="number">1</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum, <span class="number">2</span>).text())</span><br><span class="line">            <span class="keyword">elif</span> action == item3:</span><br><span class="line">                print(<span class="string">'选择了第3个菜单项'</span>,self.tableWidget.item(rowNum,<span class="number">0</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum,<span class="number">1</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum, <span class="number">2</span>).text())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = TableWidgetContextMenu()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 树🌲控件（QTreeWidget）的基本用法<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/BasicTreeWidget.png" width="500"><br></center><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTreeWidget</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(BasicTreeWidget, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'树控件（QTreeWidget）的基本用法'</span>)</span><br><span class="line"></span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line">        <span class="comment"># 为树控件指定列数</span></span><br><span class="line">        self.tree.setColumnCount(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 指定列标签</span></span><br><span class="line">        self.tree.setHeaderLabels([<span class="string">'Key'</span>,<span class="string">'Value'</span>])</span><br><span class="line"></span><br><span class="line">        root = QTreeWidgetItem(self.tree)</span><br><span class="line">        root.setText(<span class="number">0</span>,<span class="string">'根节点'</span>)</span><br><span class="line">        root.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/root.png'</span>))</span><br><span class="line">        self.tree.setColumnWidth(<span class="number">0</span>,<span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加子节点1</span></span><br><span class="line">        child1 = QTreeWidgetItem(root)</span><br><span class="line">        child1.setText(<span class="number">0</span>,<span class="string">'子节点1'</span>)</span><br><span class="line">        child1.setText(<span class="number">1</span>,<span class="string">'子节点1的数据'</span>)</span><br><span class="line">        child1.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/bao3.png'</span>))</span><br><span class="line">        child1.setCheckState(<span class="number">0</span>,Qt.Checked)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加子节点2</span></span><br><span class="line">        child2 = QTreeWidgetItem(root)</span><br><span class="line">        child2.setText(<span class="number">0</span>,<span class="string">'子节点2'</span>)</span><br><span class="line">        child2.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/bao6.png'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为child2添加一个子节点</span></span><br><span class="line">        child3 = QTreeWidgetItem(child2)</span><br><span class="line">        child3.setText(<span class="number">0</span>,<span class="string">'子节点2-1'</span>)</span><br><span class="line">        child3.setText(<span class="number">1</span>,<span class="string">'新的值'</span>)</span><br><span class="line">        child3.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/music.png'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.tree.expandAll() <span class="comment"># 显示方式：expand</span></span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.tree)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    tree = BasicTreeWidget()</span><br><span class="line">    tree.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 为树🌲节点添加响应事件<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TreeEvent.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeEvent</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(TreeEvent, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'为树节点添加响应事件'</span>)</span><br><span class="line"></span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line"></span><br><span class="line">        self.tree.setColumnCount(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.tree.setHeaderLabels([<span class="string">'Key'</span>,<span class="string">'Value'</span>])</span><br><span class="line"></span><br><span class="line">        root  = QTreeWidgetItem(self.tree)</span><br><span class="line">        root.setText(<span class="number">0</span>,<span class="string">'root'</span>)</span><br><span class="line">        root.setText(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">        child1 = QTreeWidgetItem(root)</span><br><span class="line">        child1.setText(<span class="number">0</span>,<span class="string">'child1'</span>)</span><br><span class="line">        child1.setText(<span class="number">1</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">        child2 = QTreeWidgetItem(root)</span><br><span class="line">        child2.setText(<span class="number">0</span>,<span class="string">'child2'</span>)</span><br><span class="line">        child2.setText(<span class="number">1</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">        child3 = QTreeWidgetItem(child2)</span><br><span class="line">        child3.setText(<span class="number">0</span>,<span class="string">'child3'</span>)</span><br><span class="line">        child3.setText(<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">        self.tree.clicked.connect(self.onTreeClicked)</span><br><span class="line">        self.setCentralWidget(self.tree)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTreeClicked</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        print(index.row())</span><br><span class="line">        print(<span class="string">'key=%s,value=%s'</span> % (item.text(<span class="number">0</span>),item.text(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    tree = TreeEvent()</span><br><span class="line">    tree.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="增加、修改和删除树🌲控件中的节点"><a href="#增加、修改和删除树🌲控件中的节点" class="headerlink" title="增加、修改和删除树🌲控件中的节点"></a>增加、修改和删除树🌲控件中的节点</h3><p><strong>Presentation</strong></p><p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ModifyTree.png" width="500"><br></center></p><ul><li>要点片段</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNode</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'添加节点'</span>)</span><br><span class="line">    item = self.tree.currentItem()</span><br><span class="line">    print(item)</span><br><span class="line">    node = QTreeWidgetItem(item)</span><br><span class="line">    node.setText(<span class="number">0</span>,<span class="string">'新节点'</span>)</span><br><span class="line">    node.setText(<span class="number">1</span>,<span class="string">'新值'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateNode</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'修改节点'</span>)</span><br><span class="line">    item = self.tree.currentItem()</span><br><span class="line">    item.setText(<span class="number">0</span>,<span class="string">'修改节点'</span>)</span><br><span class="line">    item.setText(<span class="number">1</span>, <span class="string">'值已经被修改'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'删除节点'</span>)</span><br><span class="line">    item = self.tree.currentItem()</span><br><span class="line">    root = self.tree.invisibleRootItem()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self.tree.selectedItems():</span><br><span class="line">        (item.parent() <span class="keyword">or</span> root).removeChild(item)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifyTree</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(ModifyTree, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'TreeWidget 例子'</span>)</span><br><span class="line"></span><br><span class="line">        operatorLayout = QHBoxLayout()</span><br><span class="line">        addBtn = QPushButton(<span class="string">'添加节点'</span>)</span><br><span class="line">        updateBtn = QPushButton(<span class="string">'修改节点'</span>)</span><br><span class="line">        deleteBtn = QPushButton(<span class="string">'删除节点'</span>)</span><br><span class="line"></span><br><span class="line">        operatorLayout.addWidget(addBtn)</span><br><span class="line">        operatorLayout.addWidget(updateBtn)</span><br><span class="line">        operatorLayout.addWidget(deleteBtn)</span><br><span class="line"></span><br><span class="line">        addBtn.clicked.connect(self.addNode)</span><br><span class="line">        updateBtn.clicked.connect(self.updateNode)</span><br><span class="line">        deleteBtn.clicked.connect(self.deleteNode)</span><br><span class="line"></span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line">        self.tree.setColumnCount(<span class="number">2</span>)</span><br><span class="line">        self.tree.setHeaderLabels([<span class="string">'Key'</span>,<span class="string">'Value'</span>])</span><br><span class="line"></span><br><span class="line">        root  = QTreeWidgetItem(self.tree)</span><br><span class="line">        root.setText(<span class="number">0</span>,<span class="string">'root'</span>)</span><br><span class="line">        root.setText(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">        child1 = QTreeWidgetItem(root)</span><br><span class="line">        child1.setText(<span class="number">0</span>,<span class="string">'child1'</span>)</span><br><span class="line">        child1.setText(<span class="number">1</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">        child2 = QTreeWidgetItem(root)</span><br><span class="line">        child2.setText(<span class="number">0</span>,<span class="string">'child2'</span>)</span><br><span class="line">        child2.setText(<span class="number">1</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">        child3 = QTreeWidgetItem(child2)</span><br><span class="line">        child3.setText(<span class="number">0</span>,<span class="string">'child3'</span>)</span><br><span class="line">        child3.setText(<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line">        self.tree.clicked.connect(self.onTreeClicked)</span><br><span class="line"></span><br><span class="line">        mainLayout = QVBoxLayout(self)</span><br><span class="line">        mainLayout.addLayout(operatorLayout)</span><br><span class="line">        mainLayout.addWidget(self.tree)</span><br><span class="line">        self.setLayout(mainLayout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTreeClicked</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        print(index.row())</span><br><span class="line">        print(<span class="string">'key=%s,value=%s'</span> % (item.text(<span class="number">0</span>),item.text(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'添加节点'</span>)</span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        print(item)</span><br><span class="line">        node = QTreeWidgetItem(item)</span><br><span class="line">        node.setText(<span class="number">0</span>,<span class="string">'新节点'</span>)</span><br><span class="line">        node.setText(<span class="number">1</span>,<span class="string">'新值'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateNode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'修改节点'</span>)</span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        item.setText(<span class="number">0</span>,<span class="string">'修改节点'</span>)</span><br><span class="line">        item.setText(<span class="number">1</span>, <span class="string">'值已经被修改'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'删除节点'</span>)</span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        root = self.tree.invisibleRootItem()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.tree.selectedItems():</span><br><span class="line">            (item.parent() <span class="keyword">or</span> root).removeChild(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    tree = ModifyTree()</span><br><span class="line">    tree.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QTreeView控件与系统定制模式"><a href="#QTreeView控件与系统定制模式" class="headerlink" title="QTreeView控件与系统定制模式"></a>QTreeView控件与系统定制模式</h3><p><strong>Presentation</strong></p><p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TreeView.png" width="500"><br></center></p><ul><li><code>QTreeView</code>与<code>QTreeWidget</code>的区别在于load数据的方式不同，QTreeView使用<code>Model</code>方式（常见的有<code>QDirModel()</code>）</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    model = QDirModel()</span><br><span class="line">    tree = QTreeView()</span><br><span class="line">    tree.setModel(model)</span><br><span class="line"></span><br><span class="line">    tree.setWindowTitle(<span class="string">'QTreeView'</span>)</span><br><span class="line">    tree.resize(<span class="number">600</span>,<span class="number">400</span>)</span><br><span class="line">    tree.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>医疗影像文件读取方法</title>
    <link href="http://yoursite.com/2019/01/27/%E5%8C%BB%E7%96%97%E5%BD%B1%E5%83%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/27/医疗影像文件读取方法/</id>
    <published>2019-01-27T13:52:52.000Z</published>
    <updated>2019-01-30T07:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="DCM"><a href="#DCM" class="headerlink" title="DCM"></a>DCM</h2><h3 id="SimpleITK读取并显示dcm文件"><a href="#SimpleITK读取并显示dcm文件" class="headerlink" title="SimpleITK读取并显示dcm文件"></a>SimpleITK读取并显示dcm文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/医疗影像文件读取方法/SimpleITK_dcm.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SimpleITK <span class="keyword">as</span> sitk</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">image = sitk.ReadImage(<span class="string">r"/Users/Captain/Desktop/A_dcm/729427_20181010_CT_5_249_011.dcm"</span>) <span class="comment"># type(image) &lt;class 'SimpleITK.SimpleITK.Image'&gt;</span></span><br><span class="line">image_array = np.squeeze(sitk.GetArrayFromImage(image))  <span class="comment"># type(image_array) -&gt;&gt; &lt;class 'numpy.ndarray'&gt;  image_array.shape -&gt;&gt; (512, 512)</span></span><br><span class="line">plt.imshow(image_array)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="PyQt5-DcmViewer"><a href="#PyQt5-DcmViewer" class="headerlink" title="PyQt5_DcmViewer"></a>PyQt5_DcmViewer</h4><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/医疗影像文件读取方法/DcmViewer_demo.png" width="500"><br></center><ul><li><code>os.walk</code> 、<code>SimpleITK</code>、<code>FigureCanvas</code></li><li>参考链接: <a href="https://blog.csdn.net/lsq2902101015/article/details/51305825" target="_blank" rel="noopener">Python获取指定文件夹下的文件名</a>、<a href="https://pythonspot.com/pyqt5-matplotlib/" target="_blank" rel="noopener">PyQt5 Matplotlib</a></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> matplotlib.backends.backend_qt5agg <span class="keyword">import</span> FigureCanvasQTAgg <span class="keyword">as</span> FigureCanvas</span><br><span class="line"><span class="keyword">from</span> matplotlib.figure <span class="keyword">import</span> Figure</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> SimpleITK <span class="keyword">as</span> sitk</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> qdarkstyle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dcmViewer</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"DcmViewer"</span>)</span><br><span class="line">        <span class="comment"># dcm_dir = '/Users/shukai/Downloads/729427/A'</span></span><br><span class="line">        dcm_dir1 = <span class="string">'/Users/Captain/Desktop/A_dcm/'</span></span><br><span class="line">        dcm_dir2 = <span class="string">'/Users/Captain/Desktop/A_dcm/'</span></span><br><span class="line">        dcm_dir3 = <span class="string">'/Users/Captain/Desktop/A_dcm/'</span></span><br><span class="line"></span><br><span class="line">        self.dcm_list1 = self.loadFiles(dcm_dir1)</span><br><span class="line">        self.dcm_list2 = self.loadFiles(dcm_dir2)</span><br><span class="line">        self.dcm_list3 = self.loadFiles(dcm_dir3)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout1 = QHBoxLayout()</span><br><span class="line">        self.plotCanvas1 = PlotCanvas(self,width=<span class="number">5</span>, height=<span class="number">4</span>)</span><br><span class="line">        self.plotCanvas2 = PlotCanvas(self,width=<span class="number">5</span>, height=<span class="number">4</span>)</span><br><span class="line">        self.plotCanvas3 = PlotCanvas(self,width=<span class="number">5</span>, height=<span class="number">4</span>)</span><br><span class="line">        layout1.addWidget(self.plotCanvas1)</span><br><span class="line">        layout1.addWidget(self.plotCanvas2)</span><br><span class="line">        layout1.addWidget(self.plotCanvas3)</span><br><span class="line">        layout.addLayout(layout1)</span><br><span class="line"></span><br><span class="line">        layout2 = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.scrollbar1 = QScrollBar(Qt.Horizontal)</span><br><span class="line">        self.scrollbar1.setMaximum(len(self.dcm_list1))</span><br><span class="line">        self.scrollbar1.sliderMoved.connect(<span class="keyword">lambda</span>:self.sliderMoved(<span class="string">"scrollbar1"</span>))</span><br><span class="line">        layout2.addWidget(self.scrollbar1)</span><br><span class="line"></span><br><span class="line">        self.scrollbar2 = QScrollBar(Qt.Horizontal)</span><br><span class="line">        self.scrollbar2.setMaximum(len(self.dcm_list2))</span><br><span class="line">        self.scrollbar2.sliderMoved.connect(<span class="keyword">lambda</span>:self.sliderMoved(<span class="string">"scrollbar2"</span>))</span><br><span class="line">        layout2.addWidget(self.scrollbar2)</span><br><span class="line"></span><br><span class="line">        self.scrollbar3 = QScrollBar(Qt.Horizontal)</span><br><span class="line">        self.scrollbar3.setMaximum(len(self.dcm_list3))</span><br><span class="line">        self.scrollbar3.sliderMoved.connect(<span class="keyword">lambda</span>:self.sliderMoved(<span class="string">"scrollbar3"</span>))</span><br><span class="line">        layout2.addWidget(self.scrollbar3)</span><br><span class="line">        </span><br><span class="line">        layout.addLayout(layout2)</span><br><span class="line">        </span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sliderMoved</span><span class="params">(self,scrollbarName)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> scrollbarName == <span class="string">'scrollbar1'</span>:</span><br><span class="line">            dcm_list = self.dcm_list1</span><br><span class="line">        <span class="keyword">elif</span> scrollbarName == <span class="string">'scrollbar2'</span>:</span><br><span class="line">            dcm_list = self.dcm_list2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">             dcm_list = self.dcm_list3</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'当前值：%s'</span> % self.sender().value())</span><br><span class="line">        print(dcm_list[self.sender().value()<span class="number">-1</span>])</span><br><span class="line">        dcmFile = dcm_list[self.sender().value()<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> scrollbarName == <span class="string">'scrollbar1'</span>:</span><br><span class="line">            self.plotCanvas1.plot(dcmFile)</span><br><span class="line">        <span class="keyword">elif</span> scrollbarName == <span class="string">'scrollbar2'</span>:</span><br><span class="line">            self.plotCanvas2.plot(dcmFile)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.plotCanvas3.plot(dcmFile)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadFiles</span><span class="params">(self,file_dir)</span>:</span></span><br><span class="line">        dcmlist=[] </span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> os.path.splitext(file)[<span class="number">1</span>] == <span class="string">'.dcm'</span>:</span><br><span class="line">                    dcmlist.append(os.path.join(root, file))</span><br><span class="line">        dcmlist.sort()</span><br><span class="line">        <span class="keyword">return</span> dcmlist</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlotCanvas</span><span class="params">(FigureCanvas)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,parent=None, width=<span class="number">5</span>, height=<span class="number">4</span>, dpi=<span class="number">100</span>)</span>:</span></span><br><span class="line">        self.fig = Figure(figsize=(width, height), dpi=dpi)</span><br><span class="line">        self.fig.set_facecolor(<span class="string">'black'</span>)</span><br><span class="line">        FigureCanvas.__init__(self, self.fig)</span><br><span class="line">        FigureCanvas.setSizePolicy(self,QSizePolicy.Expanding,QSizePolicy.Expanding)</span><br><span class="line">        FigureCanvas.updateGeometry(self)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot</span><span class="params">(self,dcmFile)</span>:</span></span><br><span class="line">        self.fig.clear()</span><br><span class="line">        image = sitk.ReadImage(dcmFile)</span><br><span class="line">        image_array = np.squeeze(sitk.GetArrayFromImage(image))</span><br><span class="line">        ax = self.figure.add_subplot(<span class="number">111</span>)</span><br><span class="line">        ax.imshow(image_array,cmap=<span class="string">'gray'</span>)</span><br><span class="line">        ax.axis(<span class="string">'off'</span>)</span><br><span class="line">        self.draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    example = dcmViewer()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="医疗图像" scheme="http://yoursite.com/categories/%E5%8C%BB%E7%96%97%E5%9B%BE%E5%83%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（六）</title>
    <link href="http://yoursite.com/2019/01/27/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/27/PyQt5-Python-实战课程（六）/</id>
    <published>2019-01-27T07:55:37.000Z</published>
    <updated>2019-02-15T15:33:52.897Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="拖拽与剪贴板"><a href="#拖拽与剪贴板" class="headerlink" title="拖拽与剪贴板"></a>拖拽与剪贴板</h2><h3 id="让控件支持拖拽动作"><a href="#让控件支持拖拽动作" class="headerlink" title="让控件支持拖拽动作"></a>让控件支持拖拽动作</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/DrapDrop.png" width="500"><br></center><ul><li>要点说明</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.setDragEnabled(<span class="keyword">True</span>)</span><br><span class="line">B.setAcceptDrops(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">B需要两个事件</span><br><span class="line"><span class="number">1.</span> dragEnterEvent   <span class="comment">#将A拖到B触发</span></span><br><span class="line"><span class="number">2.</span> dropEvent        <span class="comment">#在B的区域放下A时触发</span></span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComboBox</span><span class="params">(QComboBox)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyComboBox,self).__init__()</span><br><span class="line">        self.setAcceptDrops(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dragEnterEvent</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        print(e)</span><br><span class="line">        <span class="keyword">if</span> e.mimeData().hasText():</span><br><span class="line">            e.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            e.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dropEvent</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        self.addItem(e.mimeData().text())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrapDropDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrapDropDemo,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'拖拽案例'</span>)</span><br><span class="line"></span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line">        formLayout.addRow(QLabel(<span class="string">"请将左边的文本拖拽到右边的下拉列表中"</span>))</span><br><span class="line">        lineEdit = QLineEdit()</span><br><span class="line">        lineEdit.setDragEnabled(<span class="keyword">True</span>)  <span class="comment"># 让QLineEdit控件可拖动</span></span><br><span class="line"></span><br><span class="line">        combo = MyComboBox()</span><br><span class="line">        formLayout.addRow(lineEdit,combo)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrapDropDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用剪贴板"><a href="#使用剪贴板" class="headerlink" title="使用剪贴板"></a>使用剪贴板</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/ClipBoard.png" width="500"><br></center><ul><li>要点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyText</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    clipboard.setText(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasteText</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    self.textLabel.setText(clipboard.text())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyImage</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    clipboard.setPixmap(QPixmap(<span class="string">'./images/book.png'</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasteImage</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    self.imageLabel.setPixmap(clipboard.pixmap())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">    mimeData = QMimeData()</span><br><span class="line">    mimeData.setHtml(<span class="string">'&lt;b&gt;Bold and &lt;font color=red&gt;Red&lt;/font&gt;&lt;/b&gt;'</span>)</span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    clipboard.setMimeData(mimeData)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasteHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    mimeData = clipboard.mimeData()</span><br><span class="line">    <span class="keyword">if</span> mimeData.hasHtml():</span><br><span class="line">        self.textLabel.setText(mimeData.html())</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClipBoard</span><span class="params">(QDialog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ClipBoard,self).__init__()</span><br><span class="line">        textCopyButton = QPushButton(<span class="string">'复制文本'</span>)</span><br><span class="line">        textPasteButton = QPushButton(<span class="string">'粘贴文本'</span>)</span><br><span class="line"></span><br><span class="line">        htmlCopyButton = QPushButton(<span class="string">'复制HTML'</span>)</span><br><span class="line">        htmlPasteButton = QPushButton(<span class="string">'粘贴HTML'</span>)</span><br><span class="line"></span><br><span class="line">        imageCopyButton = QPushButton(<span class="string">'复制图像'</span>)</span><br><span class="line">        imagePasteButton = QPushButton(<span class="string">'粘贴图像'</span>)</span><br><span class="line"></span><br><span class="line">        self.textLabel  = QLabel(<span class="string">'默认文本'</span>)</span><br><span class="line">        self.imageLabel=QLabel()</span><br><span class="line">      <span class="comment">#  self.imageLabel.setPixmap(QPixmap('./images/book1.png'))</span></span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        layout.addWidget(textCopyButton,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(imageCopyButton,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(htmlCopyButton,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(textPasteButton,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(imagePasteButton,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(htmlPasteButton,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.textLabel,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.imageLabel,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        textCopyButton.clicked.connect(self.copyText)</span><br><span class="line">        textPasteButton.clicked.connect(self.pasteText)</span><br><span class="line"></span><br><span class="line">        htmlCopyButton.clicked.connect(self.copyHtml)</span><br><span class="line">        htmlPasteButton.clicked.connect(self.pasteHtml)</span><br><span class="line"></span><br><span class="line">        imageCopyButton.clicked.connect(self.copyImage)</span><br><span class="line">        imagePasteButton.clicked.connect(self.pasteImage)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'剪贴板演示'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyText</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setText(<span class="string">'hello world'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pasteText</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        self.textLabel.setText(clipboard.text())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyImage</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setPixmap(QPixmap(<span class="string">'./images/book.png'</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pasteImage</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        self.imageLabel.setPixmap(clipboard.pixmap())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">        mimeData = QMimeData()</span><br><span class="line">        mimeData.setHtml(<span class="string">'&lt;b&gt;Bold and &lt;font color=red&gt;Red&lt;/font&gt;&lt;/b&gt;'</span>)</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setMimeData(mimeData)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pasteHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        mimeData = clipboard.mimeData()</span><br><span class="line">        <span class="keyword">if</span> mimeData.hasHtml():</span><br><span class="line">            self.textLabel.setText(mimeData.html())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ClipBoard()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="日历和时间"><a href="#日历和时间" class="headerlink" title="日历和时间"></a>日历和时间</h2><h3 id="日历控件"><a href="#日历控件" class="headerlink" title="日历控件"></a>日历控件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QCalendarWidget.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyCalendar, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cal = QCalendarWidget(self)</span><br><span class="line">        self.cal.setMinimumDate(QDate(<span class="number">1988</span>,<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.cal.setMaximumDate(QDate(<span class="number">2088</span>,<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.cal.setGridVisible(<span class="keyword">True</span>)</span><br><span class="line">        self.cal.move(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line">        self.cal.clicked.connect(self.showDate)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(self)</span><br><span class="line"></span><br><span class="line">        date = self.cal.selectedDate()</span><br><span class="line">        self.label.setText(date.toString(<span class="string">"yyyy-MM-dd dddd"</span>))</span><br><span class="line">        self.label.move(<span class="number">20</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">350</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"日历演示"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDate</span><span class="params">(self,date)</span>:</span></span><br><span class="line">        <span class="comment">#self.label.setText((date.toString("yyyy-MM-dd dddd")))</span></span><br><span class="line">        self.label.setText((self.cal.selectedDate().toString(<span class="string">"yyyy-MM-dd dddd"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = MyCalendar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="设置不同风格的日期和时间"><a href="#设置不同风格的日期和时间" class="headerlink" title="设置不同风格的日期和时间"></a>设置不同风格的日期和时间</h3><h3 id="日期和时间控件的高级操作"><a href="#日期和时间控件的高级操作" class="headerlink" title="日期和时间控件的高级操作"></a>日期和时间控件的高级操作</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QDateTimeEdit.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateTimeEdit</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DateTimeEdit, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        vlayout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        dateTimeEdit1 = QDateTimeEdit()</span><br><span class="line">        dateTimeEdit1.setMinimumDate(QDate.currentDate().addDays(<span class="number">-365</span>))</span><br><span class="line">        dateTimeEdit1.setMaximumDate(QDate.currentDate().addDays(<span class="number">365</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dateTimeEdit2 = QDateTimeEdit(QDateTime.currentDateTime())</span><br><span class="line">        dateTimeEdit2.setCalendarPopup(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        dateEdit = QDateTimeEdit(QDate.currentDate()) <span class="comment"># 仅显示日期</span></span><br><span class="line">        timeEdit = QDateTimeEdit(QTime.currentTime()) <span class="comment"># 仅显示时间</span></span><br><span class="line"></span><br><span class="line">        dateTimeEdit1.setDisplayFormat(<span class="string">"yyyy-MM-dd  HH:mm:ss"</span>)</span><br><span class="line">        dateTimeEdit2.setDisplayFormat(<span class="string">"yyyy/MM/dd HH-mm-ss"</span>)</span><br><span class="line">        dateEdit.setDisplayFormat(<span class="string">"yyyy.MM.dd"</span>)</span><br><span class="line">        timeEdit.setDisplayFormat(<span class="string">"HH:mm:ss"</span>)</span><br><span class="line"></span><br><span class="line">        self.dateTimeEdit = dateTimeEdit1</span><br><span class="line">        dateTimeEdit1.dateChanged.connect(self.onDateChanged)</span><br><span class="line">        dateTimeEdit1.timeChanged.connect(self.onTimeChanged)</span><br><span class="line">        dateTimeEdit1.dateTimeChanged.connect(self.onDateTimeChanged)</span><br><span class="line"></span><br><span class="line">        vlayout.addWidget(dateTimeEdit1)</span><br><span class="line">        vlayout.addWidget(dateTimeEdit2)</span><br><span class="line">        vlayout.addWidget(dateEdit)</span><br><span class="line">        vlayout.addWidget(timeEdit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(<span class="string">'获取日期和时间'</span>)</span><br><span class="line">        self.btn.clicked.connect(self.onButtonClick)</span><br><span class="line">        vlayout.addWidget(self.btn)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vlayout)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">90</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"设置不同风格的日期和时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日期变化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onDateChanged</span><span class="params">(self,date)</span>:</span></span><br><span class="line">        print(date)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 时间变化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTimeChanged</span><span class="params">(self,time)</span>:</span></span><br><span class="line">        print(time)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日期和时间变化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onDateTimeChanged</span><span class="params">(self,datetime)</span>:</span></span><br><span class="line">        print(datetime)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        datetime = self.dateTimeEdit.dateTime()</span><br><span class="line">        print(datetime)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最大日期</span></span><br><span class="line">        print(self.dateTimeEdit.maximumDate())</span><br><span class="line">        <span class="comment"># 最大日期和时间</span></span><br><span class="line">        print(self.dateTimeEdit.maximumDateTime())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最小日期</span></span><br><span class="line">        print(self.dateTimeEdit.minimumDateTime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DateTimeEdit()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="菜单、工具栏和状态栏"><a href="#菜单、工具栏和状态栏" class="headerlink" title="菜单、工具栏和状态栏"></a>菜单、工具栏和状态栏</h2><h3 id="创建和使用菜单"><a href="#创建和使用菜单" class="headerlink" title="创建和使用菜单"></a>创建和使用菜单</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/menuBar.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span><span class="params">(QMainWindow)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Menu,self).__init__()</span><br><span class="line">        bar = self.menuBar()  <span class="comment"># 获取菜单栏</span></span><br><span class="line"></span><br><span class="line">        file = bar.addMenu(<span class="string">"文件"</span>)</span><br><span class="line">        file.addAction(<span class="string">"新建"</span>)</span><br><span class="line"></span><br><span class="line">        save = QAction(<span class="string">"保存"</span>,self)</span><br><span class="line">        save.setShortcut(<span class="string">"Ctrl + S"</span>)</span><br><span class="line">        save.triggered.connect(self.process)</span><br><span class="line">        file.addAction(save)</span><br><span class="line"></span><br><span class="line">        quit = QAction(<span class="string">"退出"</span>,self)</span><br><span class="line">        file.addAction(quit)</span><br><span class="line"></span><br><span class="line">        edit = bar.addMenu(<span class="string">"Edit"</span>)</span><br><span class="line">        edit.addAction(<span class="string">"copy"</span>)</span><br><span class="line">        edit.addAction(<span class="string">"paste"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        print(self.sender().text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Menu()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="创建和使用工具栏"><a href="#创建和使用工具栏" class="headerlink" title="创建和使用工具栏"></a>创建和使用工具栏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">工具栏默认按钮：<span class="string">'只显示图标，将文本作为悬停提示展示'</span></span><br><span class="line"></span><br><span class="line">工具栏按钮有<span class="number">3</span>中显示状态</span><br><span class="line"><span class="number">1.</span>  只显示图标 ToolButtonIconOnly = <span class="number">0</span></span><br><span class="line"><span class="number">2.</span>  只显示文本 ToolButtonTextOnly = <span class="number">1</span></span><br><span class="line"><span class="number">3.</span>  同时显示文本和图标 ToolButtonTextBesideIcon = <span class="number">2</span>/ ToolButtonTextUnderIcon = <span class="number">3</span>/ ToolButtonFollowStyle = <span class="number">4</span> ...</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/Toolbar.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toolbar</span><span class="params">(QMainWindow)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Toolbar,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"工具栏例子"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        tb1 = self.addToolBar(<span class="string">"File"</span>)</span><br><span class="line"></span><br><span class="line">        new = QAction(QIcon(<span class="string">'./images/new.png'</span>),<span class="string">"new"</span>,self)</span><br><span class="line">        tb1.addAction(new)</span><br><span class="line"></span><br><span class="line">        open = QAction(QIcon(<span class="string">'./images/open.png'</span>),<span class="string">"open"</span>,self)</span><br><span class="line">        tb1.addAction(open)</span><br><span class="line"></span><br><span class="line">        save = QAction(QIcon(<span class="string">'./images/save.png'</span>),<span class="string">"save"</span>,self)</span><br><span class="line">        tb1.addAction(save)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tb2 = self.addToolBar(<span class="string">"File1"</span>)</span><br><span class="line"></span><br><span class="line">        new1 = QAction(QIcon(<span class="string">'./images/new.png'</span>),<span class="string">"新建"</span>,self)</span><br><span class="line">        tb2.addAction(new1)</span><br><span class="line"></span><br><span class="line">        tb2.setToolButtonStyle(Qt.ToolButtonTextUnderIcon) <span class="comment"># try more ToolButtonStyle</span></span><br><span class="line"></span><br><span class="line">        tb1.actionTriggered.connect(self.toolbtnpressed)</span><br><span class="line"></span><br><span class="line">        tb2.actionTriggered.connect(self.toolbtnpressed)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toolbtnpressed</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        print(<span class="string">"按下的工具栏按钮是"</span>,a.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Toolbar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="创建和使用状态栏"><a href="#创建和使用状态栏" class="headerlink" title="创建和使用状态栏"></a>创建和使用状态栏</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/StatusBar.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusBar</span><span class="params">(QMainWindow)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(StatusBar,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"状态栏演示"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        bar = self.menuBar()  <span class="comment"># 菜单栏</span></span><br><span class="line">        file = bar.addMenu(<span class="string">"File"</span>)</span><br><span class="line">        file.addAction(<span class="string">"show"</span>)</span><br><span class="line">        file.triggered.connect(self.processTrigger)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(QTextEdit())  <span class="comment"># no sense</span></span><br><span class="line"></span><br><span class="line">        self.statusBar = QStatusBar()</span><br><span class="line">        self.setStatusBar(self.statusBar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processTrigger</span><span class="params">(self,q)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> q.text() == <span class="string">"show"</span> :</span><br><span class="line">            self.statusBar.showMessage(q.text() + <span class="string">" 菜单被点击了"</span>,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = StatusBar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><h3 id="使用打印机"><a href="#使用打印机" class="headerlink" title="使用打印机"></a>使用打印机</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/PrintSupport.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtGui, QtWidgets, QtPrintSupport</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintSupport</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(PrintSupport,self).__init__()</span><br><span class="line">        self.setGeometry(<span class="number">500</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.button = QPushButton(<span class="string">'打印QTextEdit控件中的内容'</span>,self)</span><br><span class="line">        self.button.setGeometry(<span class="number">20</span>,<span class="number">20</span>,<span class="number">260</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        self.editor = QTextEdit(<span class="string">'默认文本'</span>,self)</span><br><span class="line">        self.editor.setGeometry(<span class="number">20</span>,<span class="number">60</span>,<span class="number">260</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.<span class="keyword">print</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        printer = QtPrintSupport.QPrinter()</span><br><span class="line">        painter = QtGui.QPainter()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将绘制的目标重定向(begin)到打印机(printer)</span></span><br><span class="line">        painter.begin(printer)</span><br><span class="line">        screen = self.editor.grab()  <span class="comment"># 获取屏幕</span></span><br><span class="line">        painter.drawPixmap(<span class="number">10</span>,<span class="number">10</span>,screen) <span class="comment"># 内容以图片形式打印</span></span><br><span class="line">        painter.end()</span><br><span class="line">        print(<span class="string">"print"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    gui = PrintSupport()</span><br><span class="line">    gui.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><h3 id="显示打印对话框"><a href="#显示打印对话框" class="headerlink" title="显示打印对话框"></a>显示打印对话框</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/PrintDialog.png" width="500"><br></center><br>- 要点代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openFile</span><span class="params">(self)</span>:</span></span><br><span class="line">    fname = QFileDialog.getOpenFileName(self,<span class="string">'打开文本文件'</span>,<span class="string">'./'</span>)</span><br><span class="line">    <span class="keyword">if</span> fname[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">with</span> open(fname[<span class="number">0</span>],<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>,errors = <span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.editor.setText(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示打印设置对话框</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showSettingsDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">    printDialog = QPageSetupDialog(self.printer,self)</span><br><span class="line">    printDialog.exec()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示打印对话框</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showPrintDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">    printdialog = QPrintDialog(self.printer,self)</span><br><span class="line">    <span class="keyword">if</span> QDialog.Accepted == printdialog.exec():</span><br><span class="line">        self.editor.print(self.printer)</span><br></pre></td></tr></table></figure><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QPushButton, QTextEdit, QFileDialog, QDialog</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtPrintSupport <span class="keyword">import</span> QPageSetupDialog, QPrintDialog, QPrinter</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintDialog</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PrintDialog,self).__init__()</span><br><span class="line">        self.printer = QPrinter()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'打印对话框'</span>)</span><br><span class="line"></span><br><span class="line">        self.editor = QTextEdit(self)</span><br><span class="line">        self.editor.setGeometry(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">270</span>)</span><br><span class="line"></span><br><span class="line">        self.openButton = QPushButton(<span class="string">'打开文件'</span>,self)</span><br><span class="line">        self.openButton.move(<span class="number">350</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.settingsButton = QPushButton(<span class="string">'打印设置'</span>,self)</span><br><span class="line">        self.settingsButton.move(<span class="number">350</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.printButton = QPushButton(<span class="string">'打印文档'</span>,self)</span><br><span class="line">        self.printButton.move(<span class="number">350</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        self.openButton.clicked.connect(self.openFile)</span><br><span class="line">        self.settingsButton.clicked.connect(self.showSettingsDialog)</span><br><span class="line">        self.printButton.clicked.connect(self.showPrintDialog)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        fname = QFileDialog.getOpenFileName(self,<span class="string">'打开文本文件'</span>,<span class="string">'./'</span>)</span><br><span class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">with</span> open(fname[<span class="number">0</span>],<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>,errors = <span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                self.editor.setText(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示打印设置对话框</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showSettingsDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        printDialog = QPageSetupDialog(self.printer,self)</span><br><span class="line">        printDialog.exec()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示打印对话框</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showPrintDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        printdialog = QPrintDialog(self.printer,self)</span><br><span class="line">        <span class="keyword">if</span> QDialog.Accepted == printdialog.exec():</span><br><span class="line">            self.editor.print(self.printer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    gui = PrintDialog()</span><br><span class="line">    gui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>## 容器控件<br>### 选项卡控件（QTabWidget）<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/TabWidgetDemo.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabWidgetDemo</span><span class="params">(QTabWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(TabWidgetDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"选项卡控件：QTabWidget"</span>)</span><br><span class="line">        <span class="comment"># 创建用于显示控件的窗口</span></span><br><span class="line">        self.tab1 = QWidget()</span><br><span class="line">        self.tab2 = QWidget()</span><br><span class="line">        self.tab3 = QWidget()</span><br><span class="line"></span><br><span class="line">        self.addTab(self.tab1,<span class="string">'选项卡1'</span>)</span><br><span class="line">        self.addTab(self.tab2,<span class="string">'选项卡2'</span>)</span><br><span class="line">        self.addTab(self.tab3,<span class="string">'选项卡3'</span>)</span><br><span class="line"></span><br><span class="line">        self.tab1UI()</span><br><span class="line">        self.tab2UI()</span><br><span class="line">        self.tab3UI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab1UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        layout.addRow(<span class="string">'姓名'</span>,QLineEdit())</span><br><span class="line">        layout.addRow(<span class="string">'地址'</span>,QLineEdit())</span><br><span class="line">        self.setTabText(<span class="number">0</span>,<span class="string">'联系方式'</span>)</span><br><span class="line">        self.tab1.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab2UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        sex = QHBoxLayout()</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'男'</span>))</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'女'</span>))</span><br><span class="line">        layout.addRow(QLabel(<span class="string">'性别'</span>),sex)</span><br><span class="line">        layout.addRow(<span class="string">'生日'</span>,QLineEdit())</span><br><span class="line">        self.setTabText(<span class="number">1</span>,<span class="string">'个人详细信息'</span>)</span><br><span class="line">        self.tab2.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab3UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(QLabel(<span class="string">'科目'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'物理'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'高数'</span>))</span><br><span class="line">        self.setTabText(<span class="number">2</span>,<span class="string">'教育程度'</span>)</span><br><span class="line">        self.tab3.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = TabWidgetDemo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="堆栈窗口控件（QStackedWidget）"><a href="#堆栈窗口控件（QStackedWidget）" class="headerlink" title="堆栈窗口控件（QStackedWidget）"></a>堆栈窗口控件（QStackedWidget）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QStackedWidget.png" width="500"><br></center><ul><li><p>要点说明</p><ul><li>左侧 <code>QListWidget()</code> ；右侧 <code>QStackedWidget()</code>   </li><li><p><code>self.list.currentRowChanged.connect(self.display)</code></p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self,index)</span>:</span></span><br><span class="line">   self.stack.setCurrentIndex(index)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackedExample</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(StackedExample, self).__init__()</span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'堆栈窗口控件（QStackedWidget）'</span>)</span><br><span class="line"></span><br><span class="line">        self.list = QListWidget()</span><br><span class="line">        self.list.insertItem(<span class="number">0</span>,<span class="string">'联系方式'</span>)</span><br><span class="line">        self.list.insertItem(<span class="number">1</span>,<span class="string">'个人信息'</span>)</span><br><span class="line">        self.list.insertItem(<span class="number">2</span>,<span class="string">'教育程度'</span>)</span><br><span class="line"></span><br><span class="line">        self.stack1 = QWidget()</span><br><span class="line">        self.stack2 = QWidget()</span><br><span class="line">        self.stack3 = QWidget()</span><br><span class="line"></span><br><span class="line">        self.tab1UI()</span><br><span class="line">        self.tab2UI()</span><br><span class="line">        self.tab3UI()</span><br><span class="line"></span><br><span class="line">        self.stack = QStackedWidget()</span><br><span class="line">        self.stack.addWidget(self.stack1)</span><br><span class="line">        self.stack.addWidget(self.stack2)</span><br><span class="line">        self.stack.addWidget(self.stack3)</span><br><span class="line"></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addWidget(self.list)</span><br><span class="line">        hbox.addWidget(self.stack)</span><br><span class="line">        self.setLayout(hbox)</span><br><span class="line"></span><br><span class="line">        self.list.currentRowChanged.connect(self.display)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab1UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        layout.addRow(<span class="string">'姓名'</span>,QLineEdit())</span><br><span class="line">        layout.addRow(<span class="string">'地址'</span>,QLineEdit())</span><br><span class="line">        self.stack1.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab2UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        sex = QHBoxLayout()</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'男'</span>))</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'女'</span>))</span><br><span class="line">        layout.addRow(QLabel(<span class="string">'性别'</span>),sex)</span><br><span class="line">        layout.addRow(<span class="string">'生日'</span>,QLineEdit())</span><br><span class="line">        self.stack2.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab3UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(QLabel(<span class="string">'科目'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'物理'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'高数'</span>))</span><br><span class="line">        self.stack3.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        self.stack.setCurrentIndex(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = StackedExample()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="停靠控件（QDockWidget）"><a href="#停靠控件（QDockWidget）" class="headerlink" title="停靠控件（QDockWidget）"></a>停靠控件（QDockWidget）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QDockWidget.png" width="500"><br></center><ul><li><p>实例化： <code>self.items = QDockWidget(&#39;Dockable&#39;,self)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DockDemo</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(DockDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"停靠控件（QDockWidget）"</span>)</span><br><span class="line">        self.setCentralWidget(QLineEdit())</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.items = QDockWidget(<span class="string">'Dockable'</span>,self)</span><br><span class="line"></span><br><span class="line">        self.listWidget = QListWidget()</span><br><span class="line">        self.listWidget.addItem(<span class="string">'item1'</span>)</span><br><span class="line">        self.listWidget.addItem(<span class="string">'item2'</span>)</span><br><span class="line">        self.listWidget.addItem(<span class="string">'item3'</span>)</span><br><span class="line"></span><br><span class="line">        self.items.setWidget(self.listWidget)</span><br><span class="line"></span><br><span class="line">        self.items.setFloating(<span class="keyword">True</span>) <span class="comment"># 初始时为浮动状态</span></span><br><span class="line"></span><br><span class="line">        self.addDockWidget(Qt.RightDockWidgetArea,self.items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = DockDemo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="容纳多文档的窗口"><a href="#容纳多文档的窗口" class="headerlink" title="容纳多文档的窗口"></a>容纳多文档的窗口</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/MultiWindows.png" width="500"><br></center><ul><li>要点说明： <code>QMdiArea</code>  、  <code>QMdiSubWindow</code></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiWindows</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MultiWindows, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"容纳多文档的窗口"</span>)</span><br><span class="line">        self.mdi = QMdiArea()</span><br><span class="line">        self.setCentralWidget(self.mdi)</span><br><span class="line"></span><br><span class="line">        bar = self.menuBar()</span><br><span class="line">        file = bar.addMenu(<span class="string">"File"</span>)</span><br><span class="line">        file.addAction(<span class="string">"New"</span>)</span><br><span class="line">        file.addAction(<span class="string">"cascade"</span>)</span><br><span class="line">        file.addAction(<span class="string">"Tiled"</span>)</span><br><span class="line"></span><br><span class="line">        file.triggered.connect(self.windowaction)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">windowaction</span><span class="params">(self,q)</span>:</span></span><br><span class="line">        print(q.text())</span><br><span class="line">        <span class="keyword">if</span> q.text() == <span class="string">"New"</span>:</span><br><span class="line">            MultiWindows.count = MultiWindows.count + <span class="number">1</span></span><br><span class="line">            sub = QMdiSubWindow()</span><br><span class="line">            sub.setWidget(QTextEdit())</span><br><span class="line">            sub.setWindowTitle(<span class="string">"子窗口"</span> + str(MultiWindows.count))</span><br><span class="line">            self.mdi.addSubWindow(sub)</span><br><span class="line">            sub.show()</span><br><span class="line">        <span class="keyword">elif</span> q.text() == <span class="string">"cascade"</span>: <span class="comment"># 层叠</span></span><br><span class="line">            self.mdi.cascadeSubWindows()</span><br><span class="line">        <span class="keyword">elif</span> q.text() == <span class="string">"Tiled"</span>:  <span class="comment"># 平铺</span></span><br><span class="line">            self.mdi.tileSubWindows()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = MultiWindows()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="滚动条控件（QScrollBar）"><a href="#滚动条控件（QScrollBar）" class="headerlink" title="滚动条控件（QScrollBar）"></a>滚动条控件（QScrollBar）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QScrollBar.png" width="500"><br></center><ul><li>QScrollBar的作用<ol><li>通过滚动条值的变化控制其他控件状态的变化</li><li>通过滚动条值的变化控制控件位置的变化</li></ol></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollBar</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ScrollBar, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        self.label = QLabel(<span class="string">'拖动滚动条去改变文字颜色'</span>)</span><br><span class="line"></span><br><span class="line">        hbox.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        self.scrollbar1 = QScrollBar()</span><br><span class="line">        self.scrollbar1.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar1.sliderMoved.connect(self.sliderMoved)</span><br><span class="line"></span><br><span class="line">        self.scrollbar2 = QScrollBar()</span><br><span class="line">        self.scrollbar2.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar2.sliderMoved.connect(self.sliderMoved)</span><br><span class="line"></span><br><span class="line">        self.scrollbar3 = QScrollBar()</span><br><span class="line">        self.scrollbar3.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar3.sliderMoved.connect(self.sliderMoved)</span><br><span class="line"></span><br><span class="line">        self.scrollbar4 = QScrollBar()</span><br><span class="line">        self.scrollbar4.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar4.sliderMoved.connect(self.sliderMoved1)</span><br><span class="line">        </span><br><span class="line">        hbox.addWidget(self.scrollbar1)</span><br><span class="line">        hbox.addWidget(self.scrollbar2)</span><br><span class="line">        hbox.addWidget(self.scrollbar3)</span><br><span class="line">        hbox.addWidget(self.scrollbar4)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(hbox)</span><br><span class="line"></span><br><span class="line">        self.y = self.label.pos().y()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sliderMoved</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.scrollbar1.value(),self.scrollbar2.value(),self.scrollbar3.value())</span><br><span class="line">        palette = QPalette()</span><br><span class="line">        c = QColor(self.scrollbar1.value(),self.scrollbar2.value(),self.scrollbar3.value(),<span class="number">255</span>)</span><br><span class="line">        palette.setColor(QPalette.Foreground,c)</span><br><span class="line">        self.label.setPalette(palette)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sliderMoved1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.label.move(self.label.x(),self.y + self.scrollbar4.value())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = ScrollBar()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="动态显示当前时间（QTimer）"><a href="#动态显示当前时间（QTimer）" class="headerlink" title="动态显示当前时间（QTimer）"></a>动态显示当前时间（QTimer）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/ShowTime.png" width="500"><br></center><ul><li><p><code>self.timer = QTimer()</code>  # 计时器</p><ul><li><code>self.timer.start(1000)</code></li><li><code>self.timer.stop()</code></li></ul></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication, QGridLayout, QLabel</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer, QDateTime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowTime</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(ShowTime, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"动态显示当前时间"</span>)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(<span class="string">'显示当前时间'</span>)</span><br><span class="line">        self.startBtn = QPushButton(<span class="string">'开始'</span>)</span><br><span class="line">        self.endBtn = QPushButton(<span class="string">'结束'</span>)</span><br><span class="line">        layout= QGridLayout()</span><br><span class="line"></span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.timeout.connect(self.showTime)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.startBtn,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.endBtn,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.startBtn.clicked.connect(self.startTimer)</span><br><span class="line">        self.endBtn.clicked.connect(self.endTimer)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showTime</span><span class="params">(self)</span>:</span></span><br><span class="line">        time = QDateTime.currentDateTime()</span><br><span class="line">        timeDisplay = time.toString(<span class="string">"yyyy-MM-dd hh:mm:ss dddd"</span>)</span><br><span class="line">        self.label.setText(timeDisplay)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.start(<span class="number">1000</span>)</span><br><span class="line">        self.startBtn.setEnabled(<span class="keyword">False</span>)</span><br><span class="line">        self.endBtn.setEnabled(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">endTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.stop()</span><br><span class="line">        self.startBtn.setEnabled(<span class="keyword">True</span>)</span><br><span class="line">        self.endBtn.setEnabled(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = ShowTime()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="让窗口定时关闭"><a href="#让窗口定时关闭" class="headerlink" title="让窗口定时关闭"></a>让窗口定时关闭</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/AutoCloseWindow.png" width="500"><br></center><ul><li><code>QTimer.singleShot(5000,app.quit)</code>  # 窗口在5秒后自动关闭!</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    label = QLabel(<span class="string">'&lt;font color=red size=140&gt;&lt;b&gt;Hello World，窗口在5秒后自动关闭!&lt;/b&gt;&lt;/font&gt;'</span>)</span><br><span class="line">    label.setWindowFlags(Qt.SplashScreen | Qt.FramelessWindowHint) <span class="comment"># 闪屏 | 无框架窗口</span></span><br><span class="line">    label.show()</span><br><span class="line">    QTimer.singleShot(<span class="number">5000</span>,app.quit)</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用线程类（QThread）编写计数器"><a href="#使用线程类（QThread）编写计数器" class="headerlink" title="使用线程类（QThread）编写计数器"></a>使用线程类（QThread）编写计数器</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/Counter.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sec = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span><span class="params">(QThread)</span>:</span>  <span class="comment"># 自定义信号</span></span><br><span class="line">    timer = pyqtSignal()</span><br><span class="line">    end = pyqtSignal()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            self.sleep(<span class="number">1</span>)  <span class="comment"># 休眠1秒</span></span><br><span class="line">            <span class="keyword">if</span> sec == <span class="number">5</span>:</span><br><span class="line">                self.end.emit()   <span class="comment"># 发送end信号，触发与end关联的槽方法，计数完成后发送一次信号</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.timer.emit()   <span class="comment"># 发送timer信号，每隔1秒发送一次信号</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(Counter, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"使用线程类（QThread）编写计数器"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.lcdNumber = QLCDNumber()  <span class="comment"># 模拟LED的数字显示效果</span></span><br><span class="line">        layout.addWidget(self.lcdNumber)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">'开始计数'</span>)</span><br><span class="line">        layout.addWidget(button)</span><br><span class="line"></span><br><span class="line">        self.workThread = WorkThread()</span><br><span class="line"></span><br><span class="line">        self.workThread.timer.connect(self.countTime)</span><br><span class="line">        self.workThread.end.connect(self.end)</span><br><span class="line">        button.clicked.connect(self.work)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countTime</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> sec</span><br><span class="line">        sec += <span class="number">1</span></span><br><span class="line">        self.lcdNumber.display(sec)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        QMessageBox.information(self,<span class="string">'消息'</span>,<span class="string">'计数结束'</span>,QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.workThread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Counter()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（五）</title>
    <link href="http://yoursite.com/2019/01/26/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/26/PyQt5-Python-实战课程（五）/</id>
    <published>2019-01-26T14:45:28.000Z</published>
    <updated>2019-02-15T15:18:05.865Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="绘图API"><a href="#绘图API" class="headerlink" title="绘图API"></a>绘图API</h2><p>绘图类型</p><ol><li>文本</li><li>各种图形（直线，点，椭圆，弧，扇形，多边形等）</li><li>图像</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般的绘制过程：必须在paintEvent事件方法中绘制各种元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">    painter = QPainter()    </span><br><span class="line"></span><br><span class="line">    painter.begin(self)</span><br><span class="line"></span><br><span class="line">    painter.drawText(...)</span><br><span class="line">    </span><br><span class="line">    painter.end()</span><br></pre></td></tr></table></figure><h3 id="在窗口上绘制直线"><a href="#在窗口上绘制直线" class="headerlink" title="在窗口上绘制直线"></a>在窗口上绘制直线</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawText.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter,QColor,QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawText</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawText,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'在窗口上绘制文本'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line">        self.text = <span class="string">"Python从菜鸟到高手"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span> <span class="comment"># 伸缩窗口大小时，该方法会不断调用</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.begin(self)</span><br><span class="line">        painter.setPen(QColor(<span class="number">150</span>,<span class="number">43</span>,<span class="number">5</span>)) <span class="comment">#设置画笔颜色</span></span><br><span class="line">        painter.setFont(QFont(<span class="string">'SimSun'</span>,<span class="number">25</span>)) <span class="comment">#设置字体、大小</span></span><br><span class="line"></span><br><span class="line">        painter.drawText(event.rect(),Qt.AlignCenter,self.text) <span class="comment"># 设置绘制区域</span></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawText()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用像素点绘制正弦曲线"><a href="#用像素点绘制正弦曲线" class="headerlink" title="用像素点绘制正弦曲线"></a>用像素点绘制正弦曲线</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawPoints.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">painter.drawPoint(x,y)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawPoints</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawPoints,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'在窗口上用像素点绘制2个周期的正弦曲线'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter()</span><br><span class="line">        painter.begin(self)</span><br><span class="line">        painter.setPen(Qt.blue)</span><br><span class="line">        size = self.size()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            x = <span class="number">100</span> * (<span class="number">-1</span> + <span class="number">2.0</span> * i/<span class="number">1000</span>) + size.width()/<span class="number">2.0</span></span><br><span class="line">            y = <span class="number">-50</span> * math.sin((x - size.width()/<span class="number">2.0</span>) * math.pi/<span class="number">50</span>) + size.height()/<span class="number">2.0</span></span><br><span class="line">            painter.drawPoint(x,y)  <span class="comment"># x ∈ (-2PI, 2PI)</span></span><br><span class="line"></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawPoints()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="绘制不同类型的直线"><a href="#绘制不同类型的直线" class="headerlink" title="绘制不同类型的直线"></a>绘制不同类型的直线</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawMultiLine.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pen.setStyle(Qt.SolidLine) <span class="comment"># or Qt.DashLine or Qt.DashDotDotLine or Qt.DotLine or CustomDashLine etc.</span></span><br><span class="line">painter.setPen(pen)</span><br><span class="line">painter.drawLine(start_x, start_y, end_x, end_y)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMultiLine</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawMultiLine,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置Pen的样式'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter()</span><br><span class="line">        painter.begin(self)</span><br><span class="line"></span><br><span class="line">        pen = QPen(Qt.red,<span class="number">3</span>,Qt.SolidLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>,<span class="number">40</span>,<span class="number">250</span>,<span class="number">40</span>) <span class="comment"># (start_x, start_y, end_x, end_y)</span></span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DashLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DashDotDotLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DotLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DashDotDotLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.CustomDashLine)</span><br><span class="line">        pen.setDashPattern([<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">240</span>, <span class="number">250</span>, <span class="number">240</span>)</span><br><span class="line"></span><br><span class="line">        size = self.size()</span><br><span class="line"></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawMultiLine()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="绘制各种图形"><a href="#绘制各种图形" class="headerlink" title="绘制各种图形"></a>绘制各种图形</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawAll.png" width="500"><br></center><ul><li>类型<ol><li>弧</li><li>圆形</li><li>椭圆</li><li>矩形（正方形）</li><li>多边形</li><li>绘制图像</li></ol></li></ul><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawAll</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawAll,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">600</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'绘制各种图形'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qp = QPainter()</span><br><span class="line"></span><br><span class="line">        qp.begin(self)</span><br><span class="line"></span><br><span class="line">        qp.setPen(Qt.blue)</span><br><span class="line">        <span class="comment"># 绘制弧</span></span><br><span class="line">        rect = QRect(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># alen: 1个alen等于1/16度   45 * 16</span></span><br><span class="line">        qp.drawArc(rect,<span class="number">0</span>, <span class="number">50</span> * <span class="number">16</span>)</span><br><span class="line">        </span><br><span class="line">        qp.setPen(Qt.red)</span><br><span class="line">        <span class="comment"># 通过弧绘制圆</span></span><br><span class="line">        qp.drawArc(<span class="number">120</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>, <span class="number">360</span> * <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 绘制带弦的弧</span></span><br><span class="line">        qp.drawChord(<span class="number">10</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">12</span>,<span class="number">130</span>*<span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 绘制扇形</span></span><br><span class="line">        qp.drawPie(<span class="number">10</span>,<span class="number">240</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">12</span>,<span class="number">130</span>*<span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 椭圆</span></span><br><span class="line">        qp.drawEllipse(<span class="number">120</span>,<span class="number">120</span>,<span class="number">150</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># 绘制5边形</span></span><br><span class="line">        point1 = QPoint(<span class="number">140</span>,<span class="number">380</span>)</span><br><span class="line">        point2 = QPoint(<span class="number">270</span>,<span class="number">420</span>)</span><br><span class="line">        point3 = QPoint(<span class="number">290</span>,<span class="number">512</span>)</span><br><span class="line">        point4 = QPoint(<span class="number">290</span>,<span class="number">588</span>)</span><br><span class="line">        point5 = QPoint(<span class="number">200</span>,<span class="number">533</span>)</span><br><span class="line">        polygon = QPolygon([point1,point2,point3,point4,point5])</span><br><span class="line">        qp.drawPolygon(polygon)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制图像</span></span><br><span class="line">        image = QImage(<span class="string">'./images/book1.png'</span>)</span><br><span class="line">        rect = QRect(<span class="number">10</span>, <span class="number">400</span>, image.width()/<span class="number">3</span>, image.height()/<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#image.save('./images/book1.png')</span></span><br><span class="line">        qp.drawImage(rect,image)</span><br><span class="line"></span><br><span class="line">        qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawAll()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用画刷填充图形区域"><a href="#用画刷填充图形区域" class="headerlink" title="用画刷填充图形区域"></a>用画刷填充图形区域</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/FillRect.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brush = QBrush(Qt.SolidPattern) <span class="comment"># or Qt.Dense1Pattern or Qt.Dense2Pattern or Qt.Dense3Pattern or Qt.HorPattern etc.</span></span><br><span class="line">qp.setBrush(brush)</span><br><span class="line">qp.drawRect(x, y, width, height)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FillRect</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(FillRect,self).__init__()</span><br><span class="line">        self.resize(<span class="number">500</span>,<span class="number">260</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'用画刷填充区域'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        qp = QPainter()</span><br><span class="line">        qp.begin(self)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.SolidPattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">10</span>,<span class="number">15</span>,<span class="number">90</span>,<span class="number">60</span>) <span class="comment"># (x, y, width, height)</span></span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.Dense1Pattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">130</span>,<span class="number">15</span>,<span class="number">90</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.Dense2Pattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">250</span>,<span class="number">15</span>,<span class="number">90</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.Dense3Pattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">10</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.HorPattern) <span class="comment"># Hor - Horizontal</span></span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">130</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        qp.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = FillRect()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（四）</title>
    <link href="http://yoursite.com/2019/01/26/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/26/PyQt5-Python-实战课程（四）/</id>
    <published>2019-01-26T11:54:42.000Z</published>
    <updated>2019-02-15T15:11:42.096Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="对话框-QDialog"><a href="#对话框-QDialog" class="headerlink" title="对话框 QDialog"></a>对话框 QDialog</h2><ul><li><p>对话框类型</p><ul><li>QMessageBox </li><li>QColorDialog</li><li>QFileDialog</li><li>QFontDialog</li><li>QInputDialog</li></ul></li><li><p>窗口类型</p><ul><li>QMainWindow</li><li>QWidget</li><li>QDialog</li></ul></li></ul><h3 id="使用QDialog显示通用对话框"><a href="#使用QDialog显示通用对话框" class="headerlink" title="使用QDialog显示通用对话框"></a>使用QDialog显示通用对话框</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QDialogDemo.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = QDialog()</span><br><span class="line">        dialog.setWindowTitle(<span class="string">'对话框'</span>)</span><br><span class="line">        dialog.setWindowModality(Qt.ApplicationModal) <span class="comment"># 原窗口不可操作</span></span><br><span class="line">        button = QPushButton(<span class="string">'确定'</span>,dialog)</span><br><span class="line">        button.clicked.connect(dialog.close)</span><br><span class="line">        button.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        dialog.exec()</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QDialogDemo</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QDialog案例'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(self)</span><br><span class="line">        self.button.setText(<span class="string">'弹出对话框'</span>)</span><br><span class="line">        self.button.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        self.button.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = QDialog()</span><br><span class="line">        dialog.setWindowTitle(<span class="string">'对话框'</span>)</span><br><span class="line">        dialog.setWindowModality(Qt.ApplicationModal) <span class="comment"># 原窗口不可操作</span></span><br><span class="line">        button = QPushButton(<span class="string">'确定'</span>,dialog)</span><br><span class="line">        button.clicked.connect(dialog.close)</span><br><span class="line">        button.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        dialog.exec()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="显示不同类型的消息对话框"><a href="#显示不同类型的消息对话框" class="headerlink" title="显示不同类型的消息对话框"></a>显示不同类型的消息对话框</h3><p><strong>Presentation</strong></p><center><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox1.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox2.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox3.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox4.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox5.png" width="255"><br></center><ul><li>消息对话框：QMessageBox<ol><li>关于对话框</li><li>错误对话框</li><li>警告对话框</li><li>提问对话框</li><li>消息对话框</li></ol></li><li>有2点差异<ol><li>显示的对话框图标可能不同</li><li>显示的按钮是不一样的</li></ol></li></ul><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QMessageBox.about(self,<span class="string">'about'</span>,<span class="string">'这是一个关于对话框'</span>)</span><br><span class="line">QMessageBox.information(self,<span class="string">'information'</span>,<span class="string">'这是一个消息对话框'</span>, QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">QMessageBox.warning(self,<span class="string">'warning'</span>,<span class="string">'这是一个警告对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">QMessageBox.critical(self,<span class="string">'critical'</span>,<span class="string">'这是一个错误对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">QMessageBox.question(self,<span class="string">'question'</span>,<span class="string">'这是一个提问对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QMessageBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QMessageBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QMessageBox案例'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.button1 = QPushButton()</span><br><span class="line">        self.button1.setText(<span class="string">'显示关于对话框'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton()</span><br><span class="line">        self.button2.setText(<span class="string">'显示消息对话框'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        self.button3 = QPushButton()</span><br><span class="line">        self.button3.setText(<span class="string">'显示警告对话框'</span>)</span><br><span class="line">        self.button3.clicked.connect(self.showDialog)</span><br><span class="line">        </span><br><span class="line">        self.button4 = QPushButton()</span><br><span class="line">        self.button4.setText(<span class="string">'显示错误对话框'</span>)</span><br><span class="line">        self.button4.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        self.button5 = QPushButton()</span><br><span class="line">        self.button5.setText(<span class="string">'显示提问对话框'</span>)</span><br><span class="line">        self.button5.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line">        layout.addWidget(self.button3)</span><br><span class="line">        layout.addWidget(self.button4)</span><br><span class="line">        layout.addWidget(self.button5)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        text = self.sender().text()</span><br><span class="line">        <span class="keyword">if</span> text == <span class="string">'显示关于对话框'</span>:</span><br><span class="line">            QMessageBox.about(self,<span class="string">'about'</span>,<span class="string">'这是一个关于对话框'</span>)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示消息对话框'</span>:</span><br><span class="line">            reply = QMessageBox.information(self,<span class="string">'information'</span>,<span class="string">'这是一个消息对话框'</span>, QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">            print(reply == QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示警告对话框'</span>:</span><br><span class="line">            QMessageBox.warning(self,<span class="string">'warning'</span>,<span class="string">'这是一个警告对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示错误对话框'</span>:</span><br><span class="line">            QMessageBox.critical(self,<span class="string">'critical'</span>,<span class="string">'这是一个错误对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示提问对话框'</span>:</span><br><span class="line">            QMessageBox.question(self,<span class="string">'question'</span>,<span class="string">'这是一个提问对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QMessageBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用于输入列表、文本和数字的输入对话框"><a href="#用于输入列表、文本和数字的输入对话框" class="headerlink" title="用于输入列表、文本和数字的输入对话框"></a>用于输入列表、文本和数字的输入对话框</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo.png" width="500"><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo1.png" width="255"><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo2.png" width="255"><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo3.png" width="255"><br></center><ul><li><p>输入对话框：QInputDialog</p><ul><li>QInputDialog.getItem</li><li>QInputDialog.getText</li><li>QInputDialog.getInt</li></ul></li><li><p>重点方法</p><ul><li><code>item, ok =QInputDialog.getItem(self,&#39;请选择编程语言&#39;,&#39;语言列表&#39;,items)</code></li><li><code>text, ok =QInputDialog.getText(self,&#39;文本输入框&#39;,&#39;输入姓名&#39;)</code></li><li><code>num, ok =QInputDialog.getInt(self,&#39;整数输入框&#39;,&#39;输入数字&#39;)</code></li></ul></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QInputDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QInputDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'输入对话框'</span>)</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'获取列表中的选项'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.getItem)</span><br><span class="line">        self.lineEdit1 = QLineEdit()</span><br><span class="line">        layout.addRow(self.button1, self.lineEdit1)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'获取字符串'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.getText)</span><br><span class="line">        self.lineEdit2 = QLineEdit()</span><br><span class="line">        layout.addRow(self.button2, self.lineEdit2)</span><br><span class="line"></span><br><span class="line">        self.button3 = QPushButton(<span class="string">'获取整数'</span>)</span><br><span class="line">        self.button3.clicked.connect(self.getInt)</span><br><span class="line">        self.lineEdit3 = QLineEdit()</span><br><span class="line">        layout.addRow(self.button3, self.lineEdit3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItem</span><span class="params">(self)</span>:</span></span><br><span class="line">        items = (<span class="string">'C'</span>,<span class="string">'C++'</span>,<span class="string">'Ruby'</span>,<span class="string">'Python'</span>,<span class="string">'Java'</span>)</span><br><span class="line">        item, ok =QInputDialog.getItem(self,<span class="string">'请选择编程语言'</span>,<span class="string">'语言列表'</span>,items)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> item:</span><br><span class="line">            self.lineEdit1.setText(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getText</span><span class="params">(self)</span>:</span></span><br><span class="line">        text, ok =QInputDialog.getText(self,<span class="string">'文本输入框'</span>,<span class="string">'输入姓名'</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> text:</span><br><span class="line">            self.lineEdit2.setText(text)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInt</span><span class="params">(self)</span>:</span></span><br><span class="line">        num, ok =QInputDialog.getInt(self,<span class="string">'整数输入框'</span>,<span class="string">'输入数字'</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> num:</span><br><span class="line">            self.lineEdit3.setText(str(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QInputDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="字体对话框（QFontDialog）"><a href="#字体对话框（QFontDialog）" class="headerlink" title="字体对话框（QFontDialog）"></a>字体对话框（QFontDialog）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QFontDialogDemo.png" width="500"><br></center><ul><li>重点方法：<code>font, ok = QFontDialog.getFont()</code></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFontDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QFontDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'Font Dialog例子'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.fontButton = QPushButton(<span class="string">'选择字体'</span>)</span><br><span class="line">        self.fontButton.clicked.connect(self.getFont)</span><br><span class="line">        layout.addWidget(self.fontButton)</span><br><span class="line"></span><br><span class="line">        self.fontLabel = QLabel(<span class="string">'Hello，测试字体例子'</span>)</span><br><span class="line">        layout.addWidget(self.fontLabel)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFont</span><span class="params">(self)</span>:</span></span><br><span class="line">        font, ok = QFontDialog.getFont()</span><br><span class="line">        <span class="keyword">if</span> ok :</span><br><span class="line">            self.fontLabel.setFont(font)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QFontDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="颜色对话框（QColorDialog）"><a href="#颜色对话框（QColorDialog）" class="headerlink" title="颜色对话框（QColorDialog）"></a>颜色对话框（QColorDialog）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QColorDialogDemo.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p= QPalette()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体颜色</span></span><br><span class="line">p.setColor(QPalette.WindowText,color)</span><br><span class="line"><span class="comment"># 设置背景颜色</span></span><br><span class="line">p.setColor(QPalette.Window,color)</span><br><span class="line">self.colorLabel.setAutoFillBackground(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">self.colorLabel.setPalette(p) <span class="comment"># 设置调色板（必要）</span></span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QColorDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QColorDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'Color Dialog例子'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.colorButton = QPushButton(<span class="string">'设置颜色'</span>)</span><br><span class="line">        self.colorButton.clicked.connect(self.getColor)</span><br><span class="line">        layout.addWidget(self.colorButton)</span><br><span class="line"></span><br><span class="line">        self.colorButton1 = QPushButton(<span class="string">'设置背景颜色'</span>)</span><br><span class="line">        self.colorButton1.clicked.connect(self.getBGColor)</span><br><span class="line">        layout.addWidget(self.colorButton1)</span><br><span class="line"></span><br><span class="line">        self.colorLabel = QLabel(<span class="string">'Hello，测试颜色例子'</span>)</span><br><span class="line">        layout.addWidget(self.colorLabel)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(self)</span>:</span></span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        p = QPalette()</span><br><span class="line">        p.setColor(QPalette.WindowText,color)</span><br><span class="line">        self.colorLabel.setPalette(p)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBGColor</span><span class="params">(self)</span>:</span>   <span class="comment"># 仅修改背景颜色，字体颜色为默认值</span></span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        p = QPalette()</span><br><span class="line">        p.setColor(QPalette.Window,color)</span><br><span class="line">        self.colorLabel.setAutoFillBackground(<span class="keyword">True</span>)</span><br><span class="line">        self.colorLabel.setPalette(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QColorDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="文件对话框（QFileDialog）"><a href="#文件对话框（QFileDialog）" class="headerlink" title="文件对话框（QFileDialog）"></a>文件对话框（QFileDialog）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QFileDialogDemo.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadImage</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line">    <span class="comment"># '打开文件'：caption  '.'：当前路径  '图像文件(*.jpg *.png)'：文件类型的过滤</span></span><br><span class="line">    fname,_ = QFileDialog.getOpenFileName(self,<span class="string">'打开文件'</span>,<span class="string">'.'</span>,<span class="string">'图像文件(*.jpg *.png)'</span>)  </span><br><span class="line">    self.imageLabel.setPixmap(QPixmap(fname))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadText</span><span class="params">(self)</span>:</span></span><br><span class="line">    dialog = QFileDialog() <span class="comment"># 方法二 ，区别于上述的静态方法</span></span><br><span class="line">    dialog.setFileMode(QFileDialog.AnyFile) <span class="comment"># 可选中任意类型的文件</span></span><br><span class="line">    dialog.setFilter(QDir.Files) <span class="comment"># 过滤器 （可选中文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dialog.exec(): <span class="comment">#打开对话框</span></span><br><span class="line">        filenames = dialog.selectedFiles() </span><br><span class="line">        f = open(filenames[<span class="number">0</span>],encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">        <span class="keyword">with</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            self.contents.setText(data)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFileDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QFileDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'文件对话框演示 '</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.button1 = QPushButton(<span class="string">'加载图片'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.loadImage)</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        self.imageLabel = QLabel()</span><br><span class="line">        layout.addWidget(self.imageLabel)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'加载文本文件'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.loadText)</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line"></span><br><span class="line">        self.contents = QTextEdit()</span><br><span class="line">        layout.addWidget(self.contents)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadImage</span><span class="params">(self)</span>:</span></span><br><span class="line">        fname,_ = QFileDialog.getOpenFileName(self,<span class="string">'打开文件'</span>,<span class="string">'.'</span>,<span class="string">'图像文件(*.jpg *.png)'</span>)</span><br><span class="line">        self.imageLabel.setPixmap(QPixmap(fname))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadText</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = QFileDialog()</span><br><span class="line">        dialog.setFileMode(QFileDialog.AnyFile)</span><br><span class="line">        dialog.setFilter(QDir.Files)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dialog.exec():</span><br><span class="line">            filenames = dialog.selectedFiles()</span><br><span class="line">            f = open(filenames[<span class="number">0</span>],encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">            <span class="keyword">with</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">                self.contents.setText(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QFileDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（三）</title>
    <link href="http://yoursite.com/2019/01/24/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/24/PyQt5-Python-实战课程（三）/</id>
    <published>2019-01-24T13:20:27.000Z</published>
    <updated>2019-02-15T14:50:33.593Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="基本窗口控件-code"><a href="#基本窗口控件-code" class="headerlink" title="基本窗口控件 code"></a>基本窗口控件 <a href="https://github.com/Captainzj/PyQt5_Practice/tree/master/src/Chapter-3" target="_blank" rel="noopener"><code>code</code></a></h2><h3 id="创建主窗口"><a href="#创建主窗口" class="headerlink" title="创建主窗口"></a>创建主窗口</h3><ul><li>窗口类型：<code>QMainWindow</code>、<code>QDialog</code>、<code>QWidget</code><ul><li>QMainWindow：可以包含菜单栏、工具栏、状态栏和标题栏，是最常见的窗口形式</li><li>QDialog：是对话窗口的基类。没有菜单栏、工具栏、状态栏。</li><li>QWidget：不确定窗口的用途，就使用QWidget。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow,QApplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstMainWin</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(FirstMainWin, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __init__(self,parent=None):</span></span><br><span class="line">    <span class="comment">#     super(FirstMainWin,self).__init__(parent)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'第一个主窗口应用'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        self.status = self.statusBar()</span><br><span class="line">        self.status.showMessage(<span class="string">'只存在5s的消息'</span>,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(<span class="string">'./images/Crayon03_64px.ico'</span>))</span><br><span class="line"></span><br><span class="line">    main = FirstMainWin()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="让主窗口居中显示"><a href="#让主窗口居中显示" class="headerlink" title="让主窗口居中显示"></a>让主窗口居中显示</h3><ol start="0"><li><code>import QDesktopWidget</code></li><li>手动计算<code>newLeft</code>和<code>newTop</code></li><li>调用<code>self.move(newLeft, newTop)</code>移动（居中）窗口</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QDesktopWidget</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QDesktopWidget,QMainWindow,QApplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenterForm</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CenterForm, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'让窗口居中'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取屏幕坐标系</span></span><br><span class="line">        screen = QDesktopWidget().screenGeometry()</span><br><span class="line">        <span class="comment"># 获取窗口坐标系</span></span><br><span class="line">        size = self.geometry()</span><br><span class="line">        newLeft = (screen.width() - size.width()) / <span class="number">2</span></span><br><span class="line">        newTop = (screen.height() - size.height()) /<span class="number">2</span></span><br><span class="line"></span><br><span class="line">        self.move(newLeft,newTop)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = CenterForm()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="退出应用程序"><a href="#退出应用程序" class="headerlink" title="退出应用程序"></a>退出应用程序</h3><p><strong>Presentation</strong></p><center><br>    <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QuitApplication.png" style="zoom:50%"><br></center><br>上一节讲过可视化操作的方法，此处讲解代码的相关实现.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QPushButton,QWidget</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuitApplication</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(QuitApplication,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">120</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'QuitApplication'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 添加Button</span></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'QuitApplication'</span>)</span><br><span class="line">        <span class="comment"># 将信号与槽关联</span></span><br><span class="line">        self.button1.clicked.connect(self.onClick_Button)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按钮单击事件的方法（自定义的槽）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClick_Button</span><span class="params">(self)</span>:</span></span><br><span class="line">        sender = self.sender()</span><br><span class="line">        print(sender.text()+<span class="string">'按钮被按下'</span>)</span><br><span class="line">        app = QApplication.instance()</span><br><span class="line">        <span class="comment"># 退出应用程序</span></span><br><span class="line">        app.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = QuitApplication()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 屏幕坐标系<br>原点位于屏幕左上角.<br>使用API获取尺寸<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QPushButton,QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onClick_Button</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Method 1"</span>)</span><br><span class="line">    print(<span class="string">"widget.x() = %d"</span> % widget.x())   <span class="comment"># 250 (窗口横坐标)</span></span><br><span class="line">    print(<span class="string">"widget.y() = %d"</span> % widget.y())   <span class="comment"># 200（窗口纵坐标）</span></span><br><span class="line">    print(<span class="string">"widget.width() = %d"</span> % widget.width())   <span class="comment"># 300（工作区宽度）</span></span><br><span class="line">    print(<span class="string">"widget.height() = %d"</span> % widget.height()) <span class="comment"># 240（工作区高度）</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Method 2"</span>)</span><br><span class="line">    print(<span class="string">"widget.geometry().x() = %d"</span> % widget.geometry().x())  <span class="comment"># 250 (窗口横坐标)</span></span><br><span class="line">    print(<span class="string">"widget.geometry().y() = %d"</span> % widget.geometry().y()) <span class="comment"># 222（窗口纵坐标，不含标题栏）  # 标题栏的高度：22 (MacOS)</span></span><br><span class="line">    print(<span class="string">"widget.geometry().width() = %d"</span> % widget.geometry().width()) <span class="comment"># 300（工作区宽度）</span></span><br><span class="line">    print(<span class="string">"widget.geometry().height() = %d"</span> % widget.geometry().height()) <span class="comment"># 240（工作区高度）</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Method 3"</span>)</span><br><span class="line">    print(<span class="string">"widget.frameGeometry().x() = %d"</span> % widget.frameGeometry().x()) <span class="comment"># 250 (窗口横坐标)</span></span><br><span class="line">    print(<span class="string">"widget.frameGeometry().y() = %d"</span> % widget.frameGeometry().y()) <span class="comment"># 200（窗口纵坐标）</span></span><br><span class="line">    print(<span class="string">"widget.frameGeometry().width() = %d"</span> % widget.frameGeometry().width()) <span class="comment"># 300（工作区宽度）</span></span><br><span class="line">    print(<span class="string">"widget.frameGeometry().height() = %d"</span> % widget.frameGeometry().height()) <span class="comment"># 262（工作区高度,含标题栏） # 标题栏的高度：22 (MacOS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">widget = QWidget()</span><br><span class="line"></span><br><span class="line">widget.resize(<span class="number">400</span>,<span class="number">240</span>)  <span class="comment"># 240: 设置工作区的高度</span></span><br><span class="line">widget.setWindowTitle(<span class="string">'屏幕坐标系'</span>)</span><br><span class="line"></span><br><span class="line">btn = QPushButton(widget)</span><br><span class="line">btn.move(<span class="number">24</span>,<span class="number">50</span>)</span><br><span class="line">btn.setText(<span class="string">"按钮"</span>)</span><br><span class="line">btn.clicked.connect(onClick_Button)</span><br><span class="line"></span><br><span class="line">widget.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置窗口和应用程序图标<br>- 窗口的setWindowIcon方法用于设置窗口的图标，<code>只在WindowsOS中可用</code>.<br>- QApplication中的setWindowIcon方法用于设置主窗口的图标和应用程序图标，但调用了窗口的setWindowIcon方法后，QApplication中的setWindowIcon方法就<code>只能用于设置应用程序的图标</code>了.<br><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow,QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IconForm</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(IconForm, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">250</span>,<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'设置窗口图标'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口图标</span></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">'./images/Crayon03_64px.ico'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(<span class="string">'./images/Crayon03_64px.ico'</span>))</span><br><span class="line"></span><br><span class="line">    main = IconForm()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 为控件添加提示消息<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示控件提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QToolTip,QPushButton,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooltipForm</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">'SansSerif'</span>,<span class="number">12</span>))</span><br><span class="line">        self.setToolTip(<span class="string">'今天是&lt;b&gt;星期五&lt;/b&gt;'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置控件提示消息'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'My Button'</span>)</span><br><span class="line">        self.button1.setToolTip(<span class="string">'Stay Foolish'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = TooltipForm()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>## QLabel控件<br>### QLabel控件的基本用法<br><strong>Presentation</strong><br><center><br>    <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLabelDemo.png" style="zoom:50%"><br></center><ul><li>Qlabel常用方法<ul><li>setAlignment(): 设置文本的对齐方式</li><li>setIndent(): 设置文本缩进</li><li>text(): 获取文本内容</li><li>setBuddy(): 设置伙伴关系</li><li>setText: 设置文本内容</li><li>selectedText(): 返回所选择的字符</li><li>setWordWrap(): 设置是否允许换行</li></ul></li><li>Qlabel常用的信号（事件）<ul><li>当鼠标滑过QLabel控件时触发：linkHovered</li><li>当鼠标单击QLabel控件时触发：linkActivated</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QVBoxLayout,QMainWindow,QApplication,QToolTip,QLabel,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap,QPalette</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLabelDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        label1 = QLabel(self)</span><br><span class="line">        label2 = QLabel(self)</span><br><span class="line">        label3 = QLabel(self)</span><br><span class="line">        label4 = QLabel(self)</span><br><span class="line"></span><br><span class="line">        label1.setText(<span class="string">"&lt;font color=yellow&gt; 这是一个文本标签.&lt;/font&gt;"</span>)</span><br><span class="line">        label1.setAutoFillBackground(<span class="keyword">True</span>)</span><br><span class="line">        palette = QPalette()</span><br><span class="line">        palette.setColor(QPalette.Window,Qt.blue) <span class="comment"># 设置背景色</span></span><br><span class="line">        label1.setPalette(palette)</span><br><span class="line">        label1.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        label2.setText(<span class="string">"&lt;a href='#'&gt; 欢迎使用Python GUI程序&lt;/a&gt;"</span>)</span><br><span class="line"></span><br><span class="line">        label3.setAlignment(Qt.AlignCenter)</span><br><span class="line">        label3.setToolTip(<span class="string">'这是一个图片标签'</span>)</span><br><span class="line">        label3.setPixmap(QPixmap(<span class="string">'./images/Python.jpg'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        label4.setOpenExternalLinks(<span class="keyword">True</span>) <span class="comment"># True，则open the link by the browser； False, 调用槽函数</span></span><br><span class="line">        label4.setText(<span class="string">'&lt;a href='</span><span class="string">'https://item.jd.com/12417265.html&gt;感谢关注《Python从菜鸟到高手》&lt;/a&gt;'</span>)</span><br><span class="line">        label4.setAlignment(Qt.AlignRight)</span><br><span class="line">        label4.setToolTip(<span class="string">'这是一个超链接'</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(label3)</span><br><span class="line">        vbox.addWidget(label4)</span><br><span class="line"></span><br><span class="line">        label2.linkHovered.connect(self.linkHovered)</span><br><span class="line">        label4.linkActivated.connect(self.linkClicked)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line">        self.setWindowTitle(<span class="string">'QLabel控件演示'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linkHovered</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'当鼠标滑过label2标签时，触发事件'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linkClicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'当鼠标单击label4标签时，触发事件 '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = QLabelDemo()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QLabel与伙伴控件"><a href="#QLabel与伙伴控件" class="headerlink" title="QLabel与伙伴控件"></a>QLabel与伙伴控件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLabelBuddy.png" width="500"><br></center><ul><li><code>setBuddy()</code></li><li>mainLayout.addWidget(<code>object，rowIndex, columnIndex, row, column</code>)</li></ul><h2 id="QLineEdit控件"><a href="#QLineEdit控件" class="headerlink" title="QLineEdit控件"></a>QLineEdit控件</h2><h3 id="QLineEdit控件与回显模式（EchoMode）"><a href="#QLineEdit控件与回显模式（EchoMode）" class="headerlink" title="QLineEdit控件与回显模式（EchoMode）"></a>QLineEdit控件与回显模式（EchoMode）</h3><p><strong>Presentation</strong></p><center><br>     <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditEchoMode.png" width="500"><br></center> <ul><li>基本功能: 输入单行的文本</li><li>EchoMode（回显模式）<ul><li>Normal</li><li>NoEcho（已输入字符，但屏幕上无回应）</li><li>Password </li><li>PasswordEchoOnEdit (Normal聚焦 -&gt;&gt; Password失焦)</li></ul></li></ul><h3 id="限制QLineEdit控件的输入（校验器）"><a href="#限制QLineEdit控件的输入（校验器）" class="headerlink" title="限制QLineEdit控件的输入（校验器）"></a>限制QLineEdit控件的输入（校验器）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditValidator.png" width="500"><br></center><p>如限制只能输入整数、浮点数或满足一定条件的字符串</p><h3 id="使用掩码限制QLineEdit控件的输入"><a href="#使用掩码限制QLineEdit控件的输入" class="headerlink" title="使用掩码限制QLineEdit控件的输入"></a>使用掩码限制QLineEdit控件的输入</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditMask.png" width="500"><br></center><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用掩码限制QLineEdit控件的输入</span></span><br><span class="line"></span><br><span class="line">A    ASCII字母字符是必须输入的(A-Z、a-z)</span><br><span class="line">a    ASCII字母字符是允许输入的,但不是必需的(A-Z、a-z)</span><br><span class="line">N    ASCII字母字符是必须输入的(A-Z、a-z、0-9)</span><br><span class="line">n    ASII字母字符是允许输入的,但不是必需的(A-Z、a-z、0-9)</span><br><span class="line">X    任何字符都是必须输入的</span><br><span class="line">x    任何字符都是允许输入的,但不是必需的</span><br><span class="line">9    ASCII数字字符是必须输入的(0-9)</span><br><span class="line">0    ASCII数字字符是允许输入的,但不是必需的(0-9)</span><br><span class="line">D    ASCII数字字符是必须输入的(1-9)</span><br><span class="line">d    ASCII数字字符是允许输入的,但不是必需的(1-9)</span><br><span class="line"><span class="meta">#</span><span class="bash">    ASCI数字字符或加减符号是允许输入的,但不是必需的</span></span><br><span class="line">H    十六进制格式字符是必须输入的(A-F、a-f、0-9)</span><br><span class="line">h    十六进制格式字符是允许输入的,但不是必需的(A-F、a-f、0-9)</span><br><span class="line">B    二进制格式字符是必须输入的(0,1)</span><br><span class="line">b    二进制格式字符是允许输入的,但不是必需的(0,1)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">    所有的字母字符都大写</span></span><br><span class="line">&lt;    所有的字母字符都小写</span><br><span class="line">!    关闭大小写转换</span><br><span class="line">\    使用"\"转义上面列出的字符</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineEditMask</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QLineEditMask,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'用掩码限制QLineEdit控件的输入'</span>)</span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        ipLineEdit = QLineEdit()</span><br><span class="line">        macLineEdit = QLineEdit()</span><br><span class="line">        dateLineEdit = QLineEdit()</span><br><span class="line">        licenseLineEdit = QLineEdit()</span><br><span class="line">        <span class="comment"># 192.168.21.45</span></span><br><span class="line">        ipLineEdit.setInputMask(<span class="string">'000.000.000.000;_'</span>)  <span class="comment"># 未输入时默认为_</span></span><br><span class="line">        macLineEdit.setInputMask(<span class="string">'HH:HH:HH:HH:HH:HH;_'</span>) <span class="comment"># 未输入时默认为_</span></span><br><span class="line">        dateLineEdit.setInputMask(<span class="string">'0000-00-00'</span>)</span><br><span class="line">        licenseLineEdit.setInputMask(<span class="string">'&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#'</span>) <span class="comment"># 未输入时默认为#</span></span><br><span class="line">        formLayout.addRow(<span class="string">'数字掩码'</span>,ipLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">'Mac掩码'</span>, macLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">'日期掩码'</span>,dateLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">'许可证掩码'</span>,licenseLineEdit)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QLineEditMask()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QLineEdit控件综合案例"><a href="#QLineEdit控件综合案例" class="headerlink" title="QLineEdit控件综合案例"></a>QLineEdit控件综合案例</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditDemo.png" width="500"><br></center><h2 id="使用QTextEdit控件输入多行文本"><a href="#使用QTextEdit控件输入多行文本" class="headerlink" title="使用QTextEdit控件输入多行文本"></a>使用QTextEdit控件输入多行文本</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QTextEditDemo.png" width="500"><br></center><ul><li><code>textEdit =QTextEdit()</code></li></ul><h2 id="Button控件"><a href="#Button控件" class="headerlink" title="Button控件"></a>Button控件</h2><h3 id="按钮控件（QPushButton）"><a href="#按钮控件（QPushButton）" class="headerlink" title="按钮控件（QPushButton）"></a>按钮控件（QPushButton）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QPushButtonDemo.png" width="500"><br></center><ul><li>QAbstractButton</li><li>QPushButton</li><li>AToolButton</li><li>QRadioButton</li><li>QCheckBox</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPushButtonDemo</span><span class="params">(QDialog)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QPushButtonDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QPushButton Demo'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'第1个按钮'</span>)</span><br><span class="line">        self.button1.setText(<span class="string">'First Button1'</span>)</span><br><span class="line">        self.button1.setCheckable(<span class="keyword">True</span>)</span><br><span class="line">        self.button1.toggle()</span><br><span class="line">        self.button1.clicked.connect(self.buttonState)</span><br><span class="line">        self.button1.clicked.connect(<span class="keyword">lambda</span> :self.whichButton(self.button1))</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在文本前面显示图像</span></span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'图像按钮'</span>)</span><br><span class="line">        self.button2.setIcon(QIcon(QPixmap(<span class="string">'./images/python.png'</span>)))</span><br><span class="line">        self.button2.clicked.connect(<span class="keyword">lambda</span>:self.whichButton(self.button2))</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line"></span><br><span class="line">        self.button3 = QPushButton(<span class="string">'不可用的按钮'</span>)</span><br><span class="line">        self.button3.setEnabled(<span class="keyword">False</span>)</span><br><span class="line">        layout.addWidget(self.button3)</span><br><span class="line"></span><br><span class="line">        self.button4 = QPushButton(<span class="string">'&amp;MyButton'</span>)</span><br><span class="line">        self.button4.setDefault(<span class="keyword">True</span>)</span><br><span class="line">        self.button4.clicked.connect(<span class="keyword">lambda</span>:self.whichButton(self.button4))</span><br><span class="line">        layout.addWidget(self.button4)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buttonState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.button1.isChecked():</span><br><span class="line">            print(<span class="string">'按钮1已经被选中'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'按钮1未被选中'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whichButton</span><span class="params">(self,btn)</span>:</span></span><br><span class="line">        print(<span class="string">'被单击的按钮是&lt;'</span> + btn.text() + <span class="string">'&gt;'</span>)</span><br></pre></td></tr></table></figure><h3 id="单选按钮控件（QRadioButton）"><a href="#单选按钮控件（QRadioButton）" class="headerlink" title="单选按钮控件（QRadioButton）"></a>单选按钮控件（QRadioButton）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QRadioButtonDemo.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRadioButtonDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QRadioButtonDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QRadioButton'</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.button1 = QRadioButton(<span class="string">'单选按钮1'</span>)</span><br><span class="line">        self.button1.setChecked(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        self.button1.toggled.connect(self.buttonState)</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        self.button2 = QRadioButton(<span class="string">'单选按钮2'</span>)</span><br><span class="line">        self.button2.toggled.connect(self.buttonState)</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buttonState</span><span class="params">(self)</span>:</span></span><br><span class="line">        radioButton = self.sender()  <span class="comment"># Notice!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> radioButton.isChecked() == <span class="keyword">True</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + radioButton.text() + <span class="string">'&gt; 被选中'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + radioButton.text() + <span class="string">'&gt; 被取消选中状态'</span>)</span><br></pre></td></tr></table></figure><h3 id="复选框控件（QCheckBox）"><a href="#复选框控件（QCheckBox）" class="headerlink" title="复选框控件（QCheckBox）"></a>复选框控件（QCheckBox）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QCheckBoxDemo.png" width="500"><br></center><ul><li>3种状态<ul><li>未选中：0</li><li>半选中：1</li><li>选中  ：2</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QCheckBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QCheckBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'复选框控件演示'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.checkBox1 = QCheckBox(<span class="string">'复选框控件1'</span>)</span><br><span class="line">        self.checkBox1.setChecked(<span class="keyword">True</span>)</span><br><span class="line">        self.checkBox1.stateChanged.connect(<span class="keyword">lambda</span>:self.checkboxState(self.checkBox1))</span><br><span class="line">        layout.addWidget(self.checkBox1)</span><br><span class="line"></span><br><span class="line">        self.checkBox2 = QCheckBox(<span class="string">'复选框控件2'</span>)</span><br><span class="line">        self.checkBox2.stateChanged.connect(<span class="keyword">lambda</span>:self.checkboxState(self.checkBox2))</span><br><span class="line">        layout.addWidget(self.checkBox2)</span><br><span class="line"></span><br><span class="line">        self.checkBox3 = QCheckBox(<span class="string">'半选中'</span>)</span><br><span class="line">        self.checkBox3.stateChanged.connect(<span class="keyword">lambda</span>:self.checkboxState(self.checkBox3))</span><br><span class="line">        self.checkBox3.setTristate(<span class="keyword">True</span>)   <span class="comment"># checkBox3可处于“半选中”状态</span></span><br><span class="line">        self.checkBox3.setCheckState(Qt.PartiallyChecked)</span><br><span class="line">        layout.addWidget(self.checkBox3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkboxState</span><span class="params">(self,cb)</span>:</span></span><br><span class="line">        check1Status = self.checkBox1.text() + <span class="string">', isChecked='</span> + str(self.checkBox1.isChecked()) + <span class="string">',checkState='</span> + str(self.checkBox1.checkState()) + <span class="string">'\n'</span></span><br><span class="line">        check2Status = self.checkBox2.text() + <span class="string">', isChecked='</span> + str(self.checkBox2.isChecked()) + <span class="string">',checkState='</span> + str(self.checkBox2.checkState()) + <span class="string">'\n'</span></span><br><span class="line">        check3Status = self.checkBox3.text() + <span class="string">', isChecked='</span> + str(self.checkBox3.isChecked()) + <span class="string">',checkState='</span> + str(self.checkBox3.checkState()) + <span class="string">'\n'</span></span><br><span class="line">        print(check1Status + check2Status + check3Status)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QCheckBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="下拉列表控件（QComboBox）"><a href="#下拉列表控件（QComboBox）" class="headerlink" title="下拉列表控件（QComboBox）"></a>下拉列表控件（QComboBox）</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QComboBoxDemo.png" width="500"><br></center><ol><li>如果将列表项添加到QComboBox控件中</li><li>如何获取选中的列表项</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QComboBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QComboBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'下拉列表控件演示'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(<span class="string">'请选择编程语言'</span>)</span><br><span class="line"></span><br><span class="line">        self.cb = QComboBox()</span><br><span class="line">        self.cb.addItem(<span class="string">'C++'</span>)</span><br><span class="line">        self.cb.addItem(<span class="string">'Python'</span>)</span><br><span class="line">        self.cb.addItems([<span class="string">'Java'</span>,<span class="string">'C#'</span>,<span class="string">'Ruby'</span>])</span><br><span class="line"></span><br><span class="line">        self.cb.currentIndexChanged.connect(self.selectionChange)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line">        layout.addWidget(self.cb)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectionChange</span><span class="params">(self,i)</span>:</span></span><br><span class="line">        self.label.setText(self.cb.currentText())</span><br><span class="line">        self.label.adjustSize()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> range(self.cb.count()):</span><br><span class="line">            print(<span class="string">'item'</span> + str(count) + <span class="string">'='</span> + self.cb.itemText(count))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'current index'</span>,i,<span class="string">'selection changed'</span>, self.cb.currentText())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QComboBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="计数器控件（QSpinBox）"><a href="#计数器控件（QSpinBox）" class="headerlink" title="计数器控件（QSpinBox）"></a>计数器控件（QSpinBox）</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QSpinBoxDemo.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSpinBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QSpinBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QSpinBox演示'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(<span class="string">'当前值'</span>)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        self.sb = QSpinBox()</span><br><span class="line">        self.sb.setValue(<span class="number">18</span>)  <span class="comment"># 当前值</span></span><br><span class="line">        self.sb.setRange(<span class="number">10</span>,<span class="number">38</span>)</span><br><span class="line">        self.sb.setSingleStep(<span class="number">3</span>)</span><br><span class="line">        self.sb.valueChanged.connect(self.valueChange)</span><br><span class="line">        layout.addWidget(self.sb)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valueChange</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.label.setText(<span class="string">'当前值：'</span> + str(self.sb.value()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QSpinBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="滑块控件（QSlider）"><a href="#滑块控件（QSlider）" class="headerlink" title="滑块控件（QSlider）"></a>滑块控件（QSlider）</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QSliderDemo.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSliderDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QSliderDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'滑块控件演示'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.label = QLabel(<span class="string">'你好 PyQt5'</span>)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        self.slider = QSlider(Qt.Horizontal)</span><br><span class="line">        layout.addWidget(self.slider)</span><br><span class="line">        <span class="comment"># 设置最小值</span></span><br><span class="line">        self.slider.setMinimum(<span class="number">12</span>)</span><br><span class="line">        <span class="comment"># 设置最大值</span></span><br><span class="line">        self.slider.setMaximum(<span class="number">48</span>)</span><br><span class="line">        <span class="comment"># 步长</span></span><br><span class="line">        self.slider.setSingleStep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 设置当前值</span></span><br><span class="line">        self.slider.setValue(<span class="number">18</span>)</span><br><span class="line">        <span class="comment"># 设置刻度的位置，刻度在下方</span></span><br><span class="line">        self.slider.setTickPosition(QSlider.TicksBelow)</span><br><span class="line">        <span class="comment"># 设置刻度的间隔</span></span><br><span class="line">        self.slider.setTickInterval(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">        self.slider.valueChanged.connect(self.valueChange)</span><br><span class="line"></span><br><span class="line">        self.slider1 = QSlider(Qt.Vertical)</span><br><span class="line">        layout.addWidget(self.slider1)</span><br><span class="line">        <span class="comment"># 设置最小值</span></span><br><span class="line">        self.slider1.setMinimum(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 设置最大值</span></span><br><span class="line">        self.slider1.setMaximum(<span class="number">60</span>)</span><br><span class="line">        <span class="comment"># 步长</span></span><br><span class="line">        self.slider1.setSingleStep(<span class="number">5</span>) <span class="comment"># not clear!</span></span><br><span class="line">        <span class="comment"># 设置当前值</span></span><br><span class="line">        self.slider1.setValue(<span class="number">30</span>) </span><br><span class="line">        <span class="comment"># 设置刻度的位置，刻度在下方</span></span><br><span class="line">        self.slider1.setTickPosition(QSlider.TicksLeft)</span><br><span class="line">        <span class="comment"># 设置刻度的间隔</span></span><br><span class="line">        self.slider1.setTickInterval(<span class="number">2</span>)</span><br><span class="line">        self.slider1.valueChanged.connect(self.valueChange)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valueChange</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'当前值：%s'</span> % self.sender().value())</span><br><span class="line">        size = self.sender().value()</span><br><span class="line">        self.label.setFont(QFont(<span class="string">'Arial'</span>,size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QSliderDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（二）</title>
    <link href="http://yoursite.com/2019/01/23/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/23/PyQt5-Python-实战课程（二）/</id>
    <published>2019-01-23T14:07:29.000Z</published>
    <updated>2019-01-24T13:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="Qt-Designer实战-code"><a href="#Qt-Designer实战-code" class="headerlink" title="Qt Designer实战 code"></a>Qt Designer实战 <a href="https://github.com/Captainzj/PyQt5_Practice/tree/master/src/Chapter-2" target="_blank" rel="noopener"><code>code</code></a></h2><h3 id="安装和配置Qt-Designer"><a href="#安装和配置Qt-Designer" class="headerlink" title="安装和配置Qt Designer"></a>安装和配置Qt Designer</h3><ul><li>Anaconda默认已安装Designer.app ，其路径:<code>/Users/Captain/anaconda3/bin/Designer.app</code></li><li><p>配置PyCharm-External Tools: <code>打开PyCharm -&gt;&gt; Command + , -&gt;&gt; External Tools -&gt;&gt; ＋ -&gt;&gt; 如下图配置(Program:/Users/Captain/anaconda3/bin/Designer.app) -&gt;&gt; ok</code></p>   <center><br>      <img src="/2019/01/23/PyQt5-Python-实战课程（二）/ExternalTools-QTDesigner.png" width="500"><br>   </center><ul><li><p>使用External Tools<br>方式一： 选中project folder右键 -&gt;&gt; External Tools -&gt;&gt; QTDesigner</p><center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（二）/Use_ExternalTools1.png" width="500"><br></center><p>方式二：选中菜单栏中Tools -&gt;&gt; External Tools -&gt;&gt; QTDesigner</p><center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（二）/Use_ExternalTools2.png" width="500"><br></center></li></ul></li></ul><h3 id="Qt-Designer快速入门"><a href="#Qt-Designer快速入门" class="headerlink" title="Qt Designer快速入门"></a>Qt Designer快速入门</h3><p>了解Designer各窗口的基本功能</p><h3 id="将-ui文件转换为-py文件"><a href="#将-ui文件转换为-py文件" class="headerlink" title="将.ui文件转换为.py文件"></a>将.ui文件转换为.py文件</h3><p>方式一: <code>python -m PyQt5.uic.pyuic demo.ui -o demo.py</code><br>方式二: <code>pyuic5 demo.ui -o demo.py</code>(其中 <code>/Users/Captain/anaconda3/pkgs/pyqt-5.9.2-py37h655552a_2/bin/pyuic5</code>)</p><ul><li>为避免重复使用命令行，可借助’PyCharm - External Tools’.（配置方式可参照<a href="#配置PyCharm-External Tools">配置PyCharm-External Tools</a>）配置参数如下.（此处使用方式一）<ul><li><code>Program:/Users/Captain/anaconda3/bin/python.app</code></li><li><code>Arguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code></li><li><code>Working directory: $FileDir$</code><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/PyUIC.png" width="500"><br></center></li></ul></li></ul><h3 id="在QtDesigner中使用水平布局"><a href="#在QtDesigner中使用水平布局" class="headerlink" title="在QtDesigner中使用水平布局"></a>在QtDesigner中使用水平布局</h3><p>方式一：当MainWindow中已放置的控件时，选中需要完成水平布局的控件，<code>右键 -&gt;&gt; Lay out -&gt;&gt; Lay Out Horizontally</code> 或者 选中后使用shortcut（此处为<code>Command + 1</code>）</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/LayoutHorizontally.png" width="500"><br></center><br>方式二： 先放置”水平布局控件”，后于该控件中添加子控件<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/LayoutHorizontally2.png" style="zoom:30%"><br></center><p>将保存后的.ui文件转换为.py文件后，可运行如下代码(<code>RunMainWin_HorizontalLayout.py</code>)，显示界面<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> MainWin_HorizontalLayout  <span class="comment"># 此处IDE可能会report warning，解决方案：选中所在的folder -&gt;&gt; 右键 -&gt;&gt; Mark Directory as -&gt;&gt; Sources Root </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    mainWindow = QMainWindow()</span><br><span class="line">    ui = MainWin_HorizontalLayout.Ui_MainWindow()</span><br><span class="line">    <span class="comment"># 向主窗口上添加控件</span></span><br><span class="line">    ui.setupUi(mainWindow)</span><br><span class="line">    mainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><h3 id="在Qt-Designer中使用垂直布局"><a href="#在Qt-Designer中使用垂直布局" class="headerlink" title="在Qt Designer中使用垂直布局"></a>在Qt Designer中使用垂直布局</h3><p>与 <a href="#在QtDesigner中使用水平布局">使用水平布局</a> 方式一致，不再赘述</p><h3 id="在Qt-Designer中同时使用水平布局和垂直布局"><a href="#在Qt-Designer中同时使用水平布局和垂直布局" class="headerlink" title="在Qt Designer中同时使用水平布局和垂直布局"></a>在Qt Designer中同时使用水平布局和垂直布局</h3><p>嵌套使用 （下图中，先做两次水平布局，再做一次垂直布局）</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinVHLayout.png" width="500"><br></center><h3 id="在Qt-Designer中使用栅格布局"><a href="#在Qt-Designer中使用栅格布局" class="headerlink" title="在Qt Designer中使用栅格布局"></a>在Qt Designer中使用栅格布局</h3><p>效果展示</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinGridLayout.png" width="500"><br></center><br>### 向栅格布局拖动控件<br>先添加”Grid Layout”控件，再添加子控件.<br>### 在Qt Designer中使用表单布局<br>效果展示<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinFormLayout.png" width="500"><br></center><br>### 在容器中完成布局<br>使用方式同上，可用的容器如下所示<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/Containers.png" style="zoom:80%"><br></center><br>### 在Qt Designer中使用绝对布局<br>绝对布局，即可手动调整控件位置，不受specified Layout style的影响。<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinAbsoluteLayout.png" width="500"><br></center><br>### 在Qt Designer中使用分割线与间隔<br>- 间隔（Spacer）：Horizontal Spacer、Vertical Spacer<br>- 分割线（belong to ‘Display Widgets’）：Horizontal Line、Vertical Line<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSpacerLine.png" width="500"><br></center><h3 id="控件尺寸的最大值和最小值"><a href="#控件尺寸的最大值和最小值" class="headerlink" title="控件尺寸的最大值和最小值"></a>控件尺寸的最大值和最小值</h3><p>选中控件，Property Editor -&gt;&gt; minimumSize/ maximumSize</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinMaxMinSize.png" style="zoom:80%"><br></center><h3 id="尺寸策略"><a href="#尺寸策略" class="headerlink" title="尺寸策略"></a>尺寸策略</h3><ul><li>Property Editor -&gt;&gt; sizePolicy（尺寸策略）<ul><li>Horizontal Policy（水平策略）、Vertical Policy（垂直策略）<ul><li>Fixed（常用）、Minimum、Maximum、Preferred、MinimumExpanding、Expanding（常用）、Ignored</li></ul></li><li>Horizontal Stretch（水平伸展）、Vertical Stretch（垂直伸展）<ul><li>Numeric（数值属性）</li></ul></li></ul></li></ul><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSizePolicy.png" width="500"><br></center><ul><li>sizeHint（期望尺寸）：对于大多数控件来说，sizeHint的值是只读的<ul><li>读取期望尺寸 <ul><li><code>self.pushButton.sizeHint().width()</code> # QPushButton  width:78</li><li><code>self.pushButton.sizeHint().height()</code> # QPushButton  height:32</li><li><code>self.textEdit.sizeHint().width()</code> # QTextEidt width:256</li><li><code>self.textEdit.sizeHint().height()</code> # QTextEidt height:192</li></ul></li><li>最小期望尺寸<ul><li><code>self.pushButton.minimumsizeHint().width()</code>  # QPushButton  width:78</li><li><code>self.pushButton.minimumsizeHint().height()</code>  # QPushButton  height:32</li><li><code>self.textEdit.minimumsizeHint().width()</code> # QTextEidt width:78</li><li><code>self.textEdit.minimumsizeHint().height()</code> # QTextEidt height:78</li></ul></li></ul></li></ul><h3 id="设置控件之间的伙伴关系"><a href="#设置控件之间的伙伴关系" class="headerlink" title="设置控件之间的伙伴关系"></a>设置控件之间的伙伴关系</h3><p>伙伴关系（关联关系）: 在Windows系统下，使用设置好的热键（如<code>(&amp;A)</code>），可快速聚焦至对应的伙伴控件<br>Operations: Eidt -&gt;&gt; Edit Buddies -&gt;&gt; 对控件进行“连线”，构建伙伴关系</p><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinBuddy.png" width="500"><br></center><h3 id="修改控件的Tab顺序"><a href="#修改控件的Tab顺序" class="headerlink" title="修改控件的Tab顺序"></a>修改控件的Tab顺序</h3><p>Operations: Edit -&gt;&gt; Edit Tab Order -&gt;&gt; 点击序号/右键-&gt;&gt; Tab Order List</p><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinTabOrder.png" width="500"><br></center><h3 id="在Qt-Designer中完成信号与槽的设置"><a href="#在Qt-Designer中完成信号与槽的设置" class="headerlink" title="在Qt Designer中完成信号与槽的设置"></a>在Qt Designer中完成信号与槽的设置</h3><blockquote><p>信号、槽 是Qt的核心机制，也是PyQt的核心机制</p></blockquote><ul><li>信号（signal）：由对象或控制发射出去的消息；可以理解为事件</li><li>槽（slot）：本质上是一个函数或方法；可以理解为事件函数<ul><li>当单击按钮时，按钮就会向外部发送单击的消息，这些发送出去的信号需要一些代码来拦截，这些代码就是槽</li></ul></li><li>What to do？ <ul><li>需要将信号和槽绑定（多对多）</li></ul></li><li>How to do? <ul><li>Operations: Eidt -&gt;&gt; Eidt Signals/Slots -&gt;&gt; 如下操作.<center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot1.png" width="500"><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot2.png" width="500"><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot3.png" width="500"><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot.png" width="500"><br></center></li></ul></li></ul><h3 id="在Qt-Designer中为窗口添加菜单和工具栏"><a href="#在Qt-Designer中为窗口添加菜单和工具栏" class="headerlink" title="在Qt Designer中为窗口添加菜单和工具栏"></a>在Qt Designer中为窗口添加菜单和工具栏</h3><p>Operations: </p><ul><li>编辑菜单栏：在<code>Type Here</code>处依据提示进行编辑即可</li><li>添加工具栏：面板空白处右键 -&gt;&gt; Add Tool Bar<br>移除工具栏：已生成的工具栏空白处右键 -&gt;&gt; remove Toolbar ‘toolBar’<center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinMenuToolbar.png" width="500"><br></center></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（一）</title>
    <link href="http://yoursite.com/2019/01/23/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/23/PyQt5-Python-实战课程（一）/</id>
    <published>2019-01-23T12:24:50.000Z</published>
    <updated>2019-01-24T13:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1-Python"><a href="#1-Python" class="headerlink" title="1. Python"></a>1. Python</h3><p><a href="https://www.anaconda.com/download/#macos" target="_blank" rel="noopener">Anaconda</a> 3<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python --version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python</span></span><br></pre></td></tr></table></figure></p><h3 id="2-PyQt5模块"><a href="#2-PyQt5模块" class="headerlink" title="2. PyQt5模块"></a>2. PyQt5模块</h3><p>Anaconda 默认已安装该模块，若需要手动安装，操作如下:（如果本机安装了多个python环境，要分清pip到底属于哪一个Python环境）<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyqt5</span><br><span class="line">pip uninstall pyqt5</span><br></pre></td></tr></table></figure></p><p>在Python的REPL环境输入<code>import PyQt5</code>, 如果没有报错，说明PyQt5安装成功<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> PyQt5</span><br></pre></td></tr></table></figure></p><h3 id="3-PyCharm"><a href="#3-PyCharm" class="headerlink" title="3. PyCharm"></a>3. PyCharm</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/23/PyQt5-Python-实战课程（一）/PyCharm_Login.png" alt="PyCharm_Login" title="">                </div>                <div class="image-caption">PyCharm_Login</div>            </figure><h2 id="开发第一个基于PyQt5的桌面应用"><a href="#开发第一个基于PyQt5的桌面应用" class="headerlink" title="开发第一个基于PyQt5的桌面应用"></a>开发第一个基于PyQt5的桌面应用</h2><p>必须使用两个类: QApplication和QWidget。都在PyQt5.QtWidgets.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建QApplication类的实例</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># 创建一个窗口</span></span><br><span class="line">    w = QWidget()</span><br><span class="line">    <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">    w.resize(<span class="number">400</span>,<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 移动窗口</span></span><br><span class="line">    w.move(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">    <span class="comment"># 设置窗口的标题</span></span><br><span class="line">    w.setWindowTitle(<span class="string">'第一个基于PyQt5的桌面应用'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示窗口</span></span><br><span class="line">    w.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进入程序的主循环，并通过exit函数确保主循环安全结束</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程</title>
    <link href="http://yoursite.com/2019/01/23/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/01/23/PyQt5-Python-实战课程/</id>
    <published>2019-01-23T10:24:50.000Z</published>
    <updated>2019-02-15T15:48:26.411Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><p>声明：此系列笔记《PyQt5(Python)实战课程》参考于某网络平台课程，仅作个人学习整理之用。</p><h3 id="PyQt5-Python-实战课程（一）"><a href="#PyQt5-Python-实战课程（一）" class="headerlink" title="PyQt5(Python)实战课程（一）"></a><a href="https://captainzj.github.io/2019/01/23/PyQt5-Python-实战课程（一）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（一）</a></h3><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><ol><li>Python</li><li>PyQt5模块</li><li>PyCharm</li></ol><h4 id="开发第一个基于PyQt5的桌面应用"><a href="#开发第一个基于PyQt5的桌面应用" class="headerlink" title="开发第一个基于PyQt5的桌面应用"></a>开发第一个基于PyQt5的桌面应用</h4><h3 id="PyQt5-Python-实战课程（二）"><a href="#PyQt5-Python-实战课程（二）" class="headerlink" title="PyQt5(Python)实战课程（二）"></a><a href="https://captainzj.github.io/2019/01/23/PyQt5-Python-实战课程（二）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（二）</a></h3><h4 id="Qt-Designer实战"><a href="#Qt-Designer实战" class="headerlink" title="Qt Designer实战"></a>Qt Designer实战</h4><ol><li>安装和配置Qt Designer</li><li>Qt Designer快速入门</li><li>将.ui文件转换为.py文件</li><li>在QtDesigner中使用水平布局</li><li>在Qt Designer中使用垂直布局</li><li>在Qt Designer中同时使用水平布局和垂直布局</li><li>在Qt Designer中使用栅格布局</li><li>控件尺寸的最大值和最小值</li><li>尺寸策略</li><li>设置控件之间的伙伴关系</li><li>修改控件的Tab顺序</li><li>在Qt Designer中完成信号与槽的设置</li><li>在Qt Designer中为窗口添加菜单和工具栏</li></ol><h3 id="PyQt5-Python-实战课程（三）"><a href="#PyQt5-Python-实战课程（三）" class="headerlink" title="PyQt5(Python)实战课程（三）"></a><a href="https://captainzj.github.io/2019/01/24/PyQt5-Python-实战课程（三）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（三）</a></h3><h4 id="基本窗口控件"><a href="#基本窗口控件" class="headerlink" title="基本窗口控件"></a>基本窗口控件</h4><ol><li>创建主窗口</li><li>让主窗口居中显示</li><li>退出应用程序</li><li>屏幕坐标系</li><li>设置窗口和应用程序图标</li><li>为控件添加提示消息</li></ol><h4 id="QLabel控件"><a href="#QLabel控件" class="headerlink" title="QLabel控件"></a>QLabel控件</h4><ol><li>QLabel控件的基本用法</li><li>QLabel与伙伴控件</li></ol><h4 id="QLineEdit控件"><a href="#QLineEdit控件" class="headerlink" title="QLineEdit控件"></a>QLineEdit控件</h4><ol><li>QLineEdit控件与回显模式（EchoMode）</li><li>限制QLineEdit控件的输入（校验器）</li><li>使用掩码限制QLineEdit控件的输入</li><li>QLineEdit控件综合案例</li></ol><h4 id="QTextEdit控件"><a href="#QTextEdit控件" class="headerlink" title="QTextEdit控件"></a>QTextEdit控件</h4><p>使用QTextEdit控件输入多行文本</p><h4 id="Button控件"><a href="#Button控件" class="headerlink" title="Button控件"></a>Button控件</h4><ol><li>按钮控件（QPushButton）</li><li>单选按钮控件（QRadioButton）</li><li>复选框控件（QCheckBox）</li></ol><h4 id="下拉列表控件（QComboBox）"><a href="#下拉列表控件（QComboBox）" class="headerlink" title="下拉列表控件（QComboBox）"></a>下拉列表控件（QComboBox）</h4><h4 id="计数器控件（QSpinBox）"><a href="#计数器控件（QSpinBox）" class="headerlink" title="计数器控件（QSpinBox）"></a>计数器控件（QSpinBox）</h4><h4 id="滑块控件（QSlider）"><a href="#滑块控件（QSlider）" class="headerlink" title="滑块控件（QSlider）"></a>滑块控件（QSlider）</h4><h3 id="PyQt5-Python-实战课程（四）"><a href="#PyQt5-Python-实战课程（四）" class="headerlink" title="PyQt5(Python)实战课程（四）"></a><a href="https://captainzj.github.io/2019/01/26/PyQt5-Python-实战课程（四）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（四）</a></h3><h4 id="对话框-QDialog"><a href="#对话框-QDialog" class="headerlink" title="对话框 QDialog"></a>对话框 QDialog</h4><ol><li>使用QDialog显示通用对话框</li><li>显示不同类型的消息对话框</li><li>用于输入列表、文本和数字的输入对话框</li><li>字体对话框（QFontDialog）</li><li>颜色对话框（QColorDialog）</li><li>文件对话框（QFileDialog）</li></ol><h3 id="PyQt5-Python-实战课程（五）"><a href="#PyQt5-Python-实战课程（五）" class="headerlink" title="PyQt5(Python)实战课程（五）"></a><a href="https://captainzj.github.io/2019/01/26/PyQt5-Python-实战课程（五）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（五）</a></h3><h4 id="绘图API"><a href="#绘图API" class="headerlink" title="绘图API"></a>绘图API</h4><ol><li>在窗口上绘制直线</li><li>用像素点绘制正弦曲线</li><li>绘制不同类型的直线</li><li>绘制各种图形</li><li>用画刷填充图形区域</li></ol><h3 id="PyQt5-Python-实战课程（六）"><a href="#PyQt5-Python-实战课程（六）" class="headerlink" title="PyQt5(Python)实战课程（六）"></a><a href="https://captainzj.github.io/2019/01/27/PyQt5-Python-实战课程（六）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（六）</a></h3><h4 id="拖拽与剪贴板"><a href="#拖拽与剪贴板" class="headerlink" title="拖拽与剪贴板"></a>拖拽与剪贴板</h4><ol><li>让控件支持拖拽动作</li><li>使用剪贴板</li></ol><h4 id="日历和时间"><a href="#日历和时间" class="headerlink" title="日历和时间"></a>日历和时间</h4><ol><li>日历控件</li><li>设置不同风格的日期和时间</li><li>日期和时间控件的高级操作</li></ol><h4 id="菜单、工具栏和状态栏"><a href="#菜单、工具栏和状态栏" class="headerlink" title="菜单、工具栏和状态栏"></a>菜单、工具栏和状态栏</h4><ol><li>创建和使用菜单</li><li>创建和使用工具栏</li><li>创建和使用状态栏</li></ol><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><ol><li>使用打印机</li><li>显示打印对话框</li><li>堆栈窗口控件（QStackedWidget）</li><li>停靠控件（QDockWidget）</li><li>容纳多文档的窗口</li><li>滚动条控件（QScrollBar）</li></ol><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><ol><li>动态显示当前时间（QTimer）</li><li>让窗口定时关闭</li><li>使用线程类（QThread）编写计数器</li></ol><h3 id="PyQt5-Python-实战课程（七）"><a href="#PyQt5-Python-实战课程（七）" class="headerlink" title="PyQt5(Python)实战课程（七）"></a><a href="https://captainzj.github.io/2019/01/28/PyQt5-Python-实战课程（七）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（七）</a></h3><h4 id="表格与树🌲"><a href="#表格与树🌲" class="headerlink" title="表格与树🌲"></a>表格与树🌲</h4><ol><li>显示二维表数据（QTableView控件）</li><li>扩展的列表控件（QListWidget）</li><li>增加、修改和删除树🌲控件中的节点</li><li>QTreeView控件与系统定制模式</li></ol><h3 id="PyQt5-Python-实战课程（八）"><a href="#PyQt5-Python-实战课程（八）" class="headerlink" title="PyQt5(Python)实战课程（八）"></a><a href="https://captainzj.github.io/2019/01/31/PyQt5-Python-实战课程（八）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（八）</a></h3><h4 id="PyQt5与Web交互"><a href="#PyQt5与Web交互" class="headerlink" title="PyQt5与Web交互"></a>PyQt5与Web交互</h4><ol><li>用Web浏览器控件（QWebEngineView）显示网页</li><li>显示嵌入Web页面</li><li>PyQt5调用JavaScript代码，并返回值</li><li>JavaScript调用Python API计算阶乘</li></ol><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ol><li>绝对布局</li><li>水平盒布局（QHBoxLayout）</li><li>设置控件的对齐方式</li><li>垂直盒布局</li><li>设置布局的伸缩量</li><li>让按钮永远在窗口的右下角</li><li>栅格布局：用循环方式实现计算器UI</li><li>栅格布局：进行表单UI设计</li><li>表单布局</li><li>拖动控件之间的边界（QSplitter）</li></ol><h4 id="信号（Signal）与槽（Slot）"><a href="#信号（Signal）与槽（Slot）" class="headerlink" title="信号（Signal）与槽（Slot）"></a>信号（Signal）与槽（Slot）</h4><ol><li>信号与槽基础</li><li>自定义信号实现对象之间的通信</li><li>可以传递多个参数的信号</li><li>为类添加多个信号（重载形式的信号）</li><li>信号和槽的N对N连接与断开连接</li><li>为窗口添加新号</li><li>多线程更新UI数据</li><li>信号与槽自动连接</li><li>使用Lambda表达式为槽传递参数</li><li>使用Partial对象为槽传递参数</li><li>Override（覆盖）槽函数</li><li>多窗口交互（1）：不使用信号和槽</li><li>多窗口交互（2）：使用信号和槽</li></ol><h3 id="PyQt5-Python-实战课程（九）"><a href="#PyQt5-Python-实战课程（九）" class="headerlink" title="PyQt5(Python)实战课程（九）"></a><a href="https://captainzj.github.io/2019/02/01/PyQt5-Python-实战课程（九）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（九）</a></h3><h4 id="窗口、绘图与特效"><a href="#窗口、绘图与特效" class="headerlink" title="窗口、绘图与特效"></a>窗口、绘图与特效</h4><ol><li>设置窗口风格</li><li>设置窗口样式</li><li>用代码设置窗口的最大化和最小化</li><li>项目实战：实现绘图应用</li><li>QSS基础</li><li>使用QSS选择器设置控件样式</li><li>QSS子控件选择器</li><li>QDarkStyleSheet样式</li><li>3种设置背景色和背景图片的方式</li><li>实现不规则窗口（异形窗口）</li><li>移动和关闭不规则窗口（异形窗口）</li><li>实现异形窗口动画效果</li><li>装载gif动画文件</li><li>使用QSS为标签和按钮添加背景图</li><li>缩放图片</li><li>创建透明和半透明窗口</li><li>装载QSS文件</li><li>用动画效果改变窗口的尺寸</li><li>用动画效果–不同速度移动窗口</li></ol><h4 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h4><ol><li>用PyInstaller打包PyQt5</li><li>操作SQLite数据库</li><li>使用可视化的方式对SQLite数据库进行增、删、改、查操作</li><li>分页显示数据</li><li>使用PyQtGraph进行数据可视化</li><li>项目实战：天气信息查询</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch中文网_归档</title>
    <link href="http://yoursite.com/2019/01/22/PyTorch%E4%B8%AD%E6%96%87%E7%BD%91-%E5%BD%92%E6%A1%A3/"/>
    <id>http://yoursite.com/2019/01/22/PyTorch中文网-归档/</id>
    <published>2019-01-22T15:54:53.000Z</published>
    <updated>2019-01-23T08:15:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h4 id="PyTorch-版本"><a href="#PyTorch-版本" class="headerlink" title="PyTorch 版本"></a>PyTorch 版本</h4><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-first-time-user/" target="_blank" rel="noopener">Pytorch 初体验（一个优雅的框架）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/why-ai-and-machine-learning-researchers-are-beginning-to-embrace-pytorch/" target="_blank" rel="noopener">为什么机器学习研究者都投入了 PyTorch 的怀抱？</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-chinese-doc/" target="_blank" rel="noopener">PyTorch 中文文档发布</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-0-2/" target="_blank" rel="noopener">PyTorch 推出0.2版本：加入分布式机器学习功能</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-0-3-0-release/" target="_blank" rel="noopener">PyTorch 0.3.0 发布，性能大幅提升，支持 Cuda 9，修复众多 bugs</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-0-4-0-migration-guide/" target="_blank" rel="noopener">PyTorch 0.4.0 迁移指南</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-0-4-1-release/" target="_blank" rel="noopener">PyTorch 0.4.1 发布</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-1-0/" target="_blank" rel="noopener">PyTorch 1.0 正式版发布（包含更新的安装命令）</a></strong></li></ul><h4 id="PyTorch-教程"><a href="#PyTorch-教程" class="headerlink" title="PyTorch 教程"></a>PyTorch 教程</h4><h5 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-yolov2/" target="_blank" rel="noopener">PyTorch 实现 YOLOv2</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/yolo3-in-pytorch-1/" target="_blank" rel="noopener">从头开始用 PyTorch 实现 YOLO (v3) 教程（一）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/yolo3-in-pytorch-2/" target="_blank" rel="noopener">从头开始用 PyTorch 实现 YOLO (v3) 教程（二）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/yolo3-in-pytorch-3/" target="_blank" rel="noopener">从头开始用 PyTorch 实现 YOLO (v3) 教程（三）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/yolo3-in-pytorch-4/" target="_blank" rel="noopener">从头开始用 PyTorch 实现 YOLO (v3) 教程（四）</a></strong></li></ul><h5 id="Flask系列"><a href="#Flask系列" class="headerlink" title="Flask系列"></a>Flask系列</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/use-flask-to-build-pytorch-server/" target="_blank" rel="noopener">利用 Flask 搭建 PyTorch 深度学习服务</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/fastai-tutorial-1-installation/" target="_blank" rel="noopener">fastai 系列教程（一）- 安装</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/fastai-tutorial-2-overview-mnist/" target="_blank" rel="noopener">fastai 系列教程（二）- 快速入门 MNIST 示例</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/fastai-tutorial-3-cifar10/" target="_blank" rel="noopener">fastai 系列教程（三）- CIFAR10 示例</a></strong></li></ul><h5 id="源码浅析"><a href="#源码浅析" class="headerlink" title="源码浅析"></a>源码浅析</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/how-to-read-pytorch-source-code/" target="_blank" rel="noopener">如何有效地阅读 PyTorch 的源代码？</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-source-code-reading-network/" target="_blank" rel="noopener">Pytorch 源码与运行原理浅析 - 网络篇</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-source-python-layer/" target="_blank" rel="noopener">PyTorch 源码分析：Python 层</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-source-codes-1/" target="_blank" rel="noopener">PyTorch 源码浅析（一）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-source-codes-2/" target="_blank" rel="noopener">PyTorch 源码浅析（二）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-source-codes-3/" target="_blank" rel="noopener">PyTorch 源码浅析（三）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-source-codes-4/" target="_blank" rel="noopener">PyTorch 源码浅析（四）</a></strong></li></ul><h5 id="10分钟快速入门"><a href="#10分钟快速入门" class="headerlink" title="10分钟快速入门"></a>10分钟快速入门</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-0/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (0) - 基础</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-1/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (1) - 线性回归</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-2/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (2) - 逻辑回归</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-3/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (3) - 神经网络</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-4/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (4) - CNN</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-5/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (5) - RNN</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-6/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (6) - LSTM for MNIST</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-7/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (7) - Word Embedding</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-8/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (8) - Word Prediction</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-9/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (9) - LSTM 词性判断</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/10-minute-pytorch-10/" target="_blank" rel="noopener">10分钟快速入门 PyTorch (10) - GAN</a></strong></li></ul><h5 id="PyTorch-入门"><a href="#PyTorch-入门" class="headerlink" title="PyTorch 入门"></a>PyTorch 入门</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-60-minuites/" target="_blank" rel="noopener">PyTorch深度学习：60分钟入门</a></strong></li></ul><h5 id="PyTorch-学习笔记"><a href="#PyTorch-学习笔记" class="headerlink" title="PyTorch 学习笔记"></a>PyTorch 学习笔记</h5><ul><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-note1-what-is-pytorch/" target="_blank" rel="noopener">PyTorch 学习笔记（一）：什么是 PyTorch</a></strong></li><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-note2-gradient/" target="_blank" rel="noopener">PyTorch 学习笔记（二）：关于Gradient</a></strong></li><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-note3-autograd/" target="_blank" rel="noopener">PyTorch 学习笔记（三）：自动求导</a></strong></li><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-note4-input-data-pipeline/" target="_blank" rel="noopener">PyTorch 学习笔记（四）：自定义 Dataset 和输入流</a></strong></li><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-note5-save-and-restore-models/" target="_blank" rel="noopener">PyTorch 学习笔记（五）：存储和恢复模型并查看参数</a></strong></li><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-note6-pytorch-hook-and-pytorch-backward/" target="_blank" rel="noopener">PyTorch 学习笔记（六）：PyTorch hook 和关于 PyTorch backward 过程的理解</a></strong></li></ul><h5 id="PyTorch-细节详解"><a href="#PyTorch-细节详解" class="headerlink" title="PyTorch 细节详解"></a>PyTorch 细节详解</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-how-to-write-your-own-module/" target="_blank" rel="noopener">PyTorch 如何自定义 Module</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-learning-rate-decay/" target="_blank" rel="noopener">如何在 PyTorch 中设定学习率衰减（learning rate decay）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/when-should-we-set-cudnn-benchmark-to-true/" target="_blank" rel="noopener">什么情况下应该设置 cudnn.benchmark = True？</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-backward/" target="_blank" rel="noopener">PyTorch 中 backward() 详解</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-custom-dataset-examples/" target="_blank" rel="noopener">PyTorch 中自定义数据集的读取方法小结</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-tensor-broadcasting/" target="_blank" rel="noopener">PyTorch 中 Tensor Broadcasting 详解</a></strong></li></ul><h5 id="莫烦-PyTorch"><a href="#莫烦-PyTorch" class="headerlink" title="莫烦 PyTorch"></a>莫烦 PyTorch</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/1-1-why-pytorch/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 1.1 - Why PyTorch?</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/1-2-install-pytorch/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 1.2 - 安装 PyTorch</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/2-1-torch-vs-numpy/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 2.1 - Torch vs Numpy</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/2-2-variable/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 2.2 - 变量 (Variable)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/2-3-activation/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 2.3 - 激励函数 (Activation)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/3-1-regression/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 3.1 - 关系拟合 (回归 Regression)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/3-2-classification/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 3.2 - 区分类型 (分类 Classification)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/3-3-sequential-cnn-model/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 3.3 - 快速搭建回归神经网络</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/3-4-save-and-restore-model/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 3.4 - 保存和恢复模型</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/3-5-data-loader/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程] 3.5 - 数据读取 (Data Loader)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/3-6-optimizer/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]3.6 - 优化器 (Optimizer)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/4-1-cnn/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]4.1 - CNN 卷积神经网络</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/4-2-rnn-for-classification/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]4.2 - RNN 循环神经网络 (分类 Classification)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/4-3-rnn-for-regression/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]4.3 - RNN 循环神经网络 (回归 Regression)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/4-4-autoencoder/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]4.4 - AutoEncoder (自编码/非监督学习)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/4-5-dqn-reinforcement-learning/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]4.5 - DQN 强化学习 (Reinforcement Learning)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/4-6-gan-generative-adversarial-nets/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]4.6 - GAN (Generative Adversarial Nets 生成对抗网络)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/5-1-why-dynamic/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]5.1 - 为什么 Torch 是动态的</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/5-2-gpu-in-pytorch/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]5.2 - GPU 加速运算</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/5-3-dropout-to-prevent-overfitting/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]5.3 - Dropout 防止过拟合</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/5-4-batch-normalization/" target="_blank" rel="noopener">[莫烦 PyTorch 系列教程]5.4 - Batch Normalization 批标准化</a></strong></li></ul><h5 id="PyTorch-工具"><a href="#PyTorch-工具" class="headerlink" title="PyTorch 工具"></a>PyTorch 工具</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/using-visdom-for-visualization-in-pytorch/" target="_blank" rel="noopener">使用 Visdom 在 PyTorch 中进行可视化</a></strong></li><li style="list-style: none"><input type="checkbox" checked> <strong><a href="https://www.pytorchtutorial.com/pytorch-visdom/" target="_blank" rel="noopener">PyTorch 可视化工具 Visdom 介绍</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-tensorboardx/" target="_blank" rel="noopener">PyTorch 使用 TensorboardX 进行网络可视化</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-docker/" target="_blank" rel="noopener">PyTorch 的 Docker 镜像</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-ignite/" target="_blank" rel="noopener">PyTorch 的高抽象库 Ignite 简介</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/distiller-compress-pytorch-model/" target="_blank" rel="noopener">用 Distiller 压缩 PyTorch 模型</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-to-caffe/" target="_blank" rel="noopener">PyTorch 到 Caffe 的模型转换工具</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/graphpipe-deploy-pytorch-using-tensorflow/" target="_blank" rel="noopener">GraphPipe：在 TensorFlow 部署 PyTorch 模型</a></strong></li></ul><h5 id="教学课程"><a href="#教学课程" class="headerlink" title="教学课程"></a>教学课程</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/cs230-pytorch/" target="_blank" rel="noopener">吴恩达斯坦福 CS230 深度学习课程（含PyTorch部分）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/hongkong-pytorch-in-four-days/" target="_blank" rel="noopener">香港科技大学 PyTorch 四日速成教程</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/deep-learning-with-pytorch-video/" target="_blank" rel="noopener">爱可可老师推荐的 PyTorch 深度学习视频教程下载 [无需梯子]</a></strong></li></ul><h5 id="论文复现"><a href="#论文复现" class="headerlink" title="论文复现"></a>论文复现</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-wavenet/" target="_blank" rel="noopener">PyTorch 实现 Wavenet</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-dqn/" target="_blank" rel="noopener">PyTorch DQN（深度Q网络）示例</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-feature-pyramid-networks/" target="_blank" rel="noopener">PyTorch 实现特征金字塔网络 Feature Pyramid Network (FPN)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-mask-rcnn/" target="_blank" rel="noopener">PyTorch 实现 Mask-RCNN</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/deepdream-pytorch/" target="_blank" rel="noopener">DeepDream 的 PyTorch 实现</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-sequence-model-and-lstm-networks/" target="_blank" rel="noopener">PyTorch 实现序列模型和基于LSTM的循环神经网络</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-improved-training-of-wasserstein-gans-wgan-gp/" target="_blank" rel="noopener">PyTorch 实现论文 “Improved Training of Wasserstein GANs” (WGAN-GP)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-lrgan/" target="_blank" rel="noopener">PyTorch 实现 LR-GAN</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-policy-gradient/" target="_blank" rel="noopener">PyTorch 实现各种 Policy Gradient 算法 (REINFORCE, NPG, TRPO, PPO)</a></strong></li></ul><h5 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-sample-gan/" target="_blank" rel="noopener">用 PyTorch 实现一个基本 GAN 网络学习正态分布</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-installation-commands/" target="_blank" rel="noopener">PyTorch 官方安装命令合集</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-for-numpy-users/" target="_blank" rel="noopener">面向 Numpy 用户的 PyTorch 速查表</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/aws-ami-pytorch/" target="_blank" rel="noopener">AWS 深度学习 AMI 现在支持 PyTorch 部署</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/50-lines-of-codes-for-gan/" target="_blank" rel="noopener">50行代码实现GAN（PyTorch）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/use-pytorch-on-mac-with-egpu-nvidia-titan-xp/" target="_blank" rel="noopener">在 Mac OS 上搭配外置 eGPU (NVIDIA Titan XP) 安装和使用 PyTorch</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-large-batches-multi-gpu-and-distributed-training/" target="_blank" rel="noopener">PyTorch 大批量数据在单个或多个 GPU 训练指南</a></strong></li></ul><h4 id="PyTorch-项目"><a href="#PyTorch-项目" class="headerlink" title="PyTorch 项目"></a>PyTorch 项目</h4><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/ios-neural-style-transfer-using-pytorch-and-coreml/" target="_blank" rel="noopener">在 iOS 上用 PyTorch 和 CoreML 实现图像风格迁移 (Neural Style Transfer)</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/augmentations-faster-than-torchvision/" target="_blank" rel="noopener">用 OpenCV 实现比 Torchvision 更快的图像增广（Augmentations）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/cvpr-ntire-2018-image-super-resolution/" target="_blank" rel="noopener">CVPR NTIRE 2018 超分辨比赛第一名 作者开源 PyTorch 实现</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/github-nlp-with-pytorch/" target="_blank" rel="noopener">Github 上 Star 过千的 NLP 相关项目</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-retinanet/" target="_blank" rel="noopener">PyTorch 实现 RetinaNet 目标检测</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-opennmt/" target="_blank" rel="noopener">用 PyTorch 实现 OpenNMT 翻译系统</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-1-0-ssd/" target="_blank" rel="noopener">用 PyTorch 1.0 实现快速高效的 SSD，提供预训练模型</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-1-0-faster-r-cnn-mask-r-cnn/" target="_blank" rel="noopener">官方 PyTorch 1.0 实现 Faster R-CNN 和 Mask R-CNN</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-image-dehazing/" target="_blank" rel="noopener">PyTorch 实现 AOD-Net 图片去雾</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/nn_tools/" target="_blank" rel="noopener">NN-Tools：神经网络工具集（转换/构建/分析器）</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/everybody-dance-now/" target="_blank" rel="noopener">人人皆为舞王 - Everybody Dance Now 的 PyTorch 实现</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/kaggle-pytorch-starter-kit/" target="_blank" rel="noopener">Kaggle 比赛的 PyTorch Starter Kit</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/batch-norm-fusion-pytorch/" target="_blank" rel="noopener">模型推理加速方法 Batch Norm Fusion 的 PyTorch 实现，可提速 30%</a></strong></li></ul><h5 id="PyTorch-应用"><a href="#PyTorch-应用" class="headerlink" title="PyTorch 应用"></a>PyTorch 应用</h5><ul><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-rnn-for-name-classification/" target="_blank" rel="noopener">PyTorch 实现循环神经网络判断人名属于哪个国家的常用名</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-one-shot-learning/" target="_blank" rel="noopener">PyTorch 实现孪生网络识别面部相似度</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-cnn-image-classification/" target="_blank" rel="noopener">PyTorch 实战：使用卷积神经网络对照片进行分类</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-rnn-name-classification/" target="_blank" rel="noopener">Pytorch实战：使用 RNN 对姓名进行分类</a></strong></li><li style="list-style: none"><input type="checkbox"> <strong><a href="https://www.pytorchtutorial.com/pytorch-style-transfer/" target="_blank" rel="noopener">PyTorch 实现风格迁移 (style transfer)</a></strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch 学习笔记</title>
    <link href="http://yoursite.com/2019/01/22/PyTorch-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/01/22/PyTorch-学习笔记/</id>
    <published>2019-01-22T07:44:19.000Z</published>
    <updated>2019-01-23T08:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="Catalogue"><a href="#Catalogue" class="headerlink" title="Catalogue"></a>Catalogue</h2><p><strong><a href="https://www.pytorchtutorial.com/pytorch-note1-what-is-pytorch/" target="_blank" rel="noopener">PyTorch 学习笔记（一）：什么是 PyTorch</a></strong><br><strong><a href="https://www.pytorchtutorial.com/pytorch-note2-gradient/" target="_blank" rel="noopener">PyTorch 学习笔记（二）：关于Gradient</a></strong><br><strong><a href="https://www.pytorchtutorial.com/pytorch-note3-autograd/" target="_blank" rel="noopener">PyTorch 学习笔记（三）：自动求导</a></strong><br><strong><a href="https://www.pytorchtutorial.com/pytorch-note4-input-data-pipeline/" target="_blank" rel="noopener">PyTorch 学习笔记（四）：自定义 Dataset 和输入流</a></strong><br><strong><a href="https://www.pytorchtutorial.com/pytorch-note5-save-and-restore-models/" target="_blank" rel="noopener">PyTorch 学习笔记（五）：存储和恢复模型并查看参数</a></strong><br><strong><a href="https://www.pytorchtutorial.com/pytorch-note6-pytorch-hook-and-pytorch-backward/" target="_blank" rel="noopener">PyTorch 学习笔记（六）：PyTorch hook 和关于 PyTorch backward 过程的理解</a></strong></p><h2 id="PyTorch-学习笔记（一）"><a href="#PyTorch-学习笔记（一）" class="headerlink" title="PyTorch 学习笔记（一）"></a>PyTorch 学习笔记（一）</h2><h3 id="如何保存参数"><a href="#如何保存参数" class="headerlink" title="如何保存参数"></a>如何保存参数</h3><p>pytorch中有两种变量类型，一个是Tensor，一个是Variable.</p><blockquote><p><code>Tensor</code>： 就像ndarray一样,一维Tensor叫Vector，二维Tensor叫Matrix，三维及以上称为Tensor<br><code>Variable</code>：是Tensor的一个<code>wrapper</code>，不仅保存了值，而且保存了这个值的creator，需要BP的网络都是Variable参与运算</p></blockquote><h3 id="neural-networks"><a href="#neural-networks" class="headerlink" title="neural networks"></a>neural networks</h3><p>使用torch.nn包中的工具来构建神经网络 需要以下几步：</p><ol><li>定义神经网络的权重,搭建网络结构</li><li>遍历整个数据集进行训练</li><li>将数据输入神经网络</li><li>计算loss</li><li>计算网络权重的梯度</li><li>更新网络权重<ul><li>weight = weight + learning_rate * gradient</li></ul></li></ol><h2 id="PyTorch-学习笔记（二）"><a href="#PyTorch-学习笔记（二）" class="headerlink" title="PyTorch 学习笔记（二）"></a>PyTorch 学习笔记（二）</h2><h3 id="torch-autograd"><a href="#torch-autograd" class="headerlink" title="torch.autograd"></a>torch.autograd</h3><blockquote><p>torch.autograd包可以使模型参数自动计算在优化过程中需要用到的梯度值，降低了实现后向传播代码的复杂度</p></blockquote><ol><li>w1 = Variable(…, requires_grad = True)</li><li>loss.backward() #让模型根据计算图自动计算每个节点的梯度值并根据需求进行保留</li><li>w1.grad.data.zero_() #将grad置零</li></ol><h3 id="torch-optim"><a href="#torch-optim" class="headerlink" title="torch.optim"></a>torch.optim</h3><blockquote><p>如果每个参数的更新都要<code>w1.data.sub_(learning_rate*w1.grad.data)</code> (等价于<code>w1.data -= learning_rate * w1.grad.data</code>)，那就比较头疼了。还好，pytorch为我们提供了torch.optim包，这个包可以简化我们更新参数的操作。</p></blockquote><ol><li>optimzer = torch.optim.Adam(models.parameters(), lr = learning_rate)</li><li>optimzer.step()</li></ol><h3 id="关于-backward"><a href="#关于-backward" class="headerlink" title="关于 backward()"></a>关于 backward()</h3><blockquote><p><a href="https://pytorch.org/docs/stable/autograd.html" target="_blank" rel="noopener">torch.autograd.backward(tensors, grad_tensors=None, retain_graph=None, create_graph=False, grad_variables=None)</a></p></blockquote><p><strong>Parameters:</strong> </p><ul><li><strong>retain_graph</strong> (bool, optional) – If <code>False</code>, the graph used to compute the grad will be <em>freed</em>. Note that in nearly all cases setting this option to <code>True</code> is <em>not needed</em> and often can be worked around in a much more efficient way. Defaults to the value of <code>create_graph</code>.</li></ul><h2 id="PyTorch-学习笔记（三）"><a href="#PyTorch-学习笔记（三）" class="headerlink" title="PyTorch 学习笔记（三）"></a>PyTorch 学习笔记（三）</h2><h3 id="Backward过程中排除子图"><a href="#Backward过程中排除子图" class="headerlink" title="Backward过程中排除子图"></a>Backward过程中排除子图</h3><p>pytorch的BP过程是由一个函数决定的，loss.backward()， 可以看到backward()函数里并没有传要求谁的梯度。那么我们可以大胆猜测，在BP的过程中，pytorch是<code>将所有影响loss的Variable都求了一次梯度</code>。但是有时候，我们并不想求所有Variable的梯度(浪费计算资源)。那就要<code>考虑如何在Backward过程中排除子图</code>（ie.排除没必要的梯度计算）。<br>如何BP过程中排除子图？ Variable的两个参数（<code>requires_grad</code>和<code>volatile挥发性</code>）</p><ul><li><p>requires_grad = False</p><ul><li><p>变量的requires_grad标记的运算就相当于or</p><pre><code>x (x.requires_grad=False) + y (y.requires_grad=False) -&gt;&gt; a (a.requires_grad=False)a (a.requires_grad=False) + z (z.requires_grad=True) -&gt;&gt; b (b.requires_grad=True)</code></pre></li></ul></li><li><p>volatile = True</p><ul><li><p>变量的volatile标记的运算也相当于or</p><pre><code>k (k.volatile=False) + m (m.volatile=False) -&gt;&gt; n (n.volatile=False)k (k.volatile=False) + j (j.volatile=True) -&gt;&gt; o (o.volatile=True)</code></pre></li></ul></li></ul><p>注意：<code>volatile=True相当于requires_grad=False</code>。但是在纯推断模式的时候，只要是输入volatile=True，那么输出Variable的volatile必为True。这就比使用requires_grad=False方便(???)多了。    </p><h2 id="PyTorch-学习笔记（四）"><a href="#PyTorch-学习笔记（四）" class="headerlink" title="PyTorch 学习笔记（四）"></a>PyTorch 学习笔记（四）</h2><h3 id="什么是Datasets"><a href="#什么是Datasets" class="headerlink" title="什么是Datasets"></a>什么是Datasets</h3><p>在输入流水线中，我们看到准备数据的代码是这么写的<code>data = datasets.CIFAR10(“./data/”, transform=transform, train=True, download=True)</code>。datasets.CIFAR10就是一个Datasets<code>子类</code>，data是这个类的一个<code>实例</code>。</p><h3 id="为什么要定义Datasets"><a href="#为什么要定义Datasets" class="headerlink" title="为什么要定义Datasets"></a>为什么要定义Datasets</h3><p>PyTorch提供了一个工具函数torch.utils.data.DataLoader。通过这个类，我们在准备mini-batch的时候可以<code>多线程并行处理</code>，这样可以加快准备数据的速度。Datasets就是构建这个类的实例的<code>参数</code>之一。</p><h3 id="如何自定义Datasets"><a href="#如何自定义Datasets" class="headerlink" title="如何自定义Datasets"></a>如何自定义Datasets</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomDataset</span><span class="params">(data.Dataset)</span>:</span><span class="comment">#需要继承data.Dataset</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># TODO</span></span><br><span class="line">        <span class="comment"># 1. Initialize file path or list of file names.</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="comment"># TODO</span></span><br><span class="line">        <span class="comment"># 1. Read one data from file (e.g. using numpy.fromfile, PIL.Image.open).</span></span><br><span class="line">        <span class="comment"># 2. Preprocess the data (e.g. torchvision.Transform).</span></span><br><span class="line">        <span class="comment"># 3. Return a data pair (e.g. image and label).</span></span><br><span class="line">        <span class="comment">#这里需要注意的是，第一步：read one data，是一个data</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># You should change 0 to the total size of your dataset.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="PyTorch-学习笔记（五）"><a href="#PyTorch-学习笔记（五）" class="headerlink" title="PyTorch 学习笔记（五）"></a>PyTorch 学习笔记（五）</h2><p>在模型完成训练后，我们需要将训练好的模型保存为一个文件供测试使用，或者因为一些原因我们需要继续之前的状态训练之前保存的模型，<a href="https://captainzj.github.io/2018/12/28/Pytorch-Save-Load-Model/" target="_blank" rel="noopener">那么如何在PyTorch中保存和恢复模型呢？</a></p><h2 id="PyTorch-学习笔记（六）"><a href="#PyTorch-学习笔记（六）" class="headerlink" title="PyTorch 学习笔记（六）"></a>PyTorch 学习笔记（六）</h2><h3 id="Variable-的-hook"><a href="#Variable-的-hook" class="headerlink" title="Variable 的 hook"></a>Variable 的 hook</h3><p><code>register_hook(hook)</code> 注册一个backward钩子: <code>每次gradients被计算的时候</code>，这个hook都被调用.hook不应该修改它的输入，但是它可以<code>返回一个替代当前梯度的新梯度</code>.这个函数返回一个 句柄(handle).它有一个方法 <code>handle.remove()</code>，可以用这个方法将hook从module移除.</p><p>Example:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = Variable(torch.Tensor([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]), requires_grad=<span class="keyword">True</span>)</span><br><span class="line">h = v.register_hook(<span class="keyword">lambda</span> grad: grad * <span class="number">2</span>)  <span class="comment"># double the gradient</span></span><br><span class="line">v.backward(torch.Tensor([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment">#先计算原始梯度，再进hook，获得一个新梯度。</span></span><br><span class="line">print(v.grad.data)</span><br><span class="line">h.remove()  <span class="comment"># removes the hook</span></span><br></pre></td></tr></table></figure></p><p>out:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">2</span></span><br><span class="line">[torch.FloatTensor of size <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h3 id="nn-Module的hook"><a href="#nn-Module的hook" class="headerlink" title="nn.Module的hook"></a>nn.Module的hook</h3><p><code>register_forward_hook(hook)</code>在module上注册一个forward hook: 这里要注意的是，<code>hook 只能注册到 Module 上</code>，即，仅仅是简单的 op 包装的 Module，而不是我们继承 Module时写的那个类，我们继承 Module写的类叫做 Container。<code>每次调用forward()计算输出的时候</code>，这个hook就会被调用。</p><p>Example:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">for_hook</span><span class="params">(module, input, output)</span>:</span></span><br><span class="line">    print(module,<span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> input:</span><br><span class="line">        print(<span class="string">"input val:"</span>,val)</span><br><span class="line">    <span class="keyword">for</span> out_val <span class="keyword">in</span> output:</span><br><span class="line">        print(<span class="string">"output val:"</span>, out_val)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Model, self).__init__()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">model = Model()</span><br><span class="line">x = Variable(torch.FloatTensor([<span class="number">1</span>]), requires_grad=<span class="keyword">True</span>)</span><br><span class="line">handle = model.register_forward_hook(for_hook)  <span class="comment"># register_forward_hook</span></span><br><span class="line">print(<span class="string">"hello"</span>)</span><br><span class="line">print(<span class="string">"model(x)"</span>,model(x))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">当我们执行model(x)的时候，底层干了以下几件事：</span></span><br><span class="line"><span class="string">- 调用 forward 方法计算结果</span></span><br><span class="line"><span class="string">- 判断有没有注册 forward_hook，有的话，就将 forward 的输入及结果作为hook的实参。然后让hook自己干一些不可告人的事情。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">handle.remove() <span class="comment">#  句柄(handle)有一个方法 handle.remove()，可以用这个方法将hook从module移除.</span></span><br></pre></td></tr></table></figure></p><p>out:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">Model() <span class="number">1</span></span><br><span class="line">input val: tensor([<span class="number">1.</span>], requires_grad=<span class="keyword">True</span>)</span><br><span class="line">output val: tensor(<span class="number">2.</span>, grad_fn=&lt;SelectBackward&gt;)</span><br><span class="line">model(x) tensor([<span class="number">2.</span>], grad_fn=&lt;AddBackward&gt;)</span><br></pre></td></tr></table></figure></p><p>Explain:</p><ul><li>register_forward_hook<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_forward_hook</span><span class="params">(self, hook)</span>:</span></span><br><span class="line"></span><br><span class="line">       handle = hooks.RemovableHandle(self._forward_hooks)</span><br><span class="line">       self._forward_hooks[handle.id] = hook</span><br><span class="line">       <span class="keyword">return</span> handle</span><br></pre></td></tr></table></figure></li></ul><p>这个方法的作用是<code>在此module上注册一个hook</code>，函数中第一句就没必要在意了，主要看第二句，是把注册的hook保存在_forward_hooks字典里。</p><ul><li>nn.Module 的<strong>call</strong>方法(仅保留需要关注的部分)</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *input, **kwargs)</span>:</span></span><br><span class="line">   result = self.forward(*input, **kwargs)</span><br><span class="line">   <span class="keyword">for</span> hook <span class="keyword">in</span> self._forward_hooks.values():</span><br><span class="line">       <span class="comment">#将注册的hook拿出来用</span></span><br><span class="line">       hook_result = hook(self, input, result)</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="register-backward-hook"><a href="#register-backward-hook" class="headerlink" title="register_backward_hook"></a>register_backward_hook</h3><p>在module上注册一个backward hook。此方法目前只能用在Module上，不能用在Container上，当Module的forward函数中只有一个Function的时候，称为Module，如果Module包含其它Module，称之为Container。<code>每次计算module的inputs的梯度的时候</code>，这个hook会被调用。<br>注：Module的register_backward_hook的行为在未来的几个版本可能会改变</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>torchvision.models.md</title>
    <link href="http://yoursite.com/2019/01/16/torchvision-models/"/>
    <id>http://yoursite.com/2019/01/16/torchvision-models/</id>
    <published>2019-01-16T06:41:27.000Z</published>
    <updated>2019-01-16T08:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><p><a href="https://pytorch.org/docs/stable/torchvision/models.html" target="_blank" rel="noopener">torchvision.models — PyTorch master documentation</a></p><p>The models subpackage contains definitions for the following model architectures:</p><ul><li><p><a href="https://arxiv.org/abs/1404.5997" target="_blank" rel="noopener">AlexNet</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/16/torchvision-models/alexnet.png" alt="alexnet" title="">                </div>                <div class="image-caption">alexnet</div>            </figure></li><li><p><a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="noopener">VGG</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/16/torchvision-models/vgg.png" alt="vgg" title="">                </div>                <div class="image-caption">vgg</div>            </figure></li><li><p><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">ResNet</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/16/torchvision-models/ResNet_Structure.png" alt="ResNet_Structure" title="">                </div>                <div class="image-caption">ResNet_Structure</div>            </figure></li><li><p><a href="https://arxiv.org/abs/1602.07360" target="_blank" rel="noopener">SqueezeNet</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/16/torchvision-models/squeezenet.png" alt="squeezenet" title="">                </div>                <div class="image-caption">squeezenet</div>            </figure></li><li><p><a href="https://arxiv.org/abs/1608.06993" target="_blank" rel="noopener">DenseNet</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/16/torchvision-models/DenseNet_Structure.png" alt="DenseNet_Structure" title="">                </div>                <div class="image-caption">DenseNet_Structure</div>            </figure></li><li><p><a href="https://arxiv.org/abs/1512.00567" target="_blank" rel="noopener">Inception v3</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/16/torchvision-models/Inception.png" alt="Inception" title="">                </div>                <div class="image-caption">Inception</div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Pokémon_Model</title>
    <link href="http://yoursite.com/2019/01/09/Pokemon-Model/"/>
    <id>http://yoursite.com/2019/01/09/Pokemon-Model/</id>
    <published>2019-01-09T13:27:32.000Z</published>
    <updated>2019-01-10T08:57:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><p>Tutorial：</p><p><a href="https://zhuanlan.zhihu.com/p/25868154" target="_blank" rel="noopener">看图判断口袋妖怪属性，学会用卷积神经网络分类</a></p><p>Model Source：</p><p><a href="https://veekun.com/dex/downloads" target="_blank" rel="noopener">veekun</a></p><p><a href="http://www.element3ds.com/thread-93669-1-1.html" target="_blank" rel="noopener">《口袋妖怪XY》全套3D模型</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="Have_Fun" scheme="http://yoursite.com/categories/Have-Fun/"/>
    
    
  </entry>
  
  <entry>
    <title>数据分析与挖掘Exam</title>
    <link href="http://yoursite.com/2019/01/06/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98Exam/"/>
    <id>http://yoursite.com/2019/01/06/数据分析与挖掘Exam/</id>
    <published>2019-01-06T10:56:52.000Z</published>
    <updated>2019-01-08T13:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【内容描述】<a href="https://captainzj.github.io/2019/01/06/数据分析与挖掘/" target="_blank" rel="noopener">《数据分析与挖掘》</a>之后篇</p><a id="more"></a><h2 id="Exam"><a href="#Exam" class="headerlink" title="Exam"></a>Exam</h2><table><thead><tr><th style="text-align:center">题型</th><th style="text-align:center">题量（道）</th><th style="text-align:center">分值（分）</th><th style="text-align:center">总计（分）</th></tr></thead><tbody><tr><td style="text-align:center">选择题</td><td style="text-align:center">10</td><td style="text-align:center">2</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">计算题</td><td style="text-align:center">3</td><td style="text-align:center">10</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">简答题</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">论述题</td><td style="text-align:center">2</td><td style="text-align:center">15</td><td style="text-align:center">30</td></tr></tbody></table><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul><li><p>What is datamining </p><p>从数据中发现知识</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> 统计分析  +     分析报告      -&gt;&gt;     数据挖掘</span><br><span class="line">(数据统计) + (协同过滤关联分析) -&gt;&gt; (找寻事物的隐含规律)</span><br><span class="line"> (描述性)  +   (预测性概率)    -&gt;&gt;     (规范性)</span><br><span class="line"> </span><br><span class="line">- 分析报告一般是整个事件发生结束以后的总结（描述性）。</span><br><span class="line">- 统计分析能利用大量的历史样本来预测整个事件总体未来的走向（预测性概率）。</span><br><span class="line">- 数据挖掘则透过事件的表象发现隐藏在背后的蛛丝马迹，从而找到潜伏的规律以及看似无关事物之间背后的联系，用此来洞察未来（规范性）。</span><br></pre></td></tr></table></figure></li><li><p>What is machine learning</p><p> 计算机程序基于数据自动地学习识别复杂的模式，并作出智能的决断。 允许程序可以根据提供的数据进行自动的学习，它可以使你的程序变得更”聪明”。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- 监督学习 (分类)</span><br><span class="line">- 无监督学习 (聚类)</span><br><span class="line">- 半监督学习: 在学习模型时，它使用标记(学习模型)和未标记(改进类边界)的实例。</span><br><span class="line">- 主动学习: 通过主动地从用户获取知识来提高模型质量</span><br></pre></td></tr></table></figure></li><li><p>What is artificial intelligence </p><p>在计算机科学的基础上，综合信息论、心理学、生理学、语言学、逻辑学和数学等知识，制造能<code>模拟人类智能行为</code>的计算机系统的边缘学科。</p></li></ul><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计算公式</span><br></pre></td></tr></table></figure><h4 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Relational records'</span>  关系记录</span><br><span class="line">  - Relational tables, highly structured 关系表，高度结构化</span><br><span class="line">* <span class="string">'Data matrix'</span>, e.g., numerical matrix, crosstabs 数据矩阵，例如数值矩阵，交叉表</span><br><span class="line">* <span class="string">'Transaction data'</span> 交易数据</span><br><span class="line">* <span class="string">'Document data'</span>: Term-frequency vector (matrix) of text documents</span><br><span class="line">  文档数据：文本文档的术语 - 频率向量（矩阵）</span><br><span class="line">* <span class="string">'Transportation network'</span> 交通网络</span><br><span class="line">* <span class="string">'World Wide Web'</span> 万维网</span><br><span class="line">* <span class="string">'Molecular Structures'</span> 分子结构</span><br><span class="line">* <span class="string">'Social or information networks'</span> 社交或信息网络</span><br></pre></td></tr></table></figure><ul><li><p><strong>Attribute Types</strong> </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Nominal'</span>: categories, states, <span class="keyword">or</span> “names of things” <span class="comment"># 标称属性</span></span><br><span class="line">* <span class="string">'Binary'</span> : Nominal attribute <span class="keyword">with</span> only <span class="number">2</span> states (<span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span>)<span class="comment"># 二元属性:仅有2个状态（0和1）的标称属性</span></span><br><span class="line">* <span class="string">'Ordinal'</span>  <span class="comment"># 序数属性</span></span><br><span class="line">- Values have a meaningful order (ranking) but magnitude between successive values <span class="keyword">is</span> <span class="keyword">not</span> known</span><br><span class="line">  值具有有意义的顺序（排名），但连续值之间的大小未知</span><br><span class="line">* <span class="string">'Numeric'</span> <span class="comment"># 数值属性</span></span><br><span class="line"> - `Interval`: Measured on a scale of equal-sized units 间隔: 按相同大小的单位测量</span><br><span class="line">- `Ratio` 比率(倍数)</span><br><span class="line">   We can speak of values <span class="keyword">as</span> being an order of magnitude larger than the unit of measurement (<span class="number">10</span> K˚ <span class="keyword">is</span> twice <span class="keyword">as</span> high <span class="keyword">as</span> <span class="number">5</span> K˚).</span><br><span class="line">   我们可以说价值比测量单位大一个数量级（<span class="number">10</span>K˚是<span class="number">5</span>K˚的两倍）</span><br><span class="line">* <span class="string">'Discrete Attribute'</span>  <span class="comment"># 离散属性</span></span><br><span class="line">- Sometimes, represented <span class="keyword">as</span> integer variables 有时，表示为`整数变量`</span><br><span class="line">- Note: Binary attributes are a special case of discrete attributes </span><br><span class="line">  注意：二进制属性是离散属性的特例</span><br><span class="line">* <span class="string">'Continuous Attribute'</span>  <span class="comment"># 连续属性</span></span><br><span class="line">- Practically, real values can only be measured <span class="keyword">and</span> represented using a finite number of digits</span><br><span class="line">  实际上，只能使用有限数字来测量和表示实际值</span><br><span class="line">- Continuous attributes are typically represented <span class="keyword">as</span> floating-point variables</span><br><span class="line">  连续属性通常表示为`浮点变量`</span><br></pre></td></tr></table></figure></li></ul><h4 id="Data-statistics"><a href="#Data-statistics" class="headerlink" title="Data statistics"></a>Data statistics</h4><ul><li><strong>Motivation</strong>: To better understand the data: central tendency, variation and spread</li></ul><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/DataStatistical.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/SimilarityDissimilarityAndProximity.png" width="600"><br></center><h3 id="Data-preprocessing"><a href="#Data-preprocessing" class="headerlink" title="Data preprocessing"></a>Data preprocessing</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">常用方法  缺失值 处理方法</span><br></pre></td></tr></table></figure><center><br><img src="/2019/01/06/数据分析与挖掘Exam/dataPreprocess_mainTask.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/DataQualityIssues.png" width="600"><br></center><h4 id="Data-cleaning"><a href="#Data-cleaning" class="headerlink" title="Data cleaning"></a>Data cleaning</h4><ul><li>Handle <code>missing data</code>(Incomplete), smooth <code>noisy data</code>,identify or remove <code>outliers</code>, and resolve <code>inconsistencies</code> 处理丢失的数据，平滑噪声数据，识别或删除异常值，并解决不一致问题</li></ul><h5 id="How-to-Handle-Missing-Data"><a href="#How-to-Handle-Missing-Data" class="headerlink" title="How to Handle Missing Data?"></a>How to Handle Missing Data?</h5><ul><li>Data is not always available:  many tuples have <code>no recorded value</code> for several attributes</li></ul><blockquote><p> 1.忽略元组  2.手动填充  3. 自动（以”unknown”/“均值”/“最可能的值’’）填充</p></blockquote><h5 id="How-to-Handle-Noisy-Data"><a href="#How-to-Handle-Noisy-Data" class="headerlink" title="How to Handle Noisy Data?"></a>How to Handle Noisy Data?</h5><ul><li>Noise: random <code>error or variance</code> in a measured variable</li></ul><blockquote><p>1.binning平滑  2.回归(拟合平滑) 3.聚类（无监督,检查并删除异常点） 4.半监督（检测可疑值并由人查验）</p></blockquote><h4 id="Data-integrating"><a href="#Data-integrating" class="headerlink" title="Data integrating"></a>Data integrating</h4><ul><li>Integration of multiple databases, data cubes, or files 集成多个数据库，数据立方体或文件</li></ul><blockquote><p>1.数据集成 2.模式集成 3.实体识别 4.检测和解决数据值的冲突</p></blockquote><h5 id="Handling-Redundancy-in-Data-Integration"><a href="#Handling-Redundancy-in-Data-Integration" class="headerlink" title="Handling Redundancy in Data Integration"></a>Handling Redundancy in Data Integration</h5><blockquote><p>1.冗余原因（对象标识不同、派生数据）2.检测手段（相关性和协方差分析）3.仔细整合</p></blockquote><h4 id="Data-transforming"><a href="#Data-transforming" class="headerlink" title="Data transforming"></a>Data transforming</h4><ul><li>A function that maps the entire set of values of a given attribute to a new set of replacement values s.t. each old value can be identified with one of the new values  一种函数，它将给定属性的整个值集映射到一组新的替换值 使得 可以使用其中一个新值标识每个旧值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Methods</span><br><span class="line">  - <span class="string">'Smoothing'</span>: Remove noise <span class="keyword">from</span> data <span class="comment"># 平滑</span></span><br><span class="line">  - <span class="string">'Attribute/feature construction'</span>  <span class="comment"># 属性/特征构建</span></span><br><span class="line">    - New attributes constructed <span class="keyword">from</span> the given ones</span><br><span class="line">  - <span class="string">'Aggregation'</span>: Summarization, data cube construction  <span class="comment"># 聚合</span></span><br><span class="line">  - <span class="string">'Normalization'</span>: Scaled to fall within a smaller, specified range  <span class="comment"># 归一化</span></span><br><span class="line">    - min-max normalization</span><br><span class="line">    - z-score normalization</span><br><span class="line">    - normalization by decimal scaling</span><br><span class="line">  - <span class="string">'Discretization'</span>: Concept hierarchy climbing <span class="comment"># 离散化</span></span><br></pre></td></tr></table></figure><h4 id="Data-Reduction"><a href="#Data-Reduction" class="headerlink" title="Data Reduction"></a>Data Reduction</h4><ul><li><p>Obtain a reduced representation of the data set  获得数据集的缩减表示</p><ul><li>much smaller in volume but yet produces almost the same analytical results 体积小得多，但产生几乎相同的分析结果</li></ul></li><li><p><strong>Methods for data reduction</strong></p></li><li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data reduction </span></span><br><span class="line">- <span class="string">'Regression and Log-Linear Models'</span>  （Parametric methods）</span><br><span class="line">- <span class="string">'Histograms, clustering, sampling'</span>  （Non-parametric methods）</span><br><span class="line">&gt; sampling: 选择具有代表性的子集；简单随机、放回、不放回、分层抽样</span><br><span class="line">- <span class="string">'Data cube aggregation'</span> 数据立方体聚合</span><br><span class="line">- <span class="string">'Data Compression'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Some typical dimensionality methods</span></span><br><span class="line">* Principal Component Analysis (<span class="string">'PCA'</span>) </span><br><span class="line">* Supervised <span class="keyword">and</span> nonlinear techniques</span><br><span class="line">- <span class="string">'Feature subset selection'</span> 找寻合适子集(仅收集与分析任务相关的属性)</span><br><span class="line">- <span class="string">'Feature creation'</span></span><br><span class="line">- `Attribute extraction`  高维映射至低维(降维)</span><br><span class="line">- `Attribute construction`</span><br></pre></td></tr></table></figure></li></ul><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/06/数据分析与挖掘Exam/Summary_datapreprocessing.png" width="600"><br></center><h2 id="classification"><a href="#classification" class="headerlink" title="classification"></a>classification</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">构建模型 应用模型(预测) 描述过程</span><br></pre></td></tr></table></figure><ul><li><p>What is classification?</p><p>根据训练集和类标签（分类属性中的值）构建模型，并将其用于分析新数据，预测其标签。</p><ul><li><p>Supervised learning</p><p><strong>监督学习</strong>是机器学习任务的一种。它<code>从有标记的训练数据中推导出预测标签</code>。有标记的训练数据是指每个训练实例都包括输入和期望的输出。一句话：<strong>给定数据，预测标签</strong>。(分类、回归)</p><ul><li><strong>无监督学习</strong>是机器学习任务的一种。它<code>从无标记的训练数据中推断结论</code>。最典型的无监督学习就是聚类分析，它可以在探索性数据分析阶段用于发现隐藏的模式或者对数据进行分组。一句话：<strong>给定数据，寻找隐藏的结构</strong>。</li></ul></li></ul></li><li><p>Steps</p><ol><li><p>模型构建：根据数据集特征构建合适的分类模型，并使用训练集样本进行模型训练</p></li><li><p>模型验证与测试：将已知的测试样品<code>标签</code>与模型使用测试集所得的<code>分类结果</code>进行比较，而后使用验证集改进模型准确率</p></li><li><p>模型部署：如果准确度可接受，便可使用此模型分类新数据</p></li></ol></li></ul><h3 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h3><blockquote><p>1.决策树：基于规则   2.贝叶斯：基于概率  3.ANN: 机器学习最优化 </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">算法 思路 优缺点</span><br><span class="line">考 朴素贝叶斯</span><br><span class="line">解释 svm ann 大概了解DeepLearning 理论描述</span><br></pre></td></tr></table></figure><h4 id="Decision-tree-ID3-C4-5-CART"><a href="#Decision-tree-ID3-C4-5-CART" class="headerlink" title="Decision tree-ID3,C4.5,CART"></a>Decision tree-ID3,C4.5,CART</h4><ul><li><p>Algorithm Step</p><p>树以自上而下，递归，分而治之的方式构建</p><ul><li>一开始，所有的训练样例都是根源</li><li><strong>样例基于被选定的属性递归地划分</strong>(在每个节点上，基于<code>该节点上的训练示例</code>以及<code>启发式或统计度量（例如，信息增益）</code>来<code>选择属性</code>。)</li></ul><p>停止条件</p><ul><li>给定节点的所有样本都属于<code>同一个类</code></li><li>没有<code>剩余属性</code>可用于进一步分区</li><li>没有<code>剩余样例</code></li></ul></li><li><p>Basic Concepts</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">- Entropy 信息熵:  表征混乱程度 </span><br><span class="line">- Conditional Entropy条件熵: 在已知随机变量X的条件下随机变量Y的不确定性(概率)</span><br><span class="line">- Mutual Information互信息/Information gain信息增益: 得知特征X的信息而使得类Y的信息的不确定性减少的程度(越大越好) -&gt;&gt; 'ID3决策树'</span><br><span class="line">- Gain Ratio信息增益比: 解决使用信息增益存在偏向于选择取值较多的特征的问题(越大越好) -&gt;&gt; 'C4.5决策树' </span><br><span class="line">- GINI index基尼指数： 表征不纯度(越小越好)  -&gt;&gt;  'CART分类树'</span><br></pre></td></tr></table></figure></li><li><p>决策树算法比较</p><p>| 算法 |  支持模型  | 树结构 |     特征选择     | 连续值处理 | 缺失值处理 |  剪枝  |<br>| :–: | :——–: | :—-: | :————–: | :——–: | :——–: | :—-: |<br>| ID3  |    分类    | 多叉树 |     信息增益     |   不支持   |   不支持   | 不支持 |<br>| C4.5 |    分类    | 多叉树 |    信息增益比    |    支持    |    支持    |  支持  |<br>| CART | 分类，回归 | 二叉树 | 基尼系数，均方差 |    支持    |    支持    |  支持  |</p></li></ul><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><ul><li>Define: Find a linear/non-linear hyperplane (decision boundary) that will separate the data</li><li>Optimize：希望所有的点都离超平面远 -&gt;  可以让离超平面比较近的点尽可能的远离超平面</li><li>kernel核函数：将数据从低维空间映射到高维空间</li></ul><h4 id="Bayes"><a href="#Bayes" class="headerlink" title="Bayes"></a>Bayes</h4><ul><li><p><strong>贝叶斯定理：</strong> $P(H|X)=\frac{P(X|H)P(H)}{P(X)}$</p></li><li><p>Naïve Bayesian Classifier</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Advantages</span></span><br><span class="line"> Easy to implement  易于实现</span><br><span class="line"> Good results obtained <span class="keyword">in</span> most of the cases 大多数情况下获得了良好的结果</span><br><span class="line"><span class="comment"># Disadvantages</span></span><br><span class="line"> Assumption: class conditional independence, therefore loss of accuracy类条件独立-&gt;准确率缺失</span><br><span class="line"> Practically, dependencies exist among variables</span><br><span class="line">  实际上，变量之间存在<span class="string">'依赖'</span>关系</span><br><span class="line"> E.g., hospitals: patients: Profile: age, family history, etc. Symptoms: fever, cough etc., Disease: lung cancer, diabetes,etc.</span><br><span class="line"> Dependencies among these cannot be modeled by Naïve Bayesian Classifier</span><br><span class="line">      这些依赖关系不能用朴素贝叶斯分类器建模</span><br><span class="line"><span class="comment"># How to deal with these dependencies? Bayesian Belief Networks</span></span><br><span class="line">  如何处理这些依赖关系？贝叶斯置信网络</span><br></pre></td></tr></table></figure></li></ul><h4 id="ANN"><a href="#ANN" class="headerlink" title="ANN"></a>ANN</h4><ul><li><p>受生物神经元的启发，将<strong>多输入单输出</strong>的信息处理单元作为人工神经网络中的一个神经元。人工神经网络的基本结构如下：输入层(输入层的神经元数目对应于训练集数据的属性数目)、隐藏层、输出层(输出层的神经元数目对应于网络预测的分类数目)</p></li><li><p>Backpropagation</p><blockquote><p>Backpropagate the error (by updating weights and biases)</p></blockquote></li><li><h5 id="DeepLearning"><a href="#DeepLearning" class="headerlink" title="DeepLearning"></a>DeepLearning</h5><blockquote><p>通过更深的layers，自动提取特征（构建特征空间），以达到更”深层次”的学习效果</p></blockquote></li></ul><h3 id="Model-evaluation-and-selection"><a href="#Model-evaluation-and-selection" class="headerlink" title="Model evaluation and selection"></a>Model evaluation and selection</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">混淆矩阵 准确率 错误率 等等指标 交叉验证</span><br></pre></td></tr></table></figure><h4 id="Confusion-matrix-and-criteria"><a href="#Confusion-matrix-and-criteria" class="headerlink" title="Confusion matrix and criteria"></a>Confusion matrix and criteria</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/ConfusionMatrix.png" width="600"><br></center><ul><li><p><strong>Issues Affecting Model Selection</strong></p><blockquote><p>1.准确性 2.速度 3.鲁棒性 4.可伸缩性 5.可解释性 6.其他措施，例如规则的好处，例如决策树大小或分类规则的紧凑性</p></blockquote></li></ul><h4 id="Cross-evaluation"><a href="#Cross-evaluation" class="headerlink" title="Cross-evaluation"></a>Cross-evaluation</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cross-validation (k-fold, where k = 10 is most popular)</span></span><br><span class="line">- 随机将数据划分为k个互斥的子集，每个子集的大小大致相等</span><br><span class="line">- 在第i次迭代中，使用Di作为测试集，使用其他作为训练集</span><br><span class="line">- 留一个：k折叠，其中k = <span class="string">'#'</span> 元组的数量，对于小尺寸数据</span><br><span class="line">- *分层交叉验证*：折叠是分层的，因此每个折叠中的类分布与初始数据中的类别分布大致相同</span><br></pre></td></tr></table></figure><h3 id="Ensemble-methods"><a href="#Ensemble-methods" class="headerlink" title="Ensemble methods"></a>Ensemble methods</h3><ul><li>使用模型组合来提高准确性</li></ul><h4 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h4><ul><li>Bagging: 使用训练集的子集训练每个模型，并且并行学习模型</li></ul><h4 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h4><blockquote><p>（Bagging）投票得分    -&gt;  （Boosting）加权得分</p></blockquote><ul><li>Boosting：训练每个新模型实例以强调先前模型错误分类的训练实例，以及按顺序学习的模型</li></ul><h4 id="Random-Forest"><a href="#Random-Forest" class="headerlink" title="Random Forest"></a>Random Forest</h4><blockquote><p>Avariation of bagging for decision trees 对<strong>决策树的bagging</strong>的’变异’</p></blockquote><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/06/数据分析与挖掘Exam/classification_summary1.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/classification_summary2.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/classification_summary3.png" width="600"><br></center><h2 id="Frequent-patterns"><a href="#Frequent-patterns" class="headerlink" title="Frequent patterns"></a>Frequent patterns</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">频繁模式</span><br><span class="line">频繁子图 不考 hhhhh</span><br><span class="line">关联规则重点掌握</span><br><span class="line">必须明白 apriori fp-growth </span><br><span class="line">k -&gt; k+1</span><br></pre></td></tr></table></figure><ul><li><p>What is a frequent pattern </p><p>频繁模式是数据集中频繁出现(满足最小支持度)的项集、序列或子结构。</p><ul><li><p>Association rule </p><p>关联规则就是有关联的规则，形式是这样定义的：<em>两个不相交的非空集合X、Y，如果有X–&gt;Y，就说X–&gt;Y是一条关联规则</em>。</p></li></ul></li></ul><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><h4 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a>Apriori</h4><ul><li><p>Apriori定律</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果一个集合是频繁项集，则它的所有<span class="string">'子集'</span>都是频繁项集。</span><br><span class="line"><span class="number">2.</span> 如果一个集合不是频繁项集，则它的所有<span class="string">'超集'</span>都不是频繁项集。</span><br></pre></td></tr></table></figure></li><li><p>Step</p><center><br><img src="/2019/01/06/数据分析与挖掘Exam/AprioriExample.png" width="600"><br></center></li></ul><h4 id="FP-growth"><a href="#FP-growth" class="headerlink" title="FP-growth"></a>FP-growth</h4><p>FpGrowth算法通过构造一个树结构来压缩数据记录，使得挖掘频繁项集只需要<strong>扫描两次数据记录</strong>，而且该算法不需要生成候选集合，所以效率会比较高。</p><ul><li><p><strong>Method</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> For each frequent item, construct its conditional pattern-base, <span class="keyword">and</span> then its conditional FP-tree</span><br><span class="line">  对于每个频繁项，<span class="string">'构造其条件模式库'</span>，然后<span class="string">'构造其条件FP树'</span></span><br><span class="line"> Repeat the process on <span class="string">'each'</span> newly created conditional FP-tree</span><br><span class="line">  对每个新创建的条件FP树重复此过程 (<span class="string">"Recursion: Mining Each Conditional FP-tree"</span>)</span><br><span class="line"> Until the resulting FP-tree <span class="keyword">is</span> empty, <span class="keyword">or</span> it contains only one path—single path will generate all the combinations of its sub-paths, each of which <span class="keyword">is</span> a frequent pattern</span><br><span class="line">  在生成的FP树为空之前，或者它只包含一个路径 - 单个路径将生成其子路径的所有组合，<span class="string">'每个路径都是一个频繁的模式'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/06/数据分析与挖掘Exam/fp_Summary.png" width="600"><br></center><h2 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kmeans 相关算法</span><br><span class="line">分析比较</span><br><span class="line">ap基本概念</span><br></pre></td></tr></table></figure><ul><li><p>What is clustering</p><p>聚类就是按照某个特定标准(如距离准则)<strong>把一个数据集分割成不同的类或簇</strong>，使得同一个簇内的数据对象的<code>相似性</code>尽可能大，同时不在同一个簇中的数据对象的<code>差异性</code>也尽可能地大。即聚类后<code>同一类的数据尽可能聚集到一起，不同数据尽量分离</code>。</p><ul><li><p>Unsupervised learning </p><p>聚类是一种<code>输入数据无标签</code>的“分类”方式（即非监督学习），通常并不需要使用训练数据进行学习，仅把相似的东西聚到一起，并不关心所得的簇具体代表什么</p></li></ul></li></ul><h3 id="Algorithms-1"><a href="#Algorithms-1" class="headerlink" title="Algorithms"></a>Algorithms</h3><h4 id="Partition-based—k-means"><a href="#Partition-based—k-means" class="headerlink" title="Partition-based—k-means"></a>Partition-based—k-means</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/k-Means.gif" width="400"><br></center><p>k-Means : 选取<code>平均值</code>作为新的聚类中心 </p><ul><li>k-means对初始值的设置很敏感 <ul><li><strong>K-means++</strong>：选取<code>与当前所属聚类中心距离最远</code>的点作为新的聚类中心</li></ul></li><li>k-means对噪声和离群值非常敏感<ul><li><strong>K-Medoids</strong>：选取<code>中心点</code>（计算该点到当前聚簇中所有点距离之和，最终距离之后最小的点）作为新的聚类中心</li><li><strong>K-Medians</strong>：选取<code>中位数</code>作为新的聚类中心</li></ul></li><li><p>k-means只用于numerical，不适用于categorical类型数据</p><ul><li><strong>K-Modes</strong>：选取<code>众数</code>作为新的聚类中心</li></ul></li><li><p>k-means不能解决非凸non-convex数据</p><ul><li><strong>Kernel K-Means</strong>：使用核函数(多项式/高斯径向基/Sigmoid核函数)将数据投影到高维特征空间，然后执行K-Means聚类</li></ul></li></ul><h4 id="Hierarchical-based—two-ways"><a href="#Hierarchical-based—two-ways" class="headerlink" title="Hierarchical-based—two ways"></a>Hierarchical-based—two ways</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'凝聚'</span>：从单一集群开始，一次连续合并两个集群，构建<span class="string">'自下而上'</span>的集群层次结构</span><br><span class="line">- <span class="string">'分裂'</span>：从一个庞大的宏集群开始，将其连续分成两组，生成一个<span class="string">'自上而下'</span>的集群层次结构</span><br></pre></td></tr></table></figure><h5 id="Brich"><a href="#Brich" class="headerlink" title="Brich"></a>Brich</h5><center><br><img src="/2019/01/06/数据分析与挖掘Exam/CFTree.png" width="500"><br></center><h4 id="Density-based—DBSCAN"><a href="#Density-based—DBSCAN" class="headerlink" title="Density-based—DBSCAN"></a>Density-based—DBSCAN</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/DBSCAN_BasicConcept.png" width="500"><br></center><p>DBSCAN密度聚类：由密度可达关系导出的<code>最大密度相连的样本集合</code>，即为我们最终聚类的一个类别，或者说一个簇。</p><h4 id="AP-2007-Science"><a href="#AP-2007-Science" class="headerlink" title="AP (2007, Science)"></a>AP (2007, Science)</h4><p>AP算法通过迭代过程不断更新每一个点的$responsibility$和$availability$,直到产生$m$个高质量的$exemplar$,同时将其余的数据点分配到相应的聚类中。</p><h4 id="Local-density-based-2014-Science"><a href="#Local-density-based-2014-Science" class="headerlink" title="Local density-based (2014, Science)"></a>Local density-based (2014, Science)</h4><blockquote><p>1.找出聚类中心  2.剩余点的类别指派 3.去除噪音</p></blockquote><h3 id="Summary-3"><a href="#Summary-3" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/06/数据分析与挖掘Exam/clustering_Summary.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/clustering_Summary2.png" width="600"><br></center><h2 id="Graph-clustering"><a href="#Graph-clustering" class="headerlink" title="Graph clustering"></a>Graph clustering</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">谱聚类 modularity模块化 复杂网络的概念</span><br></pre></td></tr></table></figure><ul><li><p>What is graph clustering </p><ul><li><p>Complex network</p><p>在我们的现实生活中，许多复杂系统都可以建模成一种复杂网络进行分析，比如常见的电力网络、航空网络、交通网络、计算机网络以及社交网络等等。复杂网络不仅是一种数据的表现形式，它同样也是一种科学研究的手段。</p></li><li><p>Graph clustering</p><p>和特征聚类不同，图聚类比较难以观察，部分算法会以各点之间的距离作为突破口，可以这样形容：张三，是王五的好朋友，刚认识李四，对赵六很是反感。那么，对于该节点，我们无法直接得出他的特征，但能知道他的<code>活动圈</code>。利用图聚类，可以将同一社交范围的人聚合到一起。</p></li><li><p>Community </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'k-clique community'</span>: Union of all k-cliques that can be `reached <span class="keyword">from</span> each other` through a series of adjacent k-cliques.</span><br><span class="line">k-派系连通：一个k-派系可以通过若干个相邻的k-派系到达另一个k-派系，则称这两个k-派系彼此联通</span><br></pre></td></tr></table></figure></li><li><p>Module  </p></li></ul></li></ul><h3 id="Algorithms-2"><a href="#Algorithms-2" class="headerlink" title="Algorithms"></a>Algorithms</h3><h4 id="CPM"><a href="#CPM" class="headerlink" title="CPM"></a>CPM</h4><center class="half"><br><img src="/2019/01/06/数据分析与挖掘Exam/CPM1.png" width="300"><br><img src="/2019/01/06/数据分析与挖掘Exam/CPM2.png" width="300"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Step1: 找到网络中大小为K的完全子图 Locate maximal cliques </span><br><span class="line">Step2: 将每个完全子图定义为一个节点，建立一个重叠矩阵</span><br><span class="line">Step3: 将重叠矩阵变成社团邻接矩阵(其中重叠矩阵中对角线小于k、非对角线小于k<span class="number">-1</span>的元素全置为<span class="number">0</span>,所有非<span class="number">0</span>项置为<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="Spectral-clustering"><a href="#Spectral-clustering" class="headerlink" title="Spectral clustering"></a>Spectral clustering</h4><p>谱聚类（Spectral Clustering），就是先用<code>Laplacian eigenmaps对数据降维</code>（简单地说，就是先将数据转换成邻接矩阵或相似性矩阵，再转换成Laplacian矩阵，再对Laplacian矩阵进行特征分解，把最小的K个特征向量排列在一起），然后再<code>使用k-means</code>完成聚类。谱聚类是个很好的方法，效果通常比k-means好，计算复杂度还低，这都要归功于降维的作用。 </p><h4 id="GNandQ"><a href="#GNandQ" class="headerlink" title="GNandQ"></a>GNandQ</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 计算网络中所有边缘的中介性.</span><br><span class="line"><span class="number">2.</span> 去除间隙最大的边缘.</span><br><span class="line"><span class="number">3.</span> 重新计算受移除影响的所有边缘的间隙.</span><br><span class="line"><span class="number">4.</span> 从步骤<span class="number">2</span>重复，直到没有边缘.</span><br></pre></td></tr></table></figure><h4 id="MCL"><a href="#MCL" class="headerlink" title="MCL"></a>MCL</h4><p>在MCL中， <strong>Expansion</strong> 和 <strong>Inflation</strong> 将不断的交替进行，<strong>Expansion</strong> 使得不同的区域之间的联系加强，而 <strong>Inflation</strong> 则不断的<code>分化</code>各点之间的联系(强者恒强，弱者恒弱)。经过多次迭代，将渐渐出现聚集现象，以此便达到了聚类的效果。</p><h3 id="Summary-4"><a href="#Summary-4" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/06/数据分析与挖掘Exam/graphMining_Summary.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/CommunityDetection_Summary.png" width="600"><br></center><h2 id="Calculate"><a href="#Calculate" class="headerlink" title="Calculate"></a>Calculate</h2><h3 id="dataProcessing"><a href="#dataProcessing" class="headerlink" title="dataProcessing"></a>dataProcessing</h3><h4 id="Proximity-Measure-for-Binary-Attributes"><a href="#Proximity-Measure-for-Binary-Attributes" class="headerlink" title="Proximity Measure for Binary Attributes"></a>Proximity Measure for Binary Attributes</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/ProximityMeasureforBinaryAttributes.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/Dissimilarity betweenAsymmetricBinaryVariables.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/CalculatingCosineSimilarity.png" width="600"><br></center><h4 id="Correlation-Analysis"><a href="#Correlation-Analysis" class="headerlink" title="Correlation Analysis"></a>Correlation Analysis</h4><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CorrelationAnalysis.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CorrelationAnalysisExample.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CorrelationBetweenTwoNumericalVariables.png" width="600"><br></center><h4 id="Covariance"><a href="#Covariance" class="headerlink" title="Covariance"></a>Covariance</h4><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/VarianceForSingleVariable.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CovarianceForTwoVariables.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/Example_CalculationOfCovariance.png" width="600"><br></center><h4 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/Normalization.png" width="600"><br></center><h4 id="Simple-Discretization-Binning"><a href="#Simple-Discretization-Binning" class="headerlink" title="Simple Discretization: Binning"></a>Simple Discretization: Binning</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/Binning.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/BinningExample.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/BinningvsClustering.png" width="600"><br></center><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><h4 id="ID3-Decision-Tree：Information-Gain"><a href="#ID3-Decision-Tree：Information-Gain" class="headerlink" title="ID3 Decision Tree：Information Gain"></a>ID3 Decision Tree：Information Gain</h4><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/Example-AttributeSelection_withInformationGain.png" width="600"><br></center><h4 id="CART-Decision-Tree：-Gini-Index"><a href="#CART-Decision-Tree：-Gini-Index" class="headerlink" title="CART Decision Tree： Gini Index"></a>CART Decision Tree： Gini Index</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/ComputationOfGiniIndex.png" width="600"><br></center><h4 id="Classifier-Evaluation-Metrics-Example"><a href="#Classifier-Evaluation-Metrics-Example" class="headerlink" title="Classifier Evaluation Metrics: Example"></a>Classifier Evaluation Metrics: Example</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/ClassifierEvaluationMetrics.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/ClassifierEvaluationMetrics1.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/ClassifierEvaluationMetricsExample.png" width="600"><br></center><h4 id="Naïve-Bayesian-Classifier"><a href="#Naïve-Bayesian-Classifier" class="headerlink" title="Naïve Bayesian Classifier"></a>Naïve Bayesian Classifier</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/Naïve Bayesian Classifier0.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/Naïve Bayesian Classifier1.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/AvoidingtheZero-ProbabilityProblem.png" width="600"><br></center><h4 id="Bayesian-Belief-Network"><a href="#Bayesian-Belief-Network" class="headerlink" title="Bayesian Belief Network"></a>Bayesian Belief Network</h4><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/Bayesian Network1.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/Bayesian Network2.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/Bayesian Network3.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/Bayesian Network4.png" width="600"><br></center><h4 id="SVM-1"><a href="#SVM-1" class="headerlink" title="SVM"></a>SVM</h4><p>$\vec{w}=\sum_{i=1}^{N}\lambda_iy_i\vec{x_i} $        </p><p>$\lambda_i(y_i(\vec{w} * \vec{x_i}+b ))=0$</p><center><br><img src="/2019/01/06/数据分析与挖掘Exam/SVM_Example.png" width="600"><br></center><h3 id="Frequent-patterns-1"><a href="#Frequent-patterns-1" class="headerlink" title="Frequent patterns"></a>Frequent patterns</h3><h4 id="Association-Rules-supprt-amp-amp-confidence"><a href="#Association-Rules-supprt-amp-amp-confidence" class="headerlink" title="Association Rules: supprt &amp;&amp; confidence"></a>Association Rules: supprt &amp;&amp; confidence</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/AssociationRules.png" width="600"><br></center><h4 id="FP-growth-1"><a href="#FP-growth-1" class="headerlink" title="FP-growth"></a>FP-growth</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/FP-TreeConstruct.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/FP-TreeFindPatterns.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/FP-Tree_mConditional.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/MiningEachConditionalFP-tree.png" width="600"><br></center><h3 id="Clustering-1"><a href="#Clustering-1" class="headerlink" title="Clustering"></a>Clustering</h3><h4 id="Kernel-K-Means"><a href="#Kernel-K-Means" class="headerlink" title="Kernel K-Means"></a>Kernel K-Means</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/KernelK-Means.png" width="600"><br></center><h3 id="Community-detection"><a href="#Community-detection" class="headerlink" title="Community detection"></a>Community detection</h3><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CPMExample1.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CPMExample2.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/CPMExample3.png" width="600"><br></center><h4 id="Spectral-Clustering"><a href="#Spectral-Clustering" class="headerlink" title="Spectral Clustering"></a>Spectral Clustering</h4><center><br><img src="/2019/01/06/数据分析与挖掘Exam/SpectralClusteringExample1.png" width="600"><br><img src="/2019/01/06/数据分析与挖掘Exam/SpectralClusteringExample2.png" width="600"><br></center><h4 id="MCL-1"><a href="#MCL-1" class="headerlink" title="MCL"></a>MCL</h4><center><br>    <img src="/2019/01/06/数据分析与挖掘Exam/MarkovChains.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/MarkovChains2.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/WeightedGraphs.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/MCL_SelfLoop.png" width="600"><br>    <img src="/2019/01/06/数据分析与挖掘Exam/MCL_Inflation.png" width="600"><br></center><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h3 id="Classification-1"><a href="#Classification-1" class="headerlink" title="Classification"></a>Classification</h3><h4 id="经典"><a href="#经典" class="headerlink" title="经典"></a>经典</h4><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">关注点</th><th style="text-align:center">注意</th><th style="text-align:center">相似度量</th></tr></thead><tbody><tr><td style="text-align:center">Decision Tree</td><td style="text-align:center">选择属性的方式</td><td style="text-align:center">信息增益、信息增益比、基尼指数</td><td style="text-align:center">同左</td></tr><tr><td style="text-align:center">SVM</td><td style="text-align:center">核函数</td><td style="text-align:center">让离超平面比较近的点尽可能的远离超平面</td><td style="text-align:center">高维映射</td></tr><tr><td style="text-align:center">Bayes</td><td style="text-align:center">后验概率最大化</td><td style="text-align:center">若属性间存在依赖关联，使用贝叶斯置信网络</td><td style="text-align:center">概率</td></tr><tr><td style="text-align:center">ANN</td><td style="text-align:center">“黑盒”</td><td style="text-align:center">后向传播更新权重，优化模型</td></tr></tbody></table><h4 id="集成方法"><a href="#集成方法" class="headerlink" title="集成方法"></a>集成方法</h4><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">关注点</th><th style="text-align:center">注意</th><th style="text-align:center">相似度量</th></tr></thead><tbody><tr><td style="text-align:center">Bagging</td><td style="text-align:center">平等”投票”</td><td style="text-align:center">票数高的预测即为最终预测结果</td><td style="text-align:center">多模型</td></tr><tr><td style="text-align:center">Boosting</td><td style="text-align:center">加权”投票”</td><td style="text-align:center">权重为模型准确率</td><td style="text-align:center">多模型</td></tr><tr><td style="text-align:center">Random Forest</td><td style="text-align:center">“决策树”的装袋</td><td style="text-align:center">随机选择属性(平等)、随机线性组合(权重)</td><td style="text-align:center">多模型</td></tr></tbody></table><h3 id="频繁模式"><a href="#频繁模式" class="headerlink" title="频繁模式"></a>频繁模式</h3><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">关注点</th><th style="text-align:center">注意</th><th style="text-align:center">相似度量</th></tr></thead><tbody><tr><td style="text-align:center">Apriori</td><td style="text-align:center">候选消除算法</td><td style="text-align:center">两条定律</td><td style="text-align:center">最小支持度</td></tr><tr><td style="text-align:center">FP-growth</td><td style="text-align:center">扫描两遍数据记录即可</td><td style="text-align:center">构造FP-Tree,基于条件模式(前缀)递归构造FP树</td><td style="text-align:center">最小支持度</td></tr></tbody></table><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">关注点</th><th style="text-align:center">注意</th><th style="text-align:center">相似度量</th></tr></thead><tbody><tr><td style="text-align:center">K-Means</td><td style="text-align:center">以”均值”更新聚类中心</td><td style="text-align:center">++:最远点、Medoid:中心点、Medians:中位数、Mode、Kernel</td><td style="text-align:center">距离</td></tr><tr><td style="text-align:center">BIRCH</td><td style="text-align:center">CF-Tree结点即聚类的簇</td><td style="text-align:center">利用层次方法的平衡迭代规约和聚类：使用CF树并逐步调整子集群的质量</td><td style="text-align:center">最大样本半径阈值T</td></tr><tr><td style="text-align:center">DBSCAN</td><td style="text-align:center">由密度可达关系导出的最大密度相连的样本集合，即簇</td><td style="text-align:center"></td><td style="text-align:center">(ϵ, MinPts)</td></tr><tr><td style="text-align:center">E-M algorithm</td><td style="text-align:center">”最大似然估计“</td><td style="text-align:center">K-Means （距离） -&gt;&gt; E-M algorithm (概率分布)</td><td style="text-align:center">概率</td></tr><tr><td style="text-align:center">AP算法</td><td style="text-align:center">不断更新每一个点的responsibility和availability</td><td style="text-align:center">产生m个高质量的exemplar后，指派剩余点</td><td style="text-align:center">归属度、吸引度</td></tr><tr><td style="text-align:center">Local density-based</td><td style="text-align:center">假设聚类中心周围都是密度比其低的点，同时这些点到该聚类中心的距离比其到其他聚类中心更近</td><td style="text-align:center">δ<em>{min}和ρ</em>{min}找到聚类中心后，指派剩余点</td><td style="text-align:center">密度、距离</td></tr></tbody></table><h3 id="图聚类"><a href="#图聚类" class="headerlink" title="图聚类"></a>图聚类</h3><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">关注点</th><th style="text-align:center">注意</th><th style="text-align:center">相似度量</th></tr></thead><tbody><tr><td style="text-align:center">CPM</td><td style="text-align:center">完全子图-&gt;重叠矩阵-&gt;社区邻接矩阵</td><td style="text-align:center">构造矩阵时完全子图皆为结点</td><td style="text-align:center">重叠结点</td></tr><tr><td style="text-align:center">谱聚类</td><td style="text-align:center">拉普拉斯特征映射（降维） + K-Means</td><td style="text-align:center">构造邻接矩阵的方式选择、Ratio-Cut/N-Cut</td><td style="text-align:center">距离</td></tr><tr><td style="text-align:center">G Nand Q</td><td style="text-align:center">删除边介数最大的边</td><td style="text-align:center">边介数:网络中任意两个节点通过此边的最短路径的数目</td><td style="text-align:center">边介数</td></tr><tr><td style="text-align:center">MCL</td><td style="text-align:center"><strong>Expansion</strong> 和 <strong>Inflation</strong> 将不断的交替进行</td><td style="text-align:center"><strong>Expansion</strong>：加强区域间的联系（随机游走）<br>Inflation：分化联系（强者恒强）</td><td style="text-align:center">概率</td></tr></tbody></table><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li><p>看相关参考书目《数据挖掘：概念与技术》《数据挖掘导论》课后例题  着重看”简单计算”</p></li><li><p>Collaborative Filtering</p><p><a href="https://www.cnblogs.com/pinard/p/6349233.html" target="_blank" rel="noopener">协同过滤推荐算法总结</a></p><p><a href="https://www.cnblogs.com/pinard/p/6351319.html" target="_blank" rel="noopener">矩阵分解在协同过滤推荐算法中的应用</a></p><p><a href="https://www.cnblogs.com/pinard/p/6362647.html" target="_blank" rel="noopener">SimRank协同过滤推荐算法</a></p></li><li><p><a href="https://www.cnblogs.com/pinard/p/6912636.html" target="_blank" rel="noopener">EM算法原理总结</a></p></li><li><p>特征工程</p><p><a href="https://www.cnblogs.com/pinard/p/9032759.html" target="_blank" rel="noopener">特征工程之特征选择</a></p><p><a href="https://www.cnblogs.com/pinard/p/9061549.html" target="_blank" rel="noopener">特征工程之特征表达</a></p><p><a href="https://www.cnblogs.com/pinard/p/9093890.html" target="_blank" rel="noopener">特征工程之特征预处理</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【内容描述】&lt;a href=&quot;https://captainzj.github.io/2019/01/06/数据分析与挖掘/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《数据分析与挖掘》&lt;/a&gt;之后篇&lt;/p&gt;
    
    </summary>
    
      <category term="XD" scheme="http://yoursite.com/categories/XD/"/>
    
    
  </entry>
  
  <entry>
    <title>数据分析与挖掘</title>
    <link href="http://yoursite.com/2019/01/01/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%8C%96%E6%8E%98/"/>
    <id>http://yoursite.com/2019/01/01/数据分析与挖掘/</id>
    <published>2019-01-01T06:42:25.000Z</published>
    <updated>2019-01-09T13:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【内容描述】 基于《数据挖掘：概念与技术》的简述，欲了解细节，强烈建议读原书！！！</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><h4 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Relational records'</span>  关系记录</span><br><span class="line">  - Relational tables, highly structured 关系表，高度结构化</span><br><span class="line">* <span class="string">'Data matrix'</span>, e.g., numerical matrix, crosstabs 数据矩阵，例如数值矩阵，交叉表</span><br><span class="line">* <span class="string">'Transaction data'</span> 交易数据</span><br><span class="line">* <span class="string">'Document data'</span>: Term-frequency vector (matrix) of text documents</span><br><span class="line">  文档数据：文本文档的术语 - 频率向量（矩阵）</span><br><span class="line">* <span class="string">'Transportation network'</span> 交通网络</span><br><span class="line">* <span class="string">'World Wide Web'</span> 万维网</span><br><span class="line">* <span class="string">'Molecular Structures'</span> 分子结构</span><br><span class="line">* <span class="string">'Social or information networks'</span> 社交或信息网络</span><br></pre></td></tr></table></figure><ul><li><p><strong>Attribute Types</strong> </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Nominal'</span>: categories, states, <span class="keyword">or</span> “names of things” <span class="comment"># 标称属性: 类别，状态或“事物名称”</span></span><br><span class="line">- Hair_color = &#123;auburn, black, blond, brown, grey, red, white&#125;</span><br><span class="line">- marital status, occupation, ID numbers, zip codes 婚姻状况，职业，身份证号码，邮政编码</span><br><span class="line">* <span class="string">'Binary'</span> <span class="comment"># 二元属性</span></span><br><span class="line">- Nominal attribute <span class="keyword">with</span> only <span class="number">2</span> states (<span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span>) 仅有<span class="number">2</span>个状态（<span class="number">0</span>和<span class="number">1</span>）的标称属性</span><br><span class="line">- Symmetric binary: both outcomes equally important.  e.g., gender</span><br><span class="line">  对称二元：两种结果同样重要. 例如，性别</span><br><span class="line">- Asymmetric binary: outcomes <span class="keyword">not</span> equally important.  e.g., medical test (positive vs. negative)</span><br><span class="line">  不对称二元：结果不是同等重要的.  例如，医学检验（正面与负面）</span><br><span class="line">- Convention: assign <span class="number">1</span> to most important outcome (e.g., HIV positive)</span><br><span class="line">  公约：为最重要的结果指定<span class="number">1</span>  （例如艾滋病毒阳性）</span><br><span class="line">* <span class="string">'Ordinal'</span>  <span class="comment"># 序数属性</span></span><br><span class="line">- Values have a meaningful order (ranking) but magnitude between successive values <span class="keyword">is</span> <span class="keyword">not</span> known</span><br><span class="line">  值具有有意义的顺序（排名），但连续值之间的大小未知</span><br><span class="line">- Size = &#123;small, medium, large&#125;, grades, army rankings</span><br><span class="line">  大小= &#123;小，中，大&#125;，成绩，军队排名</span><br><span class="line">* <span class="string">'Numeric'</span> <span class="comment"># 数值属性</span></span><br><span class="line"> - `Interval` 间隔</span><br><span class="line">- Measured on a scale of equal-sized units  按相同大小的单位测量</span><br><span class="line">- Values have order 数值有序 E.g., temperature <span class="keyword">in</span> C˚<span class="keyword">or</span> F˚, calendar dates</span><br><span class="line">- No true zero-point 无真正<span class="string">"零点"</span></span><br><span class="line">- `Ratio` 比率(倍数)</span><br><span class="line">- Inherent zero-point 固有零点</span><br><span class="line">- We can speak of values <span class="keyword">as</span> being an order of magnitude larger than the unit of measurement (<span class="number">10</span> K˚ <span class="keyword">is</span> twice <span class="keyword">as</span> high <span class="keyword">as</span> <span class="number">5</span> K˚).</span><br><span class="line">  我们可以说价值比测量单位大一个数量级（<span class="number">10</span>K˚是<span class="number">5</span>K˚的两倍）</span><br><span class="line">- e.g., temperature <span class="keyword">in</span> Kelvin, length, counts, monetary quantities</span><br><span class="line">  例如，以开尔文为单位的温度，长度，计数，货币数量</span><br><span class="line">* <span class="string">'Discrete Attribute'</span>  <span class="comment"># 离散属性</span></span><br><span class="line">- Has only a finite <span class="keyword">or</span> countably infinite set of values 只有一组有限或可数无限的值</span><br><span class="line">- E.g., zip codes, profession, <span class="keyword">or</span> the set of words <span class="keyword">in</span> a collection of documents </span><br><span class="line">  例如，邮政编码，专业或文档集合中的单词集</span><br><span class="line">- Sometimes, represented <span class="keyword">as</span> integer variables 有时，表示为`整数变量`</span><br><span class="line">- Note: Binary attributes are a special case of discrete attributes </span><br><span class="line">  注意：二进制属性是离散属性的特例</span><br><span class="line">* <span class="string">'Continuous Attribute'</span>  <span class="comment"># 连续属性</span></span><br><span class="line">- Has real numbers <span class="keyword">as</span> attribute values  将实数作为属性值</span><br><span class="line">- E.g., temperature, height, <span class="keyword">or</span> weight  例如，温度，高度或重量</span><br><span class="line">- Practically, real values can only be measured <span class="keyword">and</span> represented using a finite number of digits</span><br><span class="line">  实际上，只能使用有限数字来测量和表示实际值</span><br><span class="line">- Continuous attributes are typically represented <span class="keyword">as</span> floating-point variables</span><br><span class="line">  连续属性通常表示为`浮点变量`</span><br></pre></td></tr></table></figure></li></ul><h4 id="Data-statistics"><a href="#Data-statistics" class="headerlink" title="Data statistics"></a>Data statistics</h4><h5 id="Data-dispersion-分散-characteristics"><a href="#Data-dispersion-分散-characteristics" class="headerlink" title="Data dispersion(分散) characteristics"></a>Data dispersion(分散) characteristics</h5><ul><li><p><strong>Mean</strong></p><ul><li><p>Mean (<code>algebraic measure</code>) (sample vs. population):</p><p>Note: $n$ is sample size and $N$ is population size. </p><p>$\underbrace{\bar{x} = \frac{1}{n}\sum_{i=1}^{n}x_i}_\text{sample}$    </p><p>$\underbrace{\mu  = \frac{1}{N}\sum_{i=1}^{n}x_i}_\text{population}$</p></li><li><p>Weighted arithmetic mean: 算术平均数/<code>加权平均数</code></p><p>$\bar{x}=\frac{\sum_{i=1}^{n}w_ix}{\sum_{i=1}^{n}w_i}$</p></li></ul></li><li><p><strong>Median</strong></p><p>Middle value if odd number of values, or average of the middle two values otherwise</p></li><li><p><strong>Mode</strong><br>Value that occurs <code>most frequently</code> in the data</p></li><li><p><strong>Properties of Normal Distribution Curve</strong></p><center><br>    <img src="/2019/01/01/数据分析与挖掘/NormalDistributionCurve.png" style="zoom:40%"><br></center></li><li><p><strong>Variance and Standard Deviation (sample: s, population: σ)</strong></p><ul><li><p><strong>Variance</strong>: (algebraic, scalable computation)</p><p>$s^2=\frac{1}{n-1}\sum_{i=1}^{n}(x_i-x)^2=\frac{1}{n-1}[\sum_{i=1}^{n}{x_i}^2-\frac{1}{n}(\sum_{i=1}^{n}x_i)^2]$</p><p>${\sigma}^2 =\frac{1}{N}\sum_{i=1}^{n}(x_i-\mu)^2 = \frac{1}{N}\sum_{i=1}^{n}{x_i}^2-{\mu}^2 $</p></li><li><p><strong>Standard deviation</strong> $s$ (or $σ$) is the square root of variance $s^2$ (or $σ^2$)</p><p>$s = \sqrt{s^2}$</p><p>$\sigma = \sqrt{\sigma^2} $</p></li></ul></li><li><p><strong>standardized measure (z-score)</strong></p><p>$z=\frac{x-\mu}{\sigma}$</p></li></ul><h5 id="Graphic-Displays-of-Basic-Statistical-Descriptions"><a href="#Graphic-Displays-of-Basic-Statistical-Descriptions" class="headerlink" title="Graphic Displays of Basic Statistical Descriptions"></a>Graphic Displays of Basic Statistical Descriptions</h5><ul><li><p><strong>Boxplot:</strong> graphic display of five-number summary  箱线图</p><div style="width:1000px;margin:0;padding:0"><br>    <div style="float:left;width:200px;"><img src="/2019/01/01/数据分析与挖掘/Boxplot.png"></div><br>    <div style="float:right;width:800px;padding:14px"><br>        &bull; <b>Quartiles</b>: Q1 (25th percentile), Q3 (75th percentile)<br><br>        &bull; <b>Inter-quartile range</b>: IQR = Q3 – Q1 <br><br>        &bull; <b>Five number summary</b>: min, Q1, median, Q3, max<br><br>        &bull; <b>Boxplot</b>: Data is represented with a box<br><br>        &emsp; &bull; <b>Q1, Q3, IQR</b>:  The ends of the box are at the first and third quartiles, i.e., the height of the box is IQR<br><br>        &emsp; &bull; <b>Median (Q2)</b> is marked by a line within the box <br><br>        &emsp; &bull; <b>Whiskers</b>: two lines outside the box extended to Minimum and Maximum<br><br>    </div><br>    <div style="clear:both"></div><br></div></li><li><p><strong>Histogram:</strong> x-axis are values, y-axis repres. frequencies 柱状图/直方图</p></li><li><p><strong>Quantile plot:</strong>  each value $x_i$  is paired with $f_i$  indicating that approximately $100 f_i \%$ of data  are ​$\leq  x_i$ 分位图</p></li><li><p><strong>Quantile-quantile (q-q) plot:</strong> graphs the quantiles of one univariant distribution against the corresponding quantiles of another 绘制一个单变量分布的分位数与另一个分配的相应分位数的关系图.QQPlot图是用于直观验证一组数据是否来自某个分布，或者验证某两组数据是否来自同一（族）分布。在教学和软件中<code>常用的是检验数据是否来自于正态分布</code>。</p></li><li><p><strong>Scatter plot:</strong> each pair of values is a pair of coordinates and plotted as points in the plane 每对值是一对坐标并绘制为平面中的点 </p></li></ul><h5 id="Distance-on-Numeric-Data"><a href="#Distance-on-Numeric-Data" class="headerlink" title="Distance on Numeric Data"></a>Distance on Numeric Data</h5><p><strong>Dissimilarity (distance) matrix</strong>:  Usually symmetric, thus a <code>triangular matrix</code><br>$$<br>\begin{pmatrix}<br>0 &amp;  &amp;  &amp; \<br>d(2,1) &amp; 0  &amp;  &amp; \<br>… &amp; … &amp; … &amp; \<br>d(n,1) &amp; d(n,2)  &amp; … &amp; 0<br>\end{pmatrix}<br>$$</p><ul><li><p><strong>Minkowski distance</strong><br>$$<br>d(i,j)=\sqrt[p]{\left | x_{i1}-x_{j1} \right |^p+\left | x_{i2}-x_{j2} \right |^p+……+\left | x_{il}-x_{jl} \right |^p}<br>$$</p></li><li><p>$p = 1: (L_1 norm)$ <strong>Manhattan (or city block) distance</strong></p><p>E.g.,the Hamming distance: the number of bits that are different between two binary<br>vectors<br>$$<br>d(i,j)=\left | x_{i1}-x_{j1} \right |+\left | x_{i2}-x_{j2} \right |+……+\left | x_{il}-x_{jl} \right |<br>$$</p></li><li><p>$p = 2:  (L_2 norm)$ <strong>Euclidean distance</strong><br>$$<br>d(i,j)=\sqrt{\left | x_{i1}-x_{j1} \right |^2+\left | x_{i2}-x_{j2} \right |^2+……+\left | x_{il}-x_{jl} \right |^2}<br>$$</p></li><li><p>$p→ ∞: (L_{max} norm,L_∞ norm) $<strong>“supremum” distance</strong></p><p>The maximum difference between any component (attribute) of the vectors<br>$$<br>d(i,j)=\lim_{p→ ∞}\sqrt[p]{\left | x_{i1}-x_{j1} \right |^p+\left | x_{i2}-x_{j2} \right |^p+……+\left | x_{il}-x_{jl} \right |^p}=\max_{f=1}^{l}\left|x_{if}-x_{jf}\right|<br>$$</p></li></ul><h5 id="Proximity-邻近-Measure-for-Binary-Attributes"><a href="#Proximity-邻近-Measure-for-Binary-Attributes" class="headerlink" title="Proximity 邻近 Measure for Binary Attributes"></a>Proximity 邻近 Measure for Binary Attributes</h5><center><br>    <img src="/2019/01/01/数据分析与挖掘/ProximityMeasureforBinaryAttributes.png" width="600"><br>    <img src="/2019/01/01/数据分析与挖掘/Dissimilarity betweenAsymmetricBinaryVariables.png" width="600"><br>    <img src="/2019/01/01/数据分析与挖掘/CalculatingCosineSimilarity.png" width="600"><br></center><h3 id="Data-preprocessing"><a href="#Data-preprocessing" class="headerlink" title="Data preprocessing"></a>Data preprocessing</h3><center><br><img src="/2019/01/01/数据分析与挖掘/dataPreprocess_mainTask.png" width="600"><br></center><h4 id="Data-cleaning"><a href="#Data-cleaning" class="headerlink" title="Data cleaning"></a>Data cleaning</h4><ul><li><p>Handle <code>missing data</code>(Incomplete), smooth <code>noisy data</code>,identify or remove <code>outliers</code>, and resolve <code>inconsistencies</code> 处理丢失的数据，平滑噪声数据，识别或删除异常值，并解决不一致问题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Data discrepancy detection'</span>  数据差异检测</span><br><span class="line">    - Use metadata (e.g., domain, range, dependency, distribution) </span><br><span class="line">      使用元数据（例如，域，范围，依赖关系，分发）</span><br><span class="line">    - Check field overloading  检查字段重载</span><br><span class="line">    - Check uniqueness rule, consecutive rule <span class="keyword">and</span> null rule</span><br><span class="line">      检查唯一性规则，连续规则和空规则</span><br><span class="line">    - Use commercial tools 使用商业工具</span><br><span class="line">      - Data scrubbing: use simple domain knowledge (e.g., postal code, spell-check) to detect errors <span class="keyword">and</span> make corrections </span><br><span class="line">        数据清理：使用简单的域知识（例如，邮政编码，拼写检查）来检测错误并进行更正</span><br><span class="line">      - Data auditing: by analyzing data to discover rules <span class="keyword">and</span> relationship to detect violators (e.g., correlation <span class="keyword">and</span> clustering to find outliers)  </span><br><span class="line">        数据审计：通过分析数据来发现规则和检测违规者的关系（例如，关联和聚类以查找异常值）</span><br><span class="line"></span><br><span class="line">* <span class="string">'Data migration and integration'</span> 数据迁移和集成</span><br><span class="line">  - Data migration tools: allow transformations to be specified 数据迁移工具：允许指定转换</span><br><span class="line">  - ETL (Extraction/Transformation/Loading) tools: allow users to specify transformations through a graphical user interface  </span><br><span class="line">    ETL（提取/转换/加载）工具：允许用户通过图形用户界面指定转换</span><br><span class="line"></span><br><span class="line">* <span class="string">'Integration of the two processes'</span> </span><br><span class="line">  - Iterative <span class="keyword">and</span> interactive (e.g., Potter’s Wheels)  迭代和互动（例如，波特的轮子）</span><br></pre></td></tr></table></figure></li></ul><h5 id="How-to-Handle-Missing-Data"><a href="#How-to-Handle-Missing-Data" class="headerlink" title="How to Handle Missing Data?"></a>How to Handle Missing Data?</h5><blockquote><p>1.忽略元组  2.手动填充  3. 自动（以unknown/均值/最可能的值）填充</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Ignore the tuple'</span>: usually done when <span class="class"><span class="keyword">class</span> <span class="title">label</span> <span class="title">is</span> <span class="title">missing</span> <span class="params">(when doing classification)</span>—<span class="title">not</span> <span class="title">effective</span> <span class="title">when</span> <span class="title">the</span> % <span class="title">of</span> <span class="title">missing</span> <span class="title">values</span> <span class="title">per</span> <span class="title">attribute</span> <span class="title">varies</span> <span class="title">considerably</span> </span></span><br><span class="line"><span class="class">  忽略元组：通常在缺少类标签时（进行分类时）完成 - 当每个属性的缺失值百分比变化很大时<span class="params">(该属性)</span>无效</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">* Fill in the missing value 'manually': tedious + infeasible? </span><br><span class="line">  手动填写缺失值：单调乏味+不可行？</span><br><span class="line"></span><br><span class="line">* Fill <span class="keyword">in</span> it <span class="string">'automatically'</span> <span class="keyword">with</span></span><br><span class="line">  - a <span class="keyword">global</span> constant : e.g., “unknown”, a new <span class="class"><span class="keyword">class</span>?! </span></span><br><span class="line"><span class="class">  - <span class="title">the</span> <span class="title">attribute</span> <span class="title">mean</span>  属性平均值<span class="params">(与下一条的不同？)</span></span></span><br><span class="line"><span class="class">  - <span class="title">the</span> <span class="title">attribute</span> <span class="title">mean</span> <span class="title">for</span> <span class="title">all</span> <span class="title">samples</span> <span class="title">belonging</span> <span class="title">to</span> <span class="title">the</span> <span class="title">same</span> <span class="title">class</span>:</span> <span class="string">'smarter'</span></span><br><span class="line">  - the most probable value: inference-based such <span class="keyword">as</span> Bayesian formula <span class="keyword">or</span> decision tree</span><br></pre></td></tr></table></figure><h5 id="How-to-Handle-Noisy-Data"><a href="#How-to-Handle-Noisy-Data" class="headerlink" title="How to Handle Noisy Data?"></a>How to Handle Noisy Data?</h5><blockquote><p>1.分档  2.回归 3.聚类（无监督） 4.半监督</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="string">'Binning'</span> 分档</span><br><span class="line">  - First sort data <span class="keyword">and</span> partition into (equal-frequency) bins 首先将数据排序并分区为（等频）箱</span><br><span class="line">  - Then one can smooth by bin means, smooth by bin median, smooth by bin boundaries, etc.然后，可以通过bin均值平滑，通过bin中值平滑，通过bin边界平滑等。</span><br><span class="line">* <span class="string">'Regression'</span> 回归</span><br><span class="line">  - Smooth by fitting the data into regression functions 通过将数据拟合到回归函数中来平滑</span><br><span class="line">* <span class="string">'Clustering'</span> 聚类</span><br><span class="line">  - Detect <span class="keyword">and</span> remove outliers 检测并删除异常值</span><br><span class="line">* <span class="string">'Semi-supervised'</span>: Combined computer <span class="keyword">and</span> human inspection 半监督：计算机和人工检查相结合</span><br><span class="line">  - Detect suspicious values <span class="keyword">and</span> check by human (e.g., deal <span class="keyword">with</span> possible outliers) 检测可疑值并由人查验（例如，处理可能的异常值）</span><br></pre></td></tr></table></figure><h4 id="Data-integrating"><a href="#Data-integrating" class="headerlink" title="Data integrating"></a>Data integrating</h4><p>Integration of multiple databases, data cubes, or files 集成多个数据库，数据立方体或文件</p><blockquote><p>1.数据集成 2.模式集成 3.实体识别 4.检测和解决数据值的冲突</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Data integration'</span></span><br><span class="line">  - Combining data <span class="keyword">from</span> multiple sources into a coherent store </span><br><span class="line">    将来自多个来源的数据组合到一个连贯的存储中</span><br><span class="line">- <span class="string">'Schema integration'</span>: e.g., A.cust-id \equiv  B.cust-<span class="comment">#  模式集成</span></span><br><span class="line">  - Integrate metadata <span class="keyword">from</span> different sources </span><br><span class="line">集成来自不同来源的元数据</span><br><span class="line">- <span class="string">'Entity identification'</span> 实体识别</span><br><span class="line">  - Identify real world entities <span class="keyword">from</span> multiple data sources, e.g., Bill Clinton = William Clinton  </span><br><span class="line">    从多个数据源中识别真实世界的实体，例如Bill Clinton = William Clinton</span><br><span class="line">- <span class="string">'Detecting and resolving data value conflicts'</span>  检测和解决数据值冲突</span><br><span class="line">  - For the same real world entity, attribute values <span class="keyword">from</span> different sources are different </span><br><span class="line">    对于相同的现实世界实体，来自不同来源的属性值是不同的</span><br><span class="line">  - Possible reasons: different representations, different scales, e.g., metric vs. British units </span><br><span class="line">    可能的原因：不同的表示，不同的比例，例如，公制与英制单位</span><br></pre></td></tr></table></figure><h5 id="Handling-Redundancy-in-Data-Integration"><a href="#Handling-Redundancy-in-Data-Integration" class="headerlink" title="Handling Redundancy in Data Integration"></a>Handling Redundancy in Data Integration</h5><blockquote><p>1.冗余原因（对象标识、派生数据）2.检测手段（相关性和协方差分析）3.仔细整合</p></blockquote><ul><li><p>Redundant data occur often when integration of multiple databases 当多个数据库集成时，通常会出现冗余数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Object identification'</span>:  The same attribute <span class="keyword">or</span> object may have different names <span class="keyword">in</span> different databases </span><br><span class="line">  对象标识：相同的属性或对象在不同的数据库中可能具有不同的名称</span><br><span class="line">- <span class="string">'Derivable data:'</span> One attribute may be a “derived” attribute <span class="keyword">in</span> another table, e.g., annual revenue </span><br><span class="line">  派生数据：一个属性可以是另一个表中的“派生”属性，例如年收入</span><br></pre></td></tr></table></figure></li><li><p>Redundant attributes may be able to be detected by <a href="#Correlation Analysis">correlation analysis</a> and <a href="#Covariance">covariance analysis</a> 可以通过相关性分析和协方差分析来检测冗余属性</p></li><li><p>Careful integration of the data from multiple sources may help reduce/avoid redundancies and inconsistencies and improve mining speed and quality  仔细整合来自多个来源的数据可能有助于减少/避免冗余和不一致，并提高”采矿“速度和质量</p></li></ul><h4 id="Data-Reduction"><a href="#Data-Reduction" class="headerlink" title="Data Reduction"></a>Data Reduction</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Data reduction'</span> 数据压缩</span><br><span class="line">  - Obtain a reduced representation of the data set  获得数据集的缩减表示</span><br><span class="line">    - much smaller <span class="keyword">in</span> volume but yet produces almost the same analytical results </span><br><span class="line">      体积小得多，但产生几乎相同的分析结果</span><br><span class="line">- <span class="string">'Why data reduction ?'</span>—A database/data warehouse(仓库) may store terabytes of data</span><br><span class="line">  - Complex analysis may take a very long time to run on the complete data set </span><br><span class="line">    复杂分析可能需要很长时间才能在完整数据集上运行</span><br></pre></td></tr></table></figure><h5 id="Methods-for-data-reduction"><a href="#Methods-for-data-reduction" class="headerlink" title="Methods for data reduction"></a><strong>Methods for data reduction</strong></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Regression and Log-Linear Models'</span>  （Parametric methods）</span><br><span class="line">- <span class="string">'Histograms, clustering, sampling'</span>  （Non-parametric methods）</span><br><span class="line">&gt; sampling: 选择具有代表性的子集；简单随机、放回、不放回、分层抽样</span><br><span class="line">- <span class="string">'Data cube aggregation'</span> 数据立方体聚合</span><br><span class="line">- <span class="string">'Data Compression'</span></span><br></pre></td></tr></table></figure><ul><li><p>Data cube aggregation 数据立方体聚合</p><p>The aggregated data for <strong>an individual entity of interest</strong>  感兴趣的实体聚合数据</p><center><br><img src="/2019/01/01/数据分析与挖掘/DataCubeAggregation.png" style="zoom:40%"><br></center><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Demographic Data &apos;人口统计学数据&apos;（Service、Age、Gender、Job level、Workforce Segment）</span><br><span class="line">- Organisational process data &apos;组织行为处理数据&apos;（Performance rating、Potential rating、Salary increases、Turnover、in training &amp; development）</span><br><span class="line">- Predictive attitudinal data &apos;预测态度数据&apos;（Competencies能力、Intention to stay、AffectIve commitment、Job satisfaction、Discretionary自动支配 effort）</span><br></pre></td></tr></table></figure></li><li><p>Data compression</p><center><br><img src="/2019/01/01/数据分析与挖掘/DataCompression.png" style="zoom:30%"><br></center></li></ul><h5 id="Dimensionality-Reduction-Techniques"><a href="#Dimensionality-Reduction-Techniques" class="headerlink" title="Dimensionality Reduction Techniques"></a>Dimensionality Reduction Techniques</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dimensionality reduction methodologies</span></span><br><span class="line">- `Feature selection`: Find a subset of the original variables (<span class="keyword">or</span> features, attributes)    找寻合适子集(仅收集与分析任务相关的属性)</span><br><span class="line">- `Feature extraction`: Transform the data <span class="keyword">in</span> the high-dimensional space to a space of fewer dimensions  </span><br><span class="line">    高维映射至低维(降维)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Some typical dimensionality methods</span></span><br><span class="line">* Principal Component Analysis (<span class="string">'PCA'</span>) </span><br><span class="line">    - A statistical procedure that uses an orthogonal transformation to convert a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components </span><br><span class="line">    一种统计过程，它使用<span class="string">'正交变换'</span>将可能相关变量的一组观察值转换为一组称为主成分的线性不相关变量值</span><br><span class="line">    - The original data are projected onto a much smaller space, resulting <span class="keyword">in</span> dimensionality reduction </span><br><span class="line">    将原始数据投影到更小的空间，从而减少维数 (Feature extraction 降维)</span><br><span class="line">    - Method:  Find the eigenvectors of the covariance matrix, <span class="keyword">and</span> these eigenvectors define the new space </span><br><span class="line">    找到协方差矩阵的特征向量，这些特征向量定义新的空间</span><br><span class="line"></span><br><span class="line">* <span class="string">'Supervised and nonlinear techniques'</span></span><br><span class="line">- `Feature subset selection`</span><br><span class="line">    - Best combined attribute selection(Best step-wise feature selection) <span class="keyword">and</span> elimination(Repeatedly eliminate the worst attribute)</span><br><span class="line">- `Feature creation`</span><br><span class="line">    - Create new attributes (features) that can capture the important information <span class="keyword">in</span> a data set more effectively than the original ones </span><br><span class="line">    创建新属性（功能），可以比原始信息更有效地捕获数据集中的重要信息   (比如，从成绩单中得出平均分/绩点)</span><br><span class="line">    - <span class="string">'Three general methodologies'</span></span><br><span class="line">    - `Attribute extraction` 降维</span><br><span class="line">        - Domain-specific</span><br><span class="line">        - Mapping data to new space (see: data reduction)</span><br><span class="line">        E.g., Fourier transformation, wavelet transformation, manifold approaches (<span class="keyword">not</span> covered)</span><br><span class="line">    - `Attribute construction` </span><br><span class="line">        - Combining features (see: discriminative frequent patterns <span class="keyword">in</span> Chapter on “Advanced Classification”)</span><br><span class="line">        - Data discretization</span><br></pre></td></tr></table></figure><h4 id="Data-transforming"><a href="#Data-transforming" class="headerlink" title="Data transforming"></a>Data transforming</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- A function that maps the entire set of values of a given attribute to a new set of replacement values s.t. each old value can be identified <span class="keyword">with</span> one of the new values  </span><br><span class="line">一种函数，它将给定属性的整个值集映射到一组新的替换值 使得 可以使用其中一个新值标识每个旧值</span><br><span class="line"></span><br><span class="line">- Methods</span><br><span class="line">  - <span class="string">'Smoothing'</span>: Remove noise <span class="keyword">from</span> data</span><br><span class="line">  - <span class="string">'Attribute/feature construction'</span>  属性/特征构建</span><br><span class="line">    - New attributes constructed <span class="keyword">from</span> the given ones</span><br><span class="line">  - <span class="string">'Aggregation'</span>: Summarization, data cube construction</span><br><span class="line">  - <span class="string">'Normalization'</span>: Scaled to fall within a smaller, specified range</span><br><span class="line">    - min-max normalization</span><br><span class="line">    - z-score normalization</span><br><span class="line">    - normalization by decimal scaling</span><br><span class="line">  - <span class="string">'Discretization'</span> 离散化: Concept hierarchy climbing</span><br></pre></td></tr></table></figure><h5 id="Normalization-归一化"><a href="#Normalization-归一化" class="headerlink" title="Normalization 归一化"></a>Normalization 归一化</h5><center><br><img src="/2019/01/01/数据分析与挖掘/Normalization.png" width="600"><br></center><h5 id="Concept-hierarchy-generation-概念层次生成"><a href="#Concept-hierarchy-generation-概念层次生成" class="headerlink" title="Concept hierarchy generation 概念层次生成"></a>Concept hierarchy generation 概念层次生成</h5><center><br><img src="/2019/01/01/数据分析与挖掘/ConceptHierarchyGeneration.png" width="600"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Data Discretization Methods</span></span><br><span class="line">- <span class="string">'Binning'</span> </span><br><span class="line">- Top-down split, unsupervised</span><br><span class="line">- <span class="string">'Histogram'</span> analysis</span><br><span class="line">- Top-down split, unsupervised</span><br><span class="line">- <span class="string">'Clustering'</span> analysis </span><br><span class="line">- Unsupervised, top-down split <span class="keyword">or</span> bottom-up merge</span><br><span class="line">- <span class="string">'Decision-tree'</span> analysis</span><br><span class="line">- Supervised, top-down split</span><br><span class="line">- <span class="string">'Correlation'</span> (e.g., χ<span class="number">2</span>) analysis </span><br><span class="line">- Unsupervised, bottom-up merge</span><br><span class="line">- Note: All the methods can be applied `recursively`</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Concept hierarchy organizes concepts (i.e., attribute values) hierarchically <span class="keyword">and</span> <span class="keyword">is</span> usually associated <span class="keyword">with</span> each dimension <span class="keyword">in</span> a data warehouse </span><br><span class="line">  概念层次结构按层次组织概念（例如属性值），并且通常与数据仓库中的每个维度相关联</span><br><span class="line">- Concept hierarchies facilitate drilling <span class="keyword">and</span> rolling <span class="keyword">in</span> data warehouses to view data <span class="keyword">in</span> multiple granularity </span><br><span class="line">  概念层次结构有助于在数据仓库中钻取和滚动，以多种粒度查看数据</span><br><span class="line">- Concept hierarchy formation: Recursively reduce the data by collecting <span class="keyword">and</span> replacing low level concepts (such <span class="keyword">as</span> numeric values <span class="keyword">for</span> age) by higher level concepts (such <span class="keyword">as</span> youth, adult, <span class="keyword">or</span> senior) </span><br><span class="line">   概念层次结构：通过收集和替换更高级别概念（例如青年，成人或高级）的低级概念（例如年龄的数字值）来递归地减少数据</span><br><span class="line">- Concept hierarchies can be explicitly specified by domain experts <span class="keyword">and</span>/<span class="keyword">or</span> data warehouse designers </span><br><span class="line">  概念层次结构可以由域专家和/或数据仓库设计者明确指定</span><br><span class="line">- Concept hierarchy can be automatically formed <span class="keyword">for</span> both numeric <span class="keyword">and</span> nominal data—For numeric data, use discretization methods shown </span><br><span class="line">  可以为数字和标称数据自动形成概念层次结构 - 对于数字数据，使用显示的离散化方法</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Concept Hierarchy Generation for Nominal Data</span></span><br><span class="line">- Specification of a partial/total ordering of attributes explicitly at the schema level by users <span class="keyword">or</span> experts</span><br><span class="line">- <span class="string">'street &lt; city &lt; state &lt; country'</span></span><br><span class="line">- Specification of a hierarchy <span class="keyword">for</span> a set of values by explicit data grouping</span><br><span class="line">- <span class="string">'&#123;Urbana, Champaign, Chicago&#125; &lt; Illinois'</span></span><br><span class="line">- Specification of only a partial set of attributes</span><br><span class="line">- E.g., only <span class="string">'street &lt; city'</span>, <span class="keyword">not</span> others</span><br><span class="line">- Automatic generation of hierarchies (<span class="keyword">or</span> attribute levels) by the analysis of the number of distinct values</span><br><span class="line">- E.g., <span class="keyword">for</span> a set of attributes:<span class="string">'&#123;street, city, state, country&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatic Concept Hierarchy Generation</span></span><br><span class="line">- Some hierarchies can be automatically generated based on <span class="string">'the analysis of the number'</span> of distinct values per attribute <span class="keyword">in</span> the data set </span><br><span class="line">- The attribute <span class="keyword">with</span> the most distinct values <span class="keyword">is</span> placed at the lowest level of the hierarchy</span><br><span class="line">- Exceptions, e.g., weekday, month, quarter, year</span><br></pre></td></tr></table></figure><center><br><img src="/2019/01/01/数据分析与挖掘/AutomaticConceptHierarchyGeneration.png" width="600"><br></center><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><center><br>    <img src="/2019/01/01/数据分析与挖掘/Summary_datapreprocessing.png" width="600"><br></center><h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><ul><li><p><strong>What is classification?</strong></p><p>根据训练集和类标签（分类属性中的值）构建模型，并将其用于分类新数据，预测其标签。</p><ul><li><p>Supervised learning </p><center><br><img src="/2019/01/01/数据分析与挖掘/SupervisedLearning.png" width="600"><br></center></li></ul></li></ul><pre><code>**监督学习**是机器学习任务的一种。它`从有标记的训练数据中推导出预测标签`。有标记的训练数据是指每个训练实例都包括输入和期望的输出。一句话：**给定数据，预测标签**。(分类、回归)**无监督学习**是机器学习任务的一种。它`从无标记的训练数据中推断结论`。最典型的无监督学习就是聚类分析，它可以在探索性数据分析阶段用于发现隐藏的模式或者对数据进行分组。一句话：**给定数据，寻找隐藏的结构**。</code></pre><ul><li><p><strong>Classification Steps</strong> </p><ol><li><strong>Model construction</strong> 模型构建</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Each sample <span class="keyword">is</span> assumed to belong to a predefined <span class="class"><span class="keyword">class</span> <span class="params">(shown by the class label)</span> </span></span><br><span class="line"><span class="class">  假设每个样本属于预定义的类（由类标签显示）</span></span><br><span class="line"><span class="class">- <span class="title">The</span> <span class="title">set</span> <span class="title">of</span> <span class="title">samples</span> <span class="title">used</span> <span class="title">for</span> <span class="title">model</span> <span class="title">construction</span> <span class="title">is</span> <span class="title">training</span> <span class="title">set</span>  </span></span><br><span class="line"><span class="class">  用于模型构建的样本集是训练集</span></span><br><span class="line"><span class="class">- '<span class="title">Model</span>':</span> Represented <span class="keyword">as</span> decision trees, rules, mathematical formulas, <span class="keyword">or</span> other forms </span><br><span class="line">  模型：表示为决策树，规则，数学公式或其他形式</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Model Validation and Testing</strong></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Test'</span>: Estimate accuracy of the model </span><br><span class="line">  - The known label of test sample <span class="keyword">is</span> compared <span class="keyword">with</span> the classified result <span class="keyword">from</span> the model  </span><br><span class="line">    将已知的测试样品标签与模型的分类结果进行比较</span><br><span class="line">  - Accuracy: % of test set samples that are correctly classified by the model </span><br><span class="line">    准确度：按模型正确分类的测试集样本的百分比 </span><br><span class="line">  - Test set <span class="keyword">is</span> independent of training set  测试集独立于训练集</span><br><span class="line">- <span class="string">'Validation'</span>: If the test set <span class="keyword">is</span> used to select <span class="keyword">or</span> refine models, it <span class="keyword">is</span> called validation (development/test) set </span><br><span class="line">  验证：如果测试集用于选择或改进模型，则称为验证（开发/测试）集 To be better【与测试集相较，强调refine models】</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Model Deployment</strong></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">If the accuracy <span class="keyword">is</span> acceptable, use the model to classify new data 【模型部署】</span><br></pre></td></tr></table></figure></li></ul><h3 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a><strong>Algorithms</strong></h3><h4 id="Decision-tree-ID3-C4-5-CART"><a href="#Decision-tree-ID3-C4-5-CART" class="headerlink" title="Decision tree-ID3,C4.5,CART"></a><a href="https://captainzj.github.io/2018/11/24/Classification-Algorithm/" target="_blank" rel="noopener">Decision tree-ID3,C4.5,CART</a></h4><p><a href="https://www.cnblogs.com/pinard/p/6050306.html" target="_blank" rel="noopener">决策树算法原理(上)</a>、<a href="https://www.cnblogs.com/pinard/p/6053344.html" target="_blank" rel="noopener">决策树算法原理(下)</a>、<a href="https://www.cnblogs.com/pinard/p/6056319.html" target="_blank" rel="noopener">scikit-learn决策树算法类库使用小结</a> </p><ul><li><p>Basic algorithm </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Tree <span class="keyword">is</span> constructed <span class="keyword">in</span> a top-down, recursive, divide-<span class="keyword">and</span>-conquer manner</span><br><span class="line">  树以自上而下，递归，分而治之的方式构建</span><br><span class="line">    - At start, all the training examples are at the root</span><br><span class="line">      一开始，所有的训练样例都是根源</span><br><span class="line">    - Examples are partitioned recursively based on selected attributes</span><br><span class="line">      样例基于被选定的属性递归地划分</span><br><span class="line">    - On each node, attributes are selected based on the training examples on that node, <span class="keyword">and</span> a heuristic <span class="keyword">or</span> statistical measure (e.g., information gain)</span><br><span class="line">      在每个节点上，基于<span class="string">'该节点上的训练示例'</span>以及<span class="string">'启发式或统计度量（例如，信息增益）'</span>来<span class="string">'选择属性'</span>。</span><br></pre></td></tr></table></figure><ul><li>Conditions for stopping partitioning </li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- All samples <span class="keyword">for</span> a given node belong to the same <span class="class"><span class="keyword">class</span> 给定节点的所有样本都属于同一个类</span></span><br><span class="line"><span class="class">- <span class="title">There</span> <span class="title">are</span> <span class="title">no</span> <span class="title">remaining</span> <span class="title">attributes</span> <span class="title">for</span> <span class="title">further</span> <span class="title">partitioning</span>  没有剩余属性可用于进一步分区</span></span><br><span class="line"><span class="class">- <span class="title">There</span> <span class="title">are</span> <span class="title">no</span> <span class="title">samples</span> <span class="title">left</span>  没有剩下的样例</span></span><br></pre></td></tr></table></figure><ul><li>Prediction</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'Majority voting'</span> <span class="keyword">is</span> employed <span class="keyword">for</span> classifying the leaf</span><br></pre></td></tr></table></figure></li><li><p><a href="https://captainzj.github.io/2018/11/24/Classification-Algorithm/#%E4%BF%A1%E6%81%AF%E7%86%B5-Entropy" target="_blank" rel="noopener">Entropy</a>   <a href="#Example: Attribute Selection with Information Gain">Example: Attribute Selection with Information Gain</a>   <a href="#Computation of Gini Index">Computation of Gini Index</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Entropy 信息熵:  表征混乱程度 </span><br><span class="line">- Conditional Entropy条件熵: 在已知随机变量X的条件下随机变量Y的不确定性(概率)</span><br><span class="line">- Mutual Information互信息/Information gain信息增益: 得知特征X的信息而使得类Y的信息的不确定性减少的程度(越大越好) -&gt;&gt; ID3决策树</span><br><span class="line">- Gain Ratio信息增益比: 解决使用信息增益存在偏向于选择取值较多的特征的问题(越大越好) -&gt;&gt; C4.5决策树 </span><br><span class="line">- GINI index基尼指数： 表征不纯度(越小越好)  -&gt;&gt;  CART分类树</span><br></pre></td></tr></table></figure></li><li><p>剪枝</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* 预剪枝(prepruning),通过提前停止树的构建(例如，通过决定在给定的结点`不再分裂或划分`训练元组的子集)而对树<span class="string">"剪枝"</span>。如果划分一个结点的元组导致低于预定义(信息增益、基尼指数等度量方式)阈值的划分，则给定子集的进一步划分将停止。然而，选取一个适当的阈值是困难的。高阈值可能导致过分简化的树，而低阈值可能使得树的简化不足。</span><br><span class="line">* 后剪枝(postpruning)，它由<span class="string">"完全生长"</span>的树剪去子树。通过删除结点的分支并用树叶替换它而剪掉给定结点上的子树。</span><br><span class="line">- E.g. CART使用代价复杂度剪枝算法</span><br><span class="line">* 组合方法：预剪枝和后剪枝交叉使用。后剪枝所需要的计算比预剪枝多，但是通常产生更可靠的树。</span><br></pre></td></tr></table></figure></li><li><p>Advantage</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）&apos;简单直观&apos;，生成的决策树很直观。</span><br><span class="line">2）基本&apos;不需要预处理&apos;，不需要提前归一化，处理缺失值。</span><br><span class="line">3）使用决策树预测的代价是O(log2m)。 m为样本数。</span><br><span class="line">4）既可以处理离散值也可以处理连续值。很多算法只是专注于离散值或者连续值。</span><br><span class="line">5）可以&apos;处理多维度输出&apos;的分类问题。</span><br><span class="line">6）相比于神经网络之类的黑盒分类模型，决策树在逻辑上有很好的&apos;可解释性&apos;</span><br><span class="line">7）可以交叉验证的&apos;剪枝&apos;来选择模型，从而提高泛化能力。</span><br><span class="line">8）对于异常点的&apos;容错能力&apos;好，健壮性高。</span><br></pre></td></tr></table></figure></li><li><p>Disadvantage</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）决策树算法非常容<span class="string">'易过拟合'</span>，导致<span class="string">'泛化能力不强'</span>.可以通过设置节点最少样本数量和限制决策树深度来改进.</span><br><span class="line"><span class="number">2</span>）决策树会因为样本发生一点点的改动，就会导致树<span class="string">'结构的剧烈改变'</span>。这个可以通过集成学习之类的方法解决.</span><br><span class="line"><span class="number">3</span>）寻找最优的决策树是一个NP难的问题，我们一般是通过启发式方法，<span class="string">'容易陷入局部最优'</span>。可以通过集成学习之类的方法来改善。</span><br><span class="line"><span class="number">4</span>）有些比较<span class="string">'复杂的关系'</span>，决策树很难学习，比如异或。这个就没有办法了，一般这种关系可以换神经网络分类方法来解决。</span><br><span class="line"><span class="number">5</span>）如果某些特征的样本比例过大，生成决策树容易偏向于这些特征。这个可以通过调节样本权重来改善。</span><br><span class="line">6）处理大数据集，决策树的构造可能变得效率低下('可伸缩问题') -&gt;&gt; RainForest(雨林)，能适应可用的内存量，并应用于任意决策树归纳算法</span><br></pre></td></tr></table></figure></li><li><p>决策树算法比较</p><p>|  算法  |  支持模型  | 树结构 |      特征选择      | 连续值处理 | 缺失值处理 |  剪枝  |<br>| :—-: | :——–: | :—-: | :—————-: | :——–: | :——–: | :—-: |<br>| <code>ID3</code>  |    分类    | 多叉树 |     <code>信息增益</code>     |   不支持   |   不支持   | 不支持 |<br>| <code>C4.5</code> |    分类    | 多叉树 |    <code>信息增益比</code>    |    支持    |    支持    |  支持  |<br>| <code>CART</code> | 分类，回归 | 二叉树 | <code>基尼系数，均方差</code> |    支持    |    支持    |  支持  |</p></li></ul><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><ul><li>Define: Find a linear/non-linear hyperplane (decision boundary) that will separate the data</li><li>Optimize：希望所有的点都离超平面远 -&gt;  可以让离超平面比较近的点尽可能的远离超平面</li><li>kernel核函数：将数据从低维空间映射到高维空间</li></ul><p><a href="https://www.cnblogs.com/pinard/p/6097604.html" target="_blank" rel="noopener">支持向量机原理(一) 线性支持向量机</a>、<a href="https://www.cnblogs.com/pinard/p/6100722.html" target="_blank" rel="noopener">支持向量机原理(二) 线性支持向量机的软间隔最大化模型</a>、<a href="https://www.cnblogs.com/pinard/p/6103615.html" target="_blank" rel="noopener">支持向量机原理(三)线性不可分支持向量机与核函数</a>、<a href="https://www.cnblogs.com/pinard/p/6111471.html" target="_blank" rel="noopener">支持向量机原理(四)SMO算法原理</a>、<a href="https://www.cnblogs.com/pinard/p/6113120.html" target="_blank" rel="noopener">支持向量机原理(五)线性支持回归</a>、<a href="https://www.cnblogs.com/pinard/p/6117515.html" target="_blank" rel="noopener">scikit-learn 支持向量机算法库使用小结</a>、<a href="https://www.cnblogs.com/pinard/p/6126077.html" target="_blank" rel="noopener">支持向量机高斯核调参小结</a></p><h4 id="Bayes"><a href="#Bayes" class="headerlink" title="Bayes"></a>Bayes</h4><ul><li><p>Basic Concepts</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* P(H|X): 后验概率. 基于相关性描述(证据)X, <span class="string">'假设H'</span>成立的概率</span><br><span class="line">* P(H): 先验概率.  一般情况下(没有相关约束)，<span class="string">'假设H'</span>成立的概率</span><br><span class="line"></span><br><span class="line">在分类问题中,希望确定 给定“证据”X，假设H成立的概率P(H|X).</span><br></pre></td></tr></table></figure><p><strong>贝叶斯定理：</strong> $P(H|X)=\frac{P(X|H)P(H)}{P(X)}$</p></li><li><p>Naïve Bayesian Classifier</p><blockquote><p>后验概率最大化来判断分类</p></blockquote><p>1) 如果没有Y的先验概率，则计算Y的K个先验概率：$P(Y=C_k)$</p><p>2) 分别计算第k个类别的第j维特征的第l个个取值条件概率：$P(X_j=x_{jl}|Y=C_k)$</p><p>3）对于实例$X^{(test)}$，分别计算：$P(Y=C_k)\prod_{j=1}^{n}P(X_j=x_j^{(test)}|Y=C_k)$</p><p>4) 确定实例$X^{(test)}$的分类$C_{result}  = \underbrace{argmax}_{C_k}P(Y=C_k)\prod_{j=1}^{n}P(X_j=X_j^{(test)}|Y=C_k) $ </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Advantages</span></span><br><span class="line"> Easy to implement  易于实现</span><br><span class="line"> Good results obtained <span class="keyword">in</span> most of the cases 大多数情况下获得了良好的结果</span><br><span class="line"><span class="comment"># Disadvantages</span></span><br><span class="line"> Assumption: class conditional independence, therefore loss of accuracy类条件独立-&gt;准确率缺失</span><br><span class="line"> Practically, dependencies exist among variables</span><br><span class="line">  实际上，变量之间存在依赖关系</span><br><span class="line"> E.g., hospitals: patients: Profile: age, family history, etc. Symptoms: fever, cough etc., Disease: lung cancer, diabetes,etc.</span><br><span class="line"> Dependencies among these cannot be modeled by Naïve Bayesian Classifier</span><br><span class="line">      这些依赖关系不能用朴素贝叶斯分类器建模</span><br><span class="line"><span class="comment"># How to deal with these dependencies? Bayesian Belief Networks</span></span><br><span class="line">  如何处理这些依赖关系？贝叶斯置信网络</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.cnblogs.com/pinard/p/6069267.html" target="_blank" rel="noopener">朴素贝叶斯算法原理小结</a>、<a href="https://www.cnblogs.com/pinard/p/6074222.html" target="_blank" rel="noopener">scikit-learn 朴素贝叶斯类库使用小结</a></p><h4 id="ANN"><a href="#ANN" class="headerlink" title="ANN"></a>ANN</h4><blockquote><p>受生物神经元的启发，将<strong>多输入单输出</strong>的信息处理单元作为人工神经网络中的一个神经元。人工神经网络的基本结构如下：输入层(输入层的神经元数目对应于训练集数据的属性数目)、隐藏层、输出层(输出层的神经元数目对应于网络预测的分类数目)</p></blockquote><center><br>    <img src="/2019/01/01/数据分析与挖掘/ANN_Architecture.png" width="600"><br></center><ul><li><p>Backpropagation</p><blockquote><p>Backpropagate the error (by updating weights and biases)</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Terminating condition (when error is very small, etc.)</span></span><br><span class="line"> Small changes <span class="keyword">in</span> weights  已接近<span class="string">"最优"</span></span><br><span class="line"> Small errors  结果可接受</span><br><span class="line"> Number of predefined iterations </span><br><span class="line"></span><br><span class="line"><span class="comment"># more</span></span><br><span class="line"> 反向传播可能会停留在局部最小值，但实际上它通常表现良好</span><br></pre></td></tr></table></figure></li></ul><h5 id="DeepLearning"><a href="#DeepLearning" class="headerlink" title="DeepLearning"></a>DeepLearning</h5><blockquote><p>通过更深的layers，自动提取特征（构建特征空间），以达到更”深层次”的学习效果</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Train networks <span class="keyword">with</span> many layers (vs. shallow nets <span class="keyword">with</span> just a couple of layers) </span><br><span class="line">  <span class="string">'训练具有多层的网络'</span>（与仅有几层的浅网络）</span><br><span class="line"> More neurons than previous networks 与以前的网络相比，有更多的神经元</span><br><span class="line"> More complex ways to connect layers 更复杂的连接层的方法</span><br><span class="line"> Tremendous computing power to train networks 以巨大计算能力训练网络</span><br><span class="line"> Automatic feature extraction <span class="string">'自动特征提取'</span></span><br><span class="line">- Multiple layers work to build <span class="string">'an improved feature space'</span></span><br><span class="line">  多个层用于构建改进的特征空间</span><br><span class="line"> Analogy: Signals passing through regions of the visual cortex</span><br><span class="line">  类比：信号通过视觉皮层的区域</span><br><span class="line">     Example: For face recognition: edge → nose → face, layer-by-layer</span><br><span class="line">      示例：用于面部识别：边缘→鼻子→面部，逐层</span><br><span class="line">- <span class="string">'Popular Deep Learning Frameworks'</span> <span class="keyword">for</span> Classification </span><br><span class="line"> Deep Feedforward Neural Networks 深度前馈神经网络</span><br><span class="line"> Convolutional Neural Networks 卷积神经网络</span><br><span class="line"> Recurrent Neural Networks 回归神经网络</span><br><span class="line"></span><br><span class="line"><span class="comment"># More</span></span><br><span class="line"> 为解决梯度消失/梯度爆炸、训练退化的问题，提出ResNet</span><br><span class="line"> 为实现特征的复用，提出DenseNet</span><br></pre></td></tr></table></figure><h3 id="Ensemble-methods"><a href="#Ensemble-methods" class="headerlink" title="Ensemble methods"></a>Ensemble methods</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ensemble Methods: Increasing the Accuracy</span></span><br><span class="line">Ensemble methods</span><br><span class="line">- Use a combination of models to increase accuracy</span><br><span class="line">      使用模型组合来提高准确性</span><br><span class="line">- Combine a series of k learned models, M1, M2, ..., Mk, <span class="keyword">with</span> the aim of creating an improved model M*</span><br><span class="line">      结合一系列k学习模型，M1，M2，...，Mk，旨在创建一个改进的模型M*</span><br><span class="line"></span><br><span class="line">Popular ensemble methods</span><br><span class="line">- <span class="string">'Bagging'</span>: Trains each model using a subset of the training set, <span class="keyword">and</span> models learned <span class="keyword">in</span> parallel</span><br><span class="line">      Bagging: 使用训练集的子集训练每个模型，并且并行学习模型</span><br><span class="line">- <span class="string">'Boosting'</span>: Trains each new model instance to emphasize the training instances that previous models mis-classified, <span class="keyword">and</span> models learned <span class="keyword">in</span> order</span><br><span class="line">      Boosting：训练每个新模型实例以强调先前模型错误分类的训练实例，以及按顺序学习的模型</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/pinard/p/6131423.html" target="_blank" rel="noopener">集成学习原理小结</a></p><h4 id="Bagging-Bootstrap-Aggregation"><a href="#Bagging-Bootstrap-Aggregation" class="headerlink" title="Bagging: Bootstrap Aggregation"></a>Bagging: Bootstrap Aggregation</h4><center><br>    <img src="/2019/01/01/数据分析与挖掘/BootstrapAggregation.png" width="600"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Analogy'</span>: Diagnosis based on multiple doctors’ <span class="string">'majority vote'</span></span><br><span class="line">- <span class="string">'Training'</span></span><br><span class="line">- Given a set D of d tuples, at each iteration i, a training set Di of d tuples <span class="keyword">is</span> sampled <span class="keyword">with</span> replacement <span class="keyword">from</span> D (i.e., bootstrap)</span><br><span class="line">      给定d个元组的D组，在每次迭代i中，对D元组的训练集Di进行<span class="string">'采样'</span>，并用D替换（即<span class="string">'自举'</span>）</span><br><span class="line">- A classifier model <span class="string">'Mi'</span> <span class="keyword">is</span> learned <span class="keyword">for</span> each training set <span class="string">'Di'</span></span><br><span class="line">      为每个训练集Di学习分类器模型Mi.</span><br><span class="line">- <span class="string">'Classification'</span>: classify an <span class="string">'unknown sample X'</span></span><br><span class="line">- Each classifier Mi returns its <span class="class"><span class="keyword">class</span> <span class="title">prediction</span></span></span><br><span class="line"><span class="class">- <span class="title">The</span> <span class="title">bagged</span> <span class="title">classifier</span> <span class="title">M</span>* '<span class="title">counts</span> <span class="title">the</span> <span class="title">votes</span>' <span class="title">and</span> <span class="title">assigns</span> <span class="title">the</span> <span class="title">class</span> <span class="title">with</span> <span class="title">the</span> <span class="title">most</span></span></span><br><span class="line"><span class="class"><span class="title">votes</span> <span class="title">to</span> <span class="title">X</span> </span></span><br><span class="line"><span class="class">- '<span class="title">Prediction</span>':</span> It can be applied to the prediction of <span class="string">'continuous values'</span> by <span class="string">'taking the</span></span><br><span class="line"><span class="string">average value'</span> of each prediction <span class="keyword">for</span> a given test tuple</span><br><span class="line">  预测: 它可以应用于连续值的预测 by 给定测试元组的每个预测的平均值</span><br><span class="line">- <span class="string">'Accuracy'</span>: Improved accuracy <span class="keyword">in</span> prediction</span><br><span class="line">- Often significantly better than a single classifier derived <span class="keyword">from</span> D</span><br><span class="line">      通常明显优于源自D的单一分类器</span><br><span class="line">- For noise data: Not considerably worse, more robust</span><br><span class="line">      对于噪声数据：不会更糟，而是更健壮</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/pinard/p/6156009.html" target="_blank" rel="noopener">Bagging与随机森林算法原理小结</a></p><h4 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h4><blockquote><p>（Bagging）投票得分    -&gt;  （Boosting）加权得分</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Analogy: Consult several doctors, based on <span class="string">'a combination of weighted'</span> diagnoses—weight assigned based on the previous diagnosis accuracy</span><br><span class="line">- How boosting works?</span><br><span class="line">- Weights are assigned to each training tuple</span><br><span class="line">      <span class="string">'权重'</span>分配给每个训练元组</span><br><span class="line">- A series of k classifiers <span class="keyword">is</span> iteratively learned</span><br><span class="line">      迭代学习一系列k个分类器</span><br><span class="line">- After a classifier Mi <span class="keyword">is</span> learned, the weights are updated to allow the subsequent classifier, Mi+<span class="number">1</span>, to <span class="string">'pay more attention to the training tuples that were misclassified'</span> by Mi</span><br><span class="line">      在学习分类器Mi之后，权重被更新以允许随后的分类器Mi+<span class="number">1</span><span class="string">'更多地关注被Mi错误分类的训练元组'</span></span><br><span class="line">- The final M* <span class="string">'combines the votes'</span> of each individual classifier, where the weight of each classifie<span class="string">r's vote is a function of its accuracy</span></span><br><span class="line"><span class="string">      最终的M*结合了每个分类器的投票，每个分类器的投票'</span>权重<span class="string">'是其'</span>准确性<span class="string">'的函数</span></span><br><span class="line"><span class="string">- Boosting algorithm can be extended for numeric prediction</span></span><br><span class="line"><span class="string">  可以扩展Boosting算法进行'</span>数值预测<span class="string">'</span></span><br><span class="line"><span class="string">- Comparing with bagging: Boosting tends to have greater accuracy, but it also risks overfitting the model to misclassified data</span></span><br><span class="line"><span class="string">  与装袋相比：boosting往往具有更高的'</span>准确性<span class="string">'，但也存在过度拟合模型错误分类数据的'</span>风险<span class="string">'</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/pinard/p/6133937.html" target="_blank" rel="noopener">集成学习之Adaboost算法原理小结</a>、<a href="https://www.cnblogs.com/pinard/p/6136914.html" target="_blank" rel="noopener">scikit-learn Adaboost类库使用小结</a></p><h4 id="Random-Forest"><a href="#Random-Forest" class="headerlink" title="Random Forest"></a>Random Forest</h4><blockquote><p>Avariation of bagging for decision trees 对<strong>决策树的bagging</strong>的’变异’</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Random Forest (first proposed by L. Breiman in 2001)</span></span><br><span class="line">- Avariation of bagging <span class="keyword">for</span> decision trees 对决策树的bagging的<span class="string">'变异'</span></span><br><span class="line">- Data bagging 数据装袋</span><br><span class="line">- Use a subset of training data by sampling <span class="keyword">with</span> replacement <span class="keyword">for</span> each tree</span><br><span class="line">      通过<span class="string">'采样'</span>为每棵树<span class="string">'替换'</span>使用训练数据的子集</span><br><span class="line">- Feature bagging</span><br><span class="line">- At each node use a random selection of attributes <span class="keyword">as</span> candidates <span class="keyword">and</span> split by the best attribute among them</span><br><span class="line">      在每个节点使用<span class="string">'随机'</span>选择的属性作为<span class="string">'候选'</span>并且以它们中的<span class="string">'最佳'</span>属性进行<span class="string">'划分'</span></span><br><span class="line">- Compared to original bagging,increases the diversity among generated trees</span><br><span class="line">  与原始套袋相比，增加了生成树的<span class="string">'多样性'</span></span><br><span class="line">- During classification, each tree <span class="string">'votes'</span> <span class="keyword">and</span> the <span class="string">'most popular'</span> <span class="class"><span class="keyword">class</span> <span class="title">is</span> <span class="title">returned</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">Two</span> <span class="title">Methods</span> <span class="title">to</span> <span class="title">construct</span> <span class="title">Random</span> <span class="title">Forest</span></span></span><br><span class="line"><span class="class">- <span class="title">Forest</span>-<span class="title">RI</span> <span class="params">(random input selection)</span>:</span> Randomly select, at each node, F attributes <span class="keyword">as</span> candidates <span class="keyword">for</span> the split at the node. The CART methodology <span class="keyword">is</span> used to grow the trees to maximum size</span><br><span class="line">      Forest-RI（<span class="string">'随机输入'</span>选择）：在每个节点上随机选择F属性作为节点分割的候选者。 CART方法用于将树增长到最大尺寸</span><br><span class="line">- Forest-RC (random linear combinations): Creates new attributes (<span class="keyword">or</span> features) that are a linear combination of the existing attributes (reduces the correlation between individual classifiers)</span><br><span class="line">      Forest-RC（<span class="string">'随机线性组合'</span>）：创建属于现有属性的线性组合的新属性（或特征）（减少各个分类器之间的相关性）</span><br><span class="line">- Comparable <span class="keyword">in</span> accuracy to Adaboost, but more robust to errors <span class="keyword">and</span> outliers</span><br><span class="line">  与Adaboost相比具有可比性，但对错误和异常值<span class="string">'更具鲁棒性'</span></span><br><span class="line">- Insensitive to the number of attributes selected <span class="keyword">for</span> consideration at each split, <span class="keyword">and</span> faster than typical bagging <span class="keyword">or</span> boosting</span><br><span class="line">  对每次拆分时选择的<span class="string">'属性数量不敏感'</span>，并且比典型的bagging或boosting<span class="string">'速度更快'</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/pinard/p/6160412.html" target="_blank" rel="noopener">scikit-learn随机森林调参小结</a></p><h3 id="Model-evaluation-and-selection"><a href="#Model-evaluation-and-selection" class="headerlink" title="Model evaluation and selection"></a><strong>Model evaluation and selection</strong></h3><h4 id="Classifier-Evaluation-Metrics"><a href="#Classifier-Evaluation-Metrics" class="headerlink" title="Classifier Evaluation Metrics"></a>Classifier Evaluation Metrics</h4><p><a href="#Classifier Evaluation Metrics: Example">Classifier Evaluation Metrics: Example</a></p><h5 id="Confusion-matrix-and-criteria"><a href="#Confusion-matrix-and-criteria" class="headerlink" title="Confusion matrix and criteria"></a>Confusion matrix and criteria</h5><center><br>    <img src="/2019/01/01/数据分析与挖掘/ConfusionMatrix.png" width="600"><br></center><p><a href="https://www.cnblogs.com/pinard/p/5993450.html" target="_blank" rel="noopener">精确率与召回率，RoC曲线与PR曲线</a></p><h4 id="Estimating-a-classifier’s-accuracy"><a href="#Estimating-a-classifier’s-accuracy" class="headerlink" title="Estimating a classifier’s accuracy"></a>Estimating a classifier’s accuracy</h4><h5 id="Cross-evaluation"><a href="#Cross-evaluation" class="headerlink" title="Cross-evaluation"></a>Cross-evaluation</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cross-validation (k-fold, where k = 10 is most popular)</span></span><br><span class="line">- Randomly partition the data into k mutually exclusive subsets, each approximately equal size </span><br><span class="line">  随机将数据划分为k个互斥的子集，每个子集的大小大致相等</span><br><span class="line">- At i-th iteration, use Di <span class="keyword">as</span> test set <span class="keyword">and</span> others <span class="keyword">as</span> training set </span><br><span class="line">  在第i次迭代中，使用Di作为测试集，使用其他作为训练集</span><br><span class="line">- Leave-one-out: k folds where k = <span class="string">'#'</span> of tuples, <span class="keyword">for</span> small sized data </span><br><span class="line">  留一个：k折叠，其中k = <span class="string">'#'</span> 元组的数量，对于小尺寸数据</span><br><span class="line">- *Stratified cross-validation*: folds are stratified so that class distribution, in each fold is approximately the same as that in the initial data </span><br><span class="line">   *分层交叉验证*：折叠是分层的，因此每个折叠中的类分布与初始数据中的类别分布大致相同</span><br><span class="line"></span><br><span class="line"><span class="comment"># Holdout method</span></span><br><span class="line">- Given data <span class="keyword">is</span> randomly partitioned into two independent sets</span><br><span class="line">  给定数据被随机分成两个独立的集合</span><br><span class="line">- Training set (e.g., <span class="number">2</span>/<span class="number">3</span>) <span class="keyword">for</span> model construction </span><br><span class="line">      模型构建的训练集（例如，<span class="number">2</span>/<span class="number">3</span>）</span><br><span class="line">- Test set (e.g., <span class="number">1</span>/<span class="number">3</span>) <span class="keyword">for</span> accuracy estimation</span><br><span class="line">      测试集（例如，<span class="number">1</span>/<span class="number">3</span>）用于准确度估计</span><br><span class="line">- Repeated random sub-sampling validation: a variation of holdout</span><br><span class="line">  重复随机子采样验证：保持的变化</span><br><span class="line">- Repeat holdout k times, accuracy = avg. of the accuracies obtained</span><br><span class="line">      重复k次，精度= 所得准确性的平均值</span><br><span class="line">      </span><br><span class="line"><span class="comment"># Bootstrap 引导程序</span></span><br><span class="line">- Works well <span class="keyword">with</span> small data sets <span class="string">'适用于小型数据集'</span></span><br><span class="line">- Samples the given training tuples uniformly <span class="keyword">with</span> replacement</span><br><span class="line">  均匀地对给定的训练元组进行<span class="string">'取样'</span></span><br><span class="line">- Each time a tuple <span class="keyword">is</span> selected, it <span class="keyword">is</span> equally likely to be selected again <span class="keyword">and</span> re-</span><br><span class="line">added to the training set</span><br><span class="line">  每次选择元组时，同样可能再次选择并重新添加到训练集</span><br><span class="line">- Several bootstrap methods, <span class="keyword">and</span> a common one <span class="keyword">is</span> <span class="number">.632</span> bootstrap</span><br><span class="line">  有几种引导方法，常见的方法是<span class="number">.632</span>引导程序 (大约<span class="number">63.2</span>％的原始数据最终在bootstrap中，其余<span class="number">36.8</span>％形成测试集)</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/pinard/p/5992719.html" target="_blank" rel="noopener">交叉验证(Cross Validation)原理小结</a></p><h4 id="Issues-Affecting-Model-Selection"><a href="#Issues-Affecting-Model-Selection" class="headerlink" title="Issues Affecting Model Selection"></a>Issues Affecting Model Selection</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Accuracy'</span> 准确性</span><br><span class="line">- classifier accuracy: predicting <span class="class"><span class="keyword">class</span> <span class="title">label</span></span></span><br><span class="line"><span class="class">- '<span class="title">Speed</span>' 速度</span></span><br><span class="line"><span class="class">- <span class="title">time</span> <span class="title">to</span> <span class="title">construct</span> <span class="title">the</span> <span class="title">model</span> <span class="params">(training time)</span> 构建模型的时间（训练时间）</span></span><br><span class="line"><span class="class">- <span class="title">time</span> <span class="title">to</span> <span class="title">use</span> <span class="title">the</span> <span class="title">model</span> <span class="params">(classification/prediction time)</span>  使用模型的时间（分类/预测时间）</span></span><br><span class="line"><span class="class">- '<span class="title">Robustness</span>' 鲁棒性<span class="params">(稳健性)</span>:</span> handling noise <span class="keyword">and</span> missing values</span><br><span class="line">- <span class="string">'Scalability'</span> 可伸缩性: efficiency <span class="keyword">in</span> disk-resident databases 磁盘驻留数据库的效率</span><br><span class="line">- <span class="string">'Interpretability'</span> 可解释性</span><br><span class="line">- understanding <span class="keyword">and</span> insight provided by the model 模型提供的理解和洞察力</span><br><span class="line">- <span class="string">'Other measures'</span>, e.g., goodness of rules, such <span class="keyword">as</span> decision tree size <span class="keyword">or</span> compactness of classification rules</span><br><span class="line">  其他措施，例如规则的好处，例如决策树大小或分类规则的紧凑性</span><br></pre></td></tr></table></figure><h3 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/01/数据分析与挖掘/classification_summary1.png" width="600"><br><img src="/2019/01/01/数据分析与挖掘/classification_summary2.png" width="600"><br><img src="/2019/01/01/数据分析与挖掘/classification_summary3.png" width="600"><br></center><h2 id="Frequent-patterns"><a href="#Frequent-patterns" class="headerlink" title="Frequent patterns"></a>Frequent patterns</h2><ul><li><p><strong>What is a frequent pattern</strong> </p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basic concept</span></span><br><span class="line"> 满足最小支持度的项集F -&gt;&gt; F为'频繁项集'(frequent pattern)</span><br><span class="line"> 项集L的任意超集均为非频繁项集 -&gt;&gt; L为'最大频繁模式'(Max-Pattern)/最大频繁项集(Maximal Frequent Itemset)</span><br><span class="line"> 项集X的直接超集(最小的严格超集)的支持度计数都不等于(小于)ta本身的支持度计数 -&gt;&gt; X为'闭合频繁项集'(closed-pattern)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Association-rule"><a href="#Association-rule" class="headerlink" title="Association rule"></a><strong>Association rule</strong></h3><blockquote><p>关联规则就是有关联的规则，形式是这样定义的：<em>两个不相交的非空集合X、Y，如果有X–&gt;Y，就说X–&gt;Y是一条关联规则</em>。举个例子，在上面的表中，我们发现购买啤酒就一定会购买尿布，{啤酒}–&gt;{尿布}就是一条关联规则。关联规则的强度用支持度$Support$和置信度$Confidence$等描述</p></blockquote><center><br>    <img src="/2019/01/01/数据分析与挖掘/AssociationRules.png" width="600"><br></center><p>一般来说，要选择一个数据集合中的频繁数据集，则需要自定义评估标准。最常用的评估标准是用自定义的支持度，或者是自定义支持度和置信度的一个组合。</p><ul><li><p>关联规则挖掘步骤</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="string">'生成频繁项集'</span></span><br><span class="line">   这一阶段找出所有满足最小支持度的项集，找出的这些项集称为频繁项集</span><br><span class="line"><span class="number">2.</span> <span class="string">'生成规则'</span></span><br><span class="line">   在上一步产生的频繁项集的基础上生成满足最小置信度的规则，产生的规则称为强规则</span><br></pre></td></tr></table></figure></li></ul><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><h4 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a><strong>Apriori</strong></h4><p>为了减少频繁项集的生成时间，我们应该尽早的消除一些完全不可能是频繁项集的集合，故而引出Apriori的两条定律：</p><ol><li><em>如果一个集合是频繁项集，则它的所有子集都是频繁项集</em>。</li><li><em>如果一个集合不是频繁项集，则它的所有超集都不是频繁项集。</em></li></ol><p>利用这两条定律，我们抛掉很多的候选项集，Apriori算法就是利用这两个定理来实现快速挖掘频繁项集的。<a href="https://www.cnblogs.com/pinard/p/6293298.html" target="_blank" rel="noopener">Apriori算法原理总结</a>、<a href="https://www.cnblogs.com/fengfenggirl/p/associate_apriori.html" target="_blank" rel="noopener">关联规则挖掘基本概念与Aprior算法</a></p><hr><blockquote><p>Apriori算法属于候选消除算法，是一个生成候选集、消除不满足条件的候选集、并不断循环直到不再产生候选集的过程。</p></blockquote><center><br><img src="/2019/01/01/数据分析与挖掘/Apriori.png" width="600"><br></center><p>上面的图演示了Apriori算法的过程，注意看由二级频繁项集生成三级候选项集时，没有{牛奶,面包,啤酒}，那是因为{面包,啤酒}不是二级频繁项集，这里利用了Apriori定理。最后生成三级频繁项集后，没有更高一级的候选项集，因此整个算法结束，{牛奶,面包,尿布}是最大频繁子集</p><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># How to generate candidates? </span></span><br><span class="line"> Step <span class="number">1</span>: self-joining Lk</span><br><span class="line"> Step <span class="number">2</span>: pruning</span><br><span class="line"><span class="comment"># Example of Candidate-generation</span></span><br><span class="line"> L3=&#123;abc, abd, acd, ace, bcd&#125;<span class="comment"># INPUT</span></span><br><span class="line"> Self-joining: L3*L3<span class="comment"># Step1</span></span><br><span class="line"> abcd <span class="keyword">from</span> abc <span class="keyword">and</span> abd </span><br><span class="line">     acde <span class="keyword">from</span> acd <span class="keyword">and</span> ace</span><br><span class="line"> Pruning:<span class="comment"># Step2</span></span><br><span class="line"> acde <span class="keyword">is</span> removed because ade <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">in</span> L3 </span><br><span class="line"> C4 = &#123;abcd&#125;<span class="comment"># OUTPUT</span></span><br></pre></td></tr></table></figure><p>我们发现Apriori算法是一个候选消除算法，每一次消除都需要扫描一次所有数据记录，造成整个算法在<strong>面临大数据集</strong>时显得效率低下（<code>多次扫描事务数据库</code>、<code>产生大量的候选集</code>、<code>对候选集的支持度计算产生了繁琐的工作量</code>）. 故而，我们需要了解$Fp-Growth$算法（如下）</p><h4 id="FP-growth"><a href="#FP-growth" class="headerlink" title="FP-growth"></a><strong>FP-growth</strong></h4><p>FpGrowth算法通过构造一个树结构来压缩数据记录，使得挖掘频繁项集只需要<strong>扫描两次数据记录</strong>，而且该算法不需要生成候选集合，所以效率会比较高。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Step <span class="number">1</span>：扫描数据记录，生成一级频繁项集，并按出现次数由多到少排序</span><br><span class="line">Step <span class="number">2</span>：再次扫描数据记录，对每条记录中出现在Step <span class="number">1</span>产生的表中的项，按表中的顺序排序。初始时，新建一个根结点，标记为null；</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Method</span></span><br><span class="line"> For each frequent item, construct its conditional pattern-base, <span class="keyword">and</span> then its conditional FP-tree</span><br><span class="line">  对于每个频繁项，<span class="string">'构造其条件模式库'</span>，然后<span class="string">'构造其条件FP树'</span></span><br><span class="line"> Repeat the process on <span class="string">'each'</span> newly created conditional FP-tree</span><br><span class="line">  对每个新创建的条件FP树重复此过程 (<span class="string">"Recursion: Mining Each Conditional FP-tree"</span>)</span><br><span class="line"> Until the resulting FP-tree <span class="keyword">is</span> empty, <span class="keyword">or</span> it contains only one path—single path will generate all the combinations of its sub-paths, each of which <span class="keyword">is</span> a frequent pattern</span><br><span class="line">  在生成的FP树为空之前，或者它只包含一个路径 - 单个路径将生成其子路径的所有组合，<span class="string">'每个路径都是一个频繁的模式'</span></span><br></pre></td></tr></table></figure><center><br>    <img src="/2019/01/01/数据分析与挖掘/FP-TreeConstruct.png" width="600"><br>    <img src="/2019/01/01/数据分析与挖掘/FP-TreeFindPatterns.png" width="600"><br>    <img src="/2019/01/01/数据分析与挖掘/FP-Tree_mConditional.png" width="600"><br>    <img src="/2019/01/01/数据分析与挖掘/MiningEachConditionalFP-tree.png" width="600"><br></center><p><a href="https://www.cnblogs.com/pinard/p/6307064.html" target="_blank" rel="noopener">FP Tree算法原理总结</a>、<a href="https://www.cnblogs.com/fengfenggirl/p/associate_fpgowth.html" target="_blank" rel="noopener">关联规则FpGrowth算法</a></p><h3 id="Summary-2"><a href="#Summary-2" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/01/数据分析与挖掘/fp_Summary.png" width="600"><br></center><h2 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h2><ul><li><p>What is clustering</p><p>聚类就是按照某个特定标准(如距离准则)<strong>把一个数据集分割成不同的类或簇</strong>，使得同一个簇内的数据对象的<code>相似性</code>尽可能大，同时不在同一个簇中的数据对象的<code>差异性</code>也尽可能地大。即聚类后<code>同一类的数据尽可能聚集到一起，不同数据尽量分离</code>。</p><ul><li><p>Unsupervised learning </p><p>聚类是一种<code>输入数据无标签</code>的“分类”方式（即非监督学习），通常并不需要使用训练数据进行学习，仅把相似的东西聚到一起，并不关心所得的簇具体代表什么</p></li></ul></li></ul><h3 id="Partition-based—k-means"><a href="#Partition-based—k-means" class="headerlink" title="Partition-based—k-means"></a>Partition-based—k-means</h3><p>K-Means算法的思想很简单，对于给定的样本集，按照样本之间的距离大小，<code>将样本集划分为K个簇</code>。让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的大。</p><center><br>    <img src="/2019/01/01/数据分析与挖掘/k-Means.gif" width="400"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- There are many variants of the K-Means method, varying <span class="keyword">in</span> different aspects</span><br><span class="line">  K-Means方法有许多变体，在不同方面有所不同</span><br><span class="line">- Choosing better initial centroid estimates</span><br><span class="line">  选择更好的初始质心估计</span><br><span class="line"> <span class="string">'k-means对初始值的设置很敏感'</span>: K-means++, Intelligent K-Means, Genetic K-Means</span><br><span class="line">- Choosing different representative prototypes <span class="keyword">for</span> the clusters</span><br><span class="line">  为集群选择不同的代表性原型</span><br><span class="line"> <span class="string">'k-means对噪声和离群值非常敏感'</span>: K-Medoids, K-Medians</span><br><span class="line"> <span class="string">'k-means只用于numerical，不适用于categorical类型数据'</span>: K-Modes</span><br><span class="line">- Applying feature transformation techniques</span><br><span class="line">  应用特征转换技术 </span><br><span class="line"> Weighted K-Means</span><br><span class="line"> <span class="string">'k-means不能解决非凸non-convex数据'</span>: Kernel K-Means</span><br></pre></td></tr></table></figure><ul><li><p>K-means++：选取新数据点作为新的聚类中心时，遵循的原则是与当前所属聚类中心距离最远的点，被选取作为聚类中心的概率较大</p></li><li><p>K-Medoids：Instead of taking the <strong>mean</strong> value of the object in a cluster as a reference<br>point, <strong>medoids</strong> can be used, which is the <code>most centrally located</code> object in a cluster 不使用聚类中对象的平均值作为参考点，而是可以使用中心点medoids，它是集群中最集中的对象（计算该点到当前聚簇中所有点距离之和，最终距离之后最小的点，则视为新的中心点）</p></li><li><p>K-Medians: Instead of taking the <strong>mean</strong> value of the object in a cluster as a reference point, <strong>medians</strong> are used (L1-norm as the distance measure) 不使用聚类中对象的平均值作为参考点，而是使用<code>中位数</code>（L1范数作为距离度量）</p></li><li><p>K-Modes: An extension to K-Means by replacing <strong>means</strong> of clusters with <strong>modes</strong> 通过用<code>众数</code>替换簇的平均值来扩展K-Means</p></li><li><p>Kernel K-Means : Project data onto the high-dimensional feature space using the kernel function, and then perform K-Means clustering 使用核函数将数据投影到高维特征空间，然后执行K-Means聚类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Typical kernel functions:</span><br><span class="line"> Polynomial kernel of degree <span class="string">'多项式核函数'</span></span><br><span class="line"> Gaussian radial basis function (RBF) kernel <span class="string">'高斯径向基核函数'</span></span><br><span class="line"> Sigmoid kernel <span class="string">'Sigmoid核函数'</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.cnblogs.com/pinard/p/6164214.html" target="_blank" rel="noopener">K-Means聚类算法原理</a>、<a href="https://www.cnblogs.com/pinard/p/6169370.html" target="_blank" rel="noopener">用scikit-learn学习K-Means聚类</a></p><h3 id="Hierarchical-based—two-ways"><a href="#Hierarchical-based—two-ways" class="headerlink" title="Hierarchical-based—two ways"></a>Hierarchical-based—two ways</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Hierarchical clustering</span><br><span class="line"> Generate a clustering hierarchy(drawn <span class="keyword">as</span> a dendrogram) 生成聚类层次结构（绘制为树形图）</span><br><span class="line"> <span class="string">'Not required to specify K'</span>, the number of clusters 不需要指定聚类簇数</span><br><span class="line"> More deterministic 更具确定性</span><br><span class="line"> No iterative refinement 无迭代校准</span><br></pre></td></tr></table></figure><ul><li><p>Two categories of algorithms</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'Agglomerative'</span>: Start <span class="keyword">with</span> singleton clusters, continuously merge two clusters at a time to build a bottom-up hierarchy of clusters</span><br><span class="line">  <span class="string">'凝聚'</span>：从单一集群开始，一次连续合并两个集群，构建<span class="string">'自下而上'</span>的集群层次结构</span><br><span class="line"> Agglomerative clustering varies on <span class="string">'different similarity measures'</span> among clusters</span><br><span class="line">         Single link (<span class="string">'nearest'</span> neighbor)  Average link (group <span class="string">'average'</span>)</span><br><span class="line">     Complete link (<span class="string">'diameter'</span>直径)     Centroid link (<span class="string">'centroid'</span>重心 similarity)</span><br><span class="line">- <span class="string">'Divisive'</span>: Start <span class="keyword">with</span> a huge macro-cluster, split it continuously into two groups, generating a top-down hierarchy of clusters</span><br><span class="line">  <span class="string">'分裂'</span>：从一个庞大的宏集群开始，将其连续分成两组，生成一个<span class="string">'自上而下'</span>的集群层次结构</span><br></pre></td></tr></table></figure></li></ul><h4 id="BIRCH"><a href="#BIRCH" class="headerlink" title="BIRCH"></a><strong>BIRCH</strong></h4><blockquote><p>BIRCH (Balanced Iterative Reducing and Clustering Using Hierarchies): Use CF-tree and incrementally adjust the quality of sub-clusters 利用层次方法的<code>平衡迭代</code>规约和聚类：使用CF树并逐步调整子集群的质量</p></blockquote><center><br><img src="/2019/01/01/数据分析与挖掘/CFTree.png" width="500"><br></center><p>将所有的训练集样本建立了CF Tree，一个基本的BIRCH算法就完成了，对应的输出就是若干个CF节点，每个节点里的样本点就是一个聚类的簇。<a href="https://www.cnblogs.com/pinard/p/6179132.html" target="_blank" rel="noopener">BIRCH聚类算法原理</a>、<a href="https://www.cnblogs.com/pinard/p/6200579.html" target="_blank" rel="noopener">用scikit-learn学习BIRCH聚类</a></p><h4 id="CURE"><a href="#CURE" class="headerlink" title="CURE"></a><strong>CURE</strong></h4><blockquote><p>CURE (Clustering Using REpresentatives): Represent a cluster using a set of well-scattered representative points  使用一组分散的代表点来表示聚类</p></blockquote><h4 id="CHAMELEON"><a href="#CHAMELEON" class="headerlink" title="CHAMELEON"></a>CHAMELEON</h4><blockquote><p>Hierarchical Clustering Using Dynamic Modeling,  A graph partitioning approach</p></blockquote><h4 id="Probabilistic-Hierarchical-Clustering"><a href="#Probabilistic-Hierarchical-Clustering" class="headerlink" title="Probabilistic Hierarchical Clustering"></a>Probabilistic Hierarchical Clustering</h4><blockquote><p>Use probabilistic models to measure distances between clusters  使用概率模型来测量簇之间的距离</p></blockquote><h3 id="Density-based—DBSCAN"><a href="#Density-based—DBSCAN" class="headerlink" title="Density-based—DBSCAN"></a>Density-based—DBSCAN</h3><blockquote><p>Clustering based on density (a local cluster criterion), such as density-connected points  基于密度的聚类（局部聚类标准），例如密度连接点</p></blockquote><h4 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h4><center><br>    <img src="/2019/01/01/数据分析与挖掘/DBSCAN_BasicConcept.png" width="500"><br></center><p>图中<code>MinPts=5</code>，红色的点都是<code>核心对象</code>，因为其ϵ-邻域至少有5个样本。黑色的样本是非核心对象。所有核心对象<code>密度直达</code>的样本在以红色核心对象为中心的超球体内，如果不在超球体内，则不能密度直达。图中用绿色箭头连起来的核心对象组成了<code>密度可达</code>的样本序列。在这些密度可达的样本序列的ϵ-邻域内所有的样本相互都是<code>密度相连</code>(对称性)的。</p><hr><p>DBSCAN密度聚类：由密度可达关系导出的最大密度相连的样本集合，即为我们最终聚类的一个类别，或者说一个簇。<a href="https://www.cnblogs.com/pinard/p/6208966.html" target="_blank" rel="noopener">DBSCAN密度聚类</a>、<a href="https://www.cnblogs.com/pinard/p/6217852.html" target="_blank" rel="noopener">用scikit-learn学习DBSCAN聚类</a></p><h3 id="E-M-algorithm"><a href="#E-M-algorithm" class="headerlink" title="E-M algorithm"></a>E-M algorithm</h3><blockquote><p>K-Means （距离） -&gt;&gt;  E-M algorithm (概率分布)</p></blockquote><p>假设需要调查某校的男生和女生的身高分布。假设在校园里随机抽样100个男生和100个女生，共200个人。不知道抽取的这200个人里面的每一个人到底是从男生的那个身高分布里面抽取的，还是女生的那个身高分布抽取的。即就是，抽取得到的每个样本都不知道是从哪个分布抽取的。</p><p>EM的意思是“Expectation Maximization”，在上述问题中，先随便猜一下男生(身高)的正态分布的参数:如均值和方差是多少。例如男生的均值是1米7，方差是0.1米(当然了，刚开始肯定没那么准)，然后计算出每个人更可能属于第一个还是第二个正态分布中的(例如，这个人的身高是1米8，那很明显，他最大可能属于男生的那个分布)，这个是属于Expectation一步。有了每个人的归属，或者说已经大概地按上面的方法将这200个人分为男生和女生两部分，就可以根据之前说的最大似然那样，通过这些被大概分为男生的n个人来重新估计第一个分布的参数，女生的那个分布同样方法重新估计。这个是Maximization。然后，当更新了这两个分布的时候，每一个属于这两个分布的概率又变了，那么就再需要调整E步……如此往复，直到参数基本不再发生变化为止。</p><p>一个最直观了解EM算法思路的是K-Means算法。在K-Means聚类时，每个聚类簇的质心是隐含数据。我们会假设K个初始化质心，即EM算法的E步；然后计算得到每个样本最近的质心，并把样本聚类到最近的这个质心，即EM算法的M步。重复这个E步和M步，直到质心不再变化为止，这样就完成了K-Means聚类。EM算法的描述还很粗糙，我们需要用数学的语言精准描述。详见<a href="https://www.cnblogs.com/pinard/p/6912636.html" target="_blank" rel="noopener">EM算法原理总结</a></p><h3 id="AP-2007-Science"><a href="#AP-2007-Science" class="headerlink" title="AP (2007, Science)"></a>AP (2007, Science)</h3><p>AP（Affinity Propagation）一般翻译为近邻传播聚类<a href="https://blog.csdn.net/u010161379/article/details/51636926" target="_blank" rel="noopener">Affinity Propagation: AP聚类算法</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basic concept</span></span><br><span class="line">* <span class="string">'Exemplar'</span>范例：即聚类簇中心点；</span><br><span class="line">* <span class="string">'similarity'</span>s(i,j)：数据点i与数据点j的<span class="string">'相似度值'</span>，一般使用欧氏距离的的负值表示，即s(i,j)值越大表示点i与j的距离越近，AP算法中理解为数据点j作为数据点i的聚类中心的能力； </span><br><span class="line">    * 相似度矩阵：作为算法的初始化矩阵，n个点就有由n乘n个相似度值组成的矩阵； </span><br><span class="line">* <span class="string">'Preference参考度'</span>s(i,i)：若按欧氏距离计算其值应为<span class="number">0</span>，但在AP聚类中其`表示数据点i作为聚类中心的程度`，因此不能为<span class="number">0</span>。迭代开始前假设所有点成为聚类中心的能力相同，因此参考度一般设为相似度矩阵中所有值得最小值或者中位数，但是参考度越大则说明个数据点成为聚类中心的能力越强，则最终聚类中心的个数则越多； </span><br><span class="line">* <span class="string">'Responsibility'</span>，r(i,k)：吸引度信息，表示数据点k`适合`作为数据点i的聚类中心的程度；(`k想做i的主公`)</span><br><span class="line">* <span class="string">'Availability'</span>，a(i,k)：归属度信息，表示数据点i选择数据点k作为其聚类中心的`合适`程度；(`i想做k的勇士`)</span><br><span class="line">* <span class="string">'Damping factor'</span>阻尼系数：为防止数据震荡，引入的衰减系数，`起到收敛作用`，每个信息值等于前一次迭代更新的信息值的λ倍加上此轮更新值得<span class="number">1</span>-λ倍，其中λ在<span class="number">0</span><span class="number">-1</span>之间，默认为<span class="number">0.5</span></span><br></pre></td></tr></table></figure><p>AP算法通过迭代过程不断更新每一个点的responsibility和availability,直到产生m个高质量的exemplar,同时将其余的数据点分配到相应的聚类中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 算法流程： </span></span><br><span class="line"><span class="number">1.</span> 更新相似度矩阵中每个点的吸引度信息，计算归属度信息； </span><br><span class="line"><span class="number">2.</span> 更新归属度信息，计算吸引度信息； </span><br><span class="line"><span class="number">3.</span> 对样本点的吸引度信息和归属度信息求和，检测其选择聚类中心的决策；若经过若干次迭代之后其聚类中心不变、或者迭代次数超过既定的次数、又或者一个子区域内的关于样本点的决策经过数次迭代后保持不变，则算法结束。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于其算法流程，知乎上kael 用户将AP聚类过程比喻为选举过程： </span></span><br><span class="line">* 所有人都参加选举（大家都是选民也都是参选人），要选出几个作为代表 </span><br><span class="line">* s(i,k)就相当于i对选k这个人的一个固有的偏好程度 </span><br><span class="line">* r(i,k)表示用s(i,k)减去最强竞争者的评分，可以理解为k在对i这个选民的竞争中的优势程度 </span><br><span class="line">* r(i,k)的更新过程对应选民i对各个参选人的挑选（越出众越有吸引力） </span><br><span class="line">* a(i,k)：从公式里可以看到，所有r(i’,k)&gt;<span class="number">0</span>的值都对a有正的加成。对应到我们这个比喻中，就相当于选民i通过网上关于k的民意调查看到：有很多人（即i’们）都觉得k不错（r(i’,k)&gt;<span class="number">0</span>），那么选民i也就会相应地觉得k不错，是个可以相信的选择 </span><br><span class="line">* a(i,k)的更新过程对应关于参选人k的民意调查对于选民i的影响（已经有了很多跟随者的人更有吸引力） </span><br><span class="line">* 两者交替的过程也就可以理解为`不断地参考各个参选人给出的民意调查`和`选民在各个参选人之间不断地比较`。 </span><br><span class="line">* r(i,k)的思想反映的是`竞争`，a(i,k)则是为了`让聚类更成功`。</span><br></pre></td></tr></table></figure><h3 id="Local-density-based-2014-Science"><a href="#Local-density-based-2014-Science" class="headerlink" title="Local density-based (2014, Science)"></a>Local density-based (2014, Science)</h3><blockquote><p>该方法假设聚类中心周围都是密度比其低的点，同时这些点到该聚类中心的距离比其到其他聚类中心更近。</p></blockquote><center><br><img src="/2019/01/01/数据分析与挖掘/LocalDensity-based.png" width="600"><br></center><ol><li>找出聚类中心:以通过给定的$δ<em>{min}$和$ρ</em>{min}$筛选出同时满足($ρ<em>i$ &gt; $ρ</em>{min}$)和($δ_ i$ &gt; $δ_{min}$)条件的点作为聚类中心点。 </li><li>剩余点的类别指派: 当前点的类别标签等于高于当前点密度的最近的点的标签一致。从而对所有点的类别进行了指定。</li><li>去除噪音：先算出类别之间的边界，然后找出边界中密度值最高的点的密度作为阈值只保留类别中大于或等于此密度值的点</li></ol><h3 id="Evaluation-of-Clustering"><a href="#Evaluation-of-Clustering" class="headerlink" title="Evaluation of Clustering"></a>Evaluation of Clustering</h3><h4 id="Clustering-evaluation"><a href="#Clustering-evaluation" class="headerlink" title="Clustering evaluation"></a>Clustering evaluation</h4><blockquote><p>Clustering Evaluation: Evaluating the <code>goodness</code> of clustering results (No commonly recognized best suitable measure in practice) 聚类评估：评估聚类结果的优劣（在实践中没有公认的最佳合适度量）</p></blockquote><h5 id="Three-categorization-of-measures"><a href="#Three-categorization-of-measures" class="headerlink" title="Three categorization of measures"></a>Three categorization of measures</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="string">'External'</span>: Supervised, employ criteria <span class="keyword">not</span> inherent to the dataset</span><br><span class="line">  外部：监督，采用数据集不固有的标准 (使用<span class="string">'新数据'</span>)</span><br><span class="line"> Compare a clustering against prior <span class="keyword">or</span> expert-specified knowledge (i.e., the ground truth) using certain clustering quality measure</span><br><span class="line">  使用某些聚类质量测量将聚类与先前或专家指定的知识（即基础事实）进行比较</span><br><span class="line">- <span class="string">'Internal'</span>: Unsupervised, criteria derived <span class="keyword">from</span> data itself</span><br><span class="line">  内部：无监督，来自<span class="string">'数据本身'</span>的标准</span><br><span class="line"> Evaluate the goodness of a clustering by considering how well the clusters are separated <span class="keyword">and</span> how compact the clusters are, e.g., silhouette coefficient</span><br><span class="line">  通过考虑群集的分离程度以及群集的紧密程度（例如，轮廓系数）来评估群集的良好性</span><br><span class="line">- <span class="string">'Relative'</span>: Directly compare different clusterings, usually those obtained via different parameter settings <span class="keyword">for</span> the same algorithm</span><br><span class="line">  相对：直接比较不同的聚类，通常是通过<span class="string">'相同算法的不同参数'</span>设置获得的聚类</span><br></pre></td></tr></table></figure><h4 id="Clustering-stability"><a href="#Clustering-stability" class="headerlink" title="Clustering stability"></a>Clustering stability</h4><blockquote><p>Clustering stability : To understand the sensitivity of the clustering result to various algorithm parameters, e.g., # of clusters  聚类稳定性：理解聚类结果对各种<code>算法参数的敏感性</code>，例如聚类数</p></blockquote><h5 id="Methods-for-Finding-K-the-Number-of-Clusters"><a href="#Methods-for-Finding-K-the-Number-of-Clusters" class="headerlink" title="Methods for Finding K, the Number of Clusters"></a>Methods for Finding K, the Number of Clusters</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Empirical method <span class="string">'经验'</span>方法</span><br><span class="line"> <span class="comment"># of clusters: k ≈ sqrt(n / 2) for a dataset of n points (e.g., n = 200, k = 10)</span></span><br><span class="line">- Elbow method: Use the turning point <span class="keyword">in</span> the curve of the sum of within cluster variance <span class="keyword">with</span> respect to the <span class="comment"># of clusters</span></span><br><span class="line">  使用聚类方差之和与曲线群数之和的曲线中的<span class="string">'转折点'</span></span><br><span class="line">- Cross validation method </span><br><span class="line">  交叉验证法 (<span class="string">'试错，择优'</span>)</span><br><span class="line"> Divide a given data set into m parts</span><br><span class="line"> Use m – <span class="number">1</span> parts to obtain a clustering model</span><br><span class="line"> Use <span class="string">'the remaining part to test'</span> the quality of the clustering</span><br><span class="line"> For example, <span class="keyword">for</span> each point <span class="keyword">in</span> the test set, find the closest centroid, <span class="keyword">and</span> use the sum of squared distance between all points <span class="keyword">in</span> the test set <span class="keyword">and</span> the closest centroids to measure how well <span class="string">'the model fits the test set'</span></span><br><span class="line"> For any k &gt; <span class="number">0</span>, <span class="string">'repeat it m times'</span>, compare the overall quality measure w.r.t. different k’s, <span class="keyword">and</span> find <span class="comment"># of clusters that fits the data the best</span></span><br></pre></td></tr></table></figure><h4 id="Clustering-tendency"><a href="#Clustering-tendency" class="headerlink" title="Clustering tendency"></a>Clustering tendency</h4><blockquote><p>Clustering tendency: Assess the suitability of clustering, i.e., whether the data has any inherent grouping structure  聚类趋势：评估聚类的<code>适用性</code>，即数据是否具有任何<code>固有的分组结构</code></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- Still, there are some <span class="string">'clusterability assessment methods'</span>, such <span class="keyword">as</span></span><br><span class="line"> <span class="string">'Spatial histogram'</span>: Contrast the histogram of the data <span class="keyword">with</span> that generated <span class="keyword">from</span></span><br><span class="line">random samples</span><br><span class="line">  空间直方图：将数据的直方图与生成的直方图进行对比</span><br><span class="line"> <span class="string">'Distance distribution'</span>: Compare the pairwise point distance <span class="keyword">from</span> the data <span class="keyword">with</span> those <span class="keyword">from</span> the randomly generated samples</span><br><span class="line">  距离分布：将数据的成对点距离与随机生成的样本的距离进行比较</span><br><span class="line"> <span class="string">'Hopkins Statistic'</span>: A sparse sampling test <span class="keyword">for</span> spatial randomness</span><br><span class="line">  霍普金斯统计：空间随机性的稀疏抽样测试</span><br></pre></td></tr></table></figure><h3 id="Summary-3"><a href="#Summary-3" class="headerlink" title="Summary"></a>Summary</h3><center><br>    <img src="/2019/01/01/数据分析与挖掘/clustering_Summary.png" width="600"><br>    <img src="/2019/01/01/数据分析与挖掘/clustering_Summary2.png" width="600"><br></center><h2 id="Graph-clustering"><a href="#Graph-clustering" class="headerlink" title="Graph clustering"></a>Graph clustering</h2><ul><li><p>What is graph clustering </p><ul><li><p><strong>Complex network</strong></p><p>在我们的现实生活中，许多复杂系统都可以建模成一种复杂网络进行分析，比如常见的电力网络、航空网络、交通网络、计算机网络以及社交网络等等。复杂网络不仅是一种数据的表现形式，它同样也是一种科学研究的手段。</p></li><li><p>Graph clustering</p></li><li><p>Community </p></li><li><p>Module  </p></li></ul></li></ul><h3 id="Community-detection-algorithms"><a href="#Community-detection-algorithms" class="headerlink" title="Community detection_algorithms"></a>Community detection_algorithms</h3><h4 id="CPM-（Clique-Percolation-Method）"><a href="#CPM-（Clique-Percolation-Method）" class="headerlink" title="CPM （Clique Percolation Method）"></a>CPM （Clique Percolation Method）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># basic concept</span></span><br><span class="line"> <span class="string">'Clique'</span>: Complete graph  完全图(所有节点两两相连)</span><br><span class="line"> <span class="string">'k-clique'</span>: Complete graph <span class="keyword">with</span> k vertice(顶点) k-派系</span><br><span class="line"> <span class="string">'Adjacent k-cliques'</span>: Two k-cliques are adjacent when they `share k<span class="number">-1</span> nodes`</span><br><span class="line">   k-派系相邻：两个不同的k-派系共享k<span class="number">-1</span>个节点，认为他们相邻</span><br><span class="line"> <span class="string">'k-clique community'</span>: Union of all k-cliques that can be `reached <span class="keyword">from</span> each other` through a series of adjacent k-cliques.</span><br><span class="line">   k-派系连通：一个k-派系可以通过若干个相邻的k-派系到达另一个k-派系，则称这两个k-派系彼此联通</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Step1: 找到网络中大小为K的完全子图 Locate maximal cliques </span><br><span class="line">Step2: 将每个完全子图定义为一个节点，建立一个重叠矩阵</span><br><span class="line">Step3: 将重叠矩阵变成社区邻接矩阵(其中重叠矩阵中对角线小于k、非对角线小于k<span class="number">-1</span>的元素全置为<span class="number">0</span>,所有非<span class="number">0</span>项置为<span class="number">1</span>)</span><br></pre></td></tr></table></figure><center class="half"><br><img src="/2019/01/01/数据分析与挖掘/CPM1.png" width="300"><br><img src="/2019/01/01/数据分析与挖掘/CPM2.png" width="300"><br></center><p>从图中可以看出包含了两个社区{1，2，3，4}和{4，5，6，7，8}，节点4属于两个社区的重叠节点</p><p><a href="https://www.cnblogs.com/bethansy/p/6704712.html" target="_blank" rel="noopener">CPM（Cluster Percolation method）派系过滤算法</a></p><h4 id="Spectral-clustering"><a href="#Spectral-clustering" class="headerlink" title="Spectral clustering"></a>Spectral clustering</h4><center><br><img src="/2019/01/01/数据分析与挖掘/SpectralClustering.png" width="600"><br></center><p>谱聚类（Spectral Clustering），就是先用<code>Laplacian eigenmaps对数据降维</code>（简单地说，就是先将数据转换成邻接矩阵或相似性矩阵，再转换成Laplacian矩阵，再对Laplacian矩阵进行特征分解，把最小的K个特征向量排列在一起），然后再<code>使用k-means</code>完成聚类。谱聚类是个很好的方法，效果通常比k-means好，计算复杂度还低，这都要归功于降维的作用。 </p><p><a href="https://www.cnblogs.com/pinard/p/6221564.html" target="_blank" rel="noopener">谱聚类（spectral clustering）原理总结_刘建平</a>、<a href="https://www.cnblogs.com/pinard/p/6235920.html" target="_blank" rel="noopener">用scikit-learn学习谱聚类</a></p><h4 id="Modularity-based-methods-–-G-Nand-Q"><a href="#Modularity-based-methods-–-G-Nand-Q" class="headerlink" title="Modularity based methods – G Nand Q"></a>Modularity based methods – G Nand Q</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Calculate the betweenness <span class="keyword">for</span> all edges <span class="keyword">in</span> the network</span><br><span class="line">   计算每一条边的边介数.</span><br><span class="line"><span class="number">2.</span> Remove the edge <span class="keyword">with</span> the highest betweenness.</span><br><span class="line">   删除边介数最大的边.</span><br><span class="line"><span class="number">3.</span> Recalculate betweennesses <span class="keyword">for</span> all edges affected by the removal.</span><br><span class="line">   重新计算网络中剩下的边的边介数.</span><br><span class="line"><span class="number">4.</span> Repeat <span class="keyword">from</span> step <span class="number">2</span> until no edges remain.</span><br><span class="line">   从步骤<span class="number">2</span>重复，直到没有边剩余.</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/aspirinvagrant/article/details/45599071" target="_blank" rel="noopener">社区发现算法（二）</a></p><h4 id="MCL"><a href="#MCL" class="headerlink" title="MCL"></a>MCL</h4><blockquote><p>MCL (Markov Cluster Algorithm) is a graph clustering algorithm. </p></blockquote><ul><li><p>Graph Clustering</p><p>和特征聚类不同，<code>图聚类</code>比较难以观察，整个算法以各点之间的距离作为突破口，可以这样形容：张三，是王五的好朋友，刚认识李四，对赵六很是反感。那么，对于该节点，我们无法直接得出他的特征，但能知道他的<code>活动圈</code>。利用图聚类，可以将同一社交范围的人聚合到一起。MCL就是属于图聚类的一种。</p></li><li><p>位于同一簇的点，其内部的联系应当紧密，而和外部的联系则比较少（惺惺相惜）</p><ul><li>如果你从一个点出发，到达其中的一个邻近点，那么你在’簇内的可能性’远大于’离开当前簇，到达新簇’的可能性——这就是MCL的核心思想。</li></ul></li></ul><h5 id="Random-walk"><a href="#Random-walk" class="headerlink" title="Random walk"></a>Random walk</h5><p>如果在一张图上进行多次的“<strong>Random Walks</strong>”，那么就有很大可能发现簇群，达到聚类的目的。而“<strong>Random Walks</strong>”的实现则是通过“<strong>Markov Chains</strong>”（马尔柯夫链）。</p><h5 id="Markov-chains"><a href="#Markov-chains" class="headerlink" title="Markov chains"></a>Markov chains</h5><p>Markov Chain——如果有由随机变量$X1,X2,X3$⋯组成的数列。$Xn$的值则是在时间$n$的状态，如果$X_{n+1}$对于过去状态的条件概率分布满足：$P(X_{n+1}=x|X_0,X_1,X_2,⋯,X_n)=P(X_{n+1}=x|X_n)$，则我们称其是一条Markov Chain.</p><ul><li>Markov Process——在给定当前知识或信息的情况下，过去（即当期以前的历史状态）对于预测将来（即当期以后的未来状态）是无关的。</li><li>下一步骤的概率仅依赖于当前概率</li></ul><h5 id="MCL-Algorithm"><a href="#MCL-Algorithm" class="headerlink" title="MCL Algorithm"></a>MCL Algorithm</h5><p>在MCL中， <strong>Expansion</strong> 和 <strong>Inflation</strong> 将不断的交替进行，<strong>Expansion</strong> 使得不同的区域之间的联系加强，而 <strong>Inflation</strong> 则不断的<code>分化</code>各点之间的联系(强者恒强，弱者恒弱)。经过多次迭代，将渐渐出现聚集现象，以此便达到了聚类的效果。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 输入：一个非全连通图，Expansion 时的参数e和 Inflation 的参数r</span><br><span class="line"><span class="number">2.</span> 建立邻接矩阵</span><br><span class="line"><span class="number">3.</span> 添加自环(避免<span class="number">0</span>概率情况)</span><br><span class="line"><span class="number">4.</span> 标准化概率矩阵</span><br><span class="line"><span class="number">5.</span> Expansion操作，每次对矩阵进行e次幂方</span><br><span class="line"><span class="number">6.</span> Inflation操作，每次对矩阵内元素进行r次幂方，再进行标准化</span><br><span class="line"><span class="number">7.</span> 重复步骤<span class="number">5</span>和<span class="number">6</span>，直到达到稳定</span><br><span class="line"><span class="number">8.</span> 将结果矩阵转化为聚簇</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/magle/p/7672957.html" target="_blank" rel="noopener">聚类算法——MCL</a></p><h3 id="Summary-4"><a href="#Summary-4" class="headerlink" title="Summary"></a>Summary</h3><center><br><img src="/2019/01/01/数据分析与挖掘/graphMining_Summary.png" width="600"><br><img src="/2019/01/01/数据分析与挖掘/CommunityDetection_Summary.png" width="600"><br></center><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li><p>看相关参考书目《数据挖掘：概念与技术》《数据挖掘导论》课后例题  着重看”简单计算”</p></li><li><p>Collaborative Filtering</p><p><a href="https://www.cnblogs.com/pinard/p/6349233.html" target="_blank" rel="noopener">协同过滤推荐算法总结</a></p><p><a href="https://www.cnblogs.com/pinard/p/6351319.html" target="_blank" rel="noopener">矩阵分解在协同过滤推荐算法中的应用</a></p><p><a href="https://www.cnblogs.com/pinard/p/6362647.html" target="_blank" rel="noopener">SimRank协同过滤推荐算法</a></p></li><li><p><a href="https://www.cnblogs.com/pinard/p/6912636.html" target="_blank" rel="noopener">EM算法原理总结</a></p></li><li><p>特征工程</p><p><a href="https://www.cnblogs.com/pinard/p/9032759.html" target="_blank" rel="noopener">特征工程之特征选择</a></p><p><a href="https://www.cnblogs.com/pinard/p/9061549.html" target="_blank" rel="noopener">特征工程之特征表达</a></p><p><a href="https://www.cnblogs.com/pinard/p/9093890.html" target="_blank" rel="noopener">特征工程之特征预处理</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【内容描述】 基于《数据挖掘：概念与技术》的简述，欲了解细节，强烈建议读原书！！！&lt;/p&gt;
    
    </summary>
    
      <category term="XD" scheme="http://yoursite.com/categories/XD/"/>
    
    
  </entry>
  
</feed>
