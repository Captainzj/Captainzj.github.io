<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Go Further</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-28T15:11:45.427Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CaptainSE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迁移学习-Introduction</title>
    <link href="http://yoursite.com/2019/02/27/%E8%BF%81%E7%A7%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/02/27/迁移学习/</id>
    <published>2019-02-27T13:30:31.000Z</published>
    <updated>2019-02-28T15:11:45.427Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】深度学习之PyTorch实战计算机视觉 第7章</p><a id="more"></a><p>如果我们用这么多资源训练的模型能够<code>解决同一类问题</code>，那么模型的性价比会提高很多，这就促使使用迁移模型解决同 一类问题的方法出现 。因为该方法的出现，我们通过对 一个训练好的模型进行细微调整，就能将其应用到相似的问题中，最后还能取得很好的效果 ; 另外，对于原始数据较少的问题，我们也能够通过采用迁移模型进行有效解决 ，所以，如果能够选取合适的迁移学习方法，则会对解决我们所面临的问题有很大的帮助 。</p><p>建议可同时阅读 <a href="https://captainzj.github.io/2018/12/28/torchvision-pretrained-Model/" target="_blank" rel="noopener">torchvision_pretrained_Model</a></p><h3 id="模型搭建和参数优化"><a href="#模型搭建和参数优化" class="headerlink" title="模型搭建和参数优化"></a>模型搭建和参数优化</h3><p>本节会先基于一个简化的VGGNet 架构搭建卷积神经网络模型井进行模型训练和参数优化，然后迁移一个完整的VGGI6架构的卷积神经网络模型，最后迁移一个ResNet50架构的卷积神经网络模型，并对比这三个模型在预测结果上的准确性和在泛化能力上的差异 。</p><h4 id="自定义VGGNet"><a href="#自定义VGGNet" class="headerlink" title="自定义VGGNet"></a>自定义VGGNet</h4><p>我们首先需要搭建一个卷积神经网络模型， 考虑到训练时间的成本，我们基于VGG16架构来搭建一个简化版的VGGNet模型，这个简化版模型要求输入的图片大小全部<code>缩放到64×64</code>， 而在标准的VGGl6架构模型中输入的图片大小应当是224×224的; 同时简化版模型<code>删除了VGG16最后的三个卷积层和池化层</code>，也<code>改变了全连接层中的连接参数</code>，这一系列的改变都是为了减少整个模型参与训练的参数数量。<br>在搭建好模型后，通过 print 对搭建的模型进行打印输出来显示模型中的细节，打印输出的代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model = Models() </span><br><span class="line"><span class="keyword">print</span> (model)</span><br></pre></td></tr></table></figure><p>然后，定义模型的损失函数和对参数进行优化的优化函数（在代码中优化函数使用的是 Adam， 损失函数使用的是交叉熵，训练次数总共是 10 次）<br>观察输出结果可见，Training…<code>train Loss:0.5051 Acc:75.3450</code> Validing… <code>valid Loss:0.4841 Acc:76.6600</code> (Time) <code>29520.38271522522</code>（约为492分钟）<br>显然，过于耗时，我们可以使用GPUs计算来加速训练，这个过程非常简单和方便，<code>只需重新对这部分参数进行类型转换就可以了</code>. 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数迁移至 GPUs 的具体代码</span></span><br><span class="line">model = model.cuda()</span><br><span class="line">X, y = Variable(X.cuda()), Variable(y.cuda())</span><br></pre></td></tr></table></figure><p>当然，在此之前，我们需要先确认GPUs硬件是否可用， 具体的代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(torch.cuda.is_available ())   <span class="comment"># 若返回的值是True，这说明我们的GPUs已经具备了被使用的全部条件</span></span><br></pre></td></tr></table></figure><p>观察输出结果可见，Training…<code>train Loss:0.1903 Acc:92.4450</code> Validing… <code>valid Loss:0.2874 Acc:88.0400</code> (Time) <code>855.5901200771332</code>（约为14分钟）<br>从结果可以看出，不仅验证测试集的准确率提升了近10%，而且耗时大幅下降。（使用GPU计算参数，效率有明显提升）</p><h4 id="迁移-VGG16"><a href="#迁移-VGG16" class="headerlink" title="迁移 VGG16"></a>迁移 VGG16</h4><p>因为承担整个模型输出分类工作的是卷积神经网络模型中的<code>全连接层</code>，所以在迁移学习的过程 中调整最多的也是全连接层部分。其基本思路是<code>冻结</code>卷积神经网络中全连接层之前的全部网络层次，让这些被冻结的网络层次中的参数在模型的训练过程中不进行梯度更新 ，能够被优化的参数仅仅是没有被冻结的全连接层（即自定义修改的新的全连接层）的全部参数。</p><p>下面看看具体的代码。首先，迁移过来的 VGG16架构模型在最后输出的结果是 1000 个 ，在我们的问题中只需两个输出结果，所以全连接层必须进行调整。模型调整的具体代码如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> parma <span class="keyword">in</span> model.parameters():</span><br><span class="line">    parma.requires_grad = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">model.classifier = torch.nn.Sequential(torch.nn.Linear(<span class="number">25088</span>, <span class="number">4096</span>),</span><br><span class="line">                                           torch.nn.ReLU(),</span><br><span class="line">                                           torch.nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">                                           torch.nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>),</span><br><span class="line">                                           torch.nn.ReLU(),</span><br><span class="line">                                           torch.nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">                                           torch.nn.Linear(<span class="number">4096</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">if</span> Use_gpu:</span><br><span class="line">    model = model.cuda()</span><br><span class="line"></span><br><span class="line">cost = torch.nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.Adam(model.classifier.parameters())</span><br></pre></td></tr></table></figure><p>观察输出结果可见，Training…<code>train Loss:0.0033 Acc:99.8950</code> Validing… <code>valid Loss:0.0899 Acc:98.3200</code><br>准确率有明显提升，说明了迁移学习是一种提升棋型泛化能力的非常有效的方法。</p><h4 id="迁移ResNet50"><a href="#迁移ResNet50" class="headerlink" title="迁移ResNet50"></a>迁移ResNet50</h4><p>模型迁移的代码为 <code>model = models.resnet50(pretrained=True)</code><br>对 ResNet50 的全连接层部分进行调整，代码调整如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> parma <span class="keyword">in</span> model.parameters(): </span><br><span class="line">    parma . requires_grad = <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line">model.fc = torch.nn.Linear(<span class="number">2048</span>, <span class="number">2</span>)  <span class="comment"># 因为ResNet50中的全连接层只有一 层，所以对代码的调整非常简单</span></span><br></pre></td></tr></table></figure><p>观察输出结果可见，Training…<code>train Loss:0.1349 Acc:95.8950</code> Validing… <code>valid Loss:0.0929 Acc:97.7400</code> -&gt;&gt; 准确率近似（略逊）于 VGG16</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>GPU训练优于CPU训练 </li><li>迁移学习可节约时间成本；相较于盲目地从头训练，准确率会有更好的保障</li></ol><p>注：如果模型的训练结果不很理想，则还可以训练更多的模型层次，优化更多的模型参数。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】深度学习之PyTorch实战计算机视觉 第7章&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>PyQt4_For_Windows_10 </title>
    <link href="http://yoursite.com/2019/02/25/PyQt4-For-Windows-10/"/>
    <id>http://yoursite.com/2019/02/25/PyQt4-For-Windows-10/</id>
    <published>2019-02-25T12:14:37.000Z</published>
    <updated>2019-02-26T13:51:08.582Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h3 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h3><ul><li>教程：<a href="https://blog.51cto.com/5001660/2084273" target="_blank" rel="noopener">windows 10 64位安装Python3.6.4</a></li><li>下载地址：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a></li><li>虚拟机Parallels Desktop For Windows10 安装路径：<code>C:\Users\Captain\AppData\Local\Programs\Python\Python36</code></li></ul><h3 id="安装PyQt4"><a href="#安装PyQt4" class="headerlink" title="安装PyQt4"></a>安装PyQt4</h3><ul><li>教程：<a href="https://blog.csdn.net/Eppley/article/details/80240305" target="_blank" rel="noopener">Windows+Python 3.6环境下安装PyQt4</a></li><li>下载地址：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyqt4</a> <a href="https://blog.csdn.net/js1568/article/details/80391761" target="_blank" rel="noopener">Win10，Python 3.6环境下安装PyQt4</a></li><li><p>安装指令：<code>pip install PyQt4-4.11.4-cp36-cp36m-win_amd64.whl</code></p><center><br>  <img src="/2019/02/25/PyQt4-For-Windows-10/PyQt4ForWin10.png" width="500/"><br></center><ul><li>若执行指令”pip install PyQt4-4.11.4-cp36-cp36m-win_amd64.whl”后，提示”PyQt4-4.11.4-cp36-cp36m-win_amd64.whl is not a supported wheel on this platform.”  可能的原因是 pip 与 该.whl 版本不匹配 （pip 可能默认调用了Anaconda3的python 3.7版本） </li></ul></li></ul><h3 id="安装Anaconda-For-win10"><a href="#安装Anaconda-For-win10" class="headerlink" title="安装Anaconda For win10"></a>安装Anaconda For win10</h3><ul><li>教程：<a href="https://www.zhihu.com/question/50003671" target="_blank" rel="noopener">win10：Anaconda安装好后,如何安装pyqt4？</a></li><li>下载地址：<a href="https://stackoverflow.com/questions/21637922/how-to-install-pyqt4-in-anaconda" target="_blank" rel="noopener">How to install PyQt4 in anaconda?</a></li><li>虚拟机Parallels Desktop For Windows10 安装路径：<code>C:\Users\Captain\Anaconda3</code></li></ul><h3 id="安装其他软件"><a href="#安装其他软件" class="headerlink" title="安装其他软件"></a>安装其他软件</h3><p>虚拟机Parallels Desktop For Windows10 安装路径：</p><ul><li>百度网盘：<code>C:\Users\Captain\AppData\Roaming\baidu\BaiduNetdisk</code></li><li>迅雷：<code>C:\Program Files (x86)\Thunder Network\Thunder</code></li><li>VSCode：<code>C:\Users\Captain\AppData\Local\Programs\Microsoft VS Code</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="环境配置" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="win10" scheme="http://yoursite.com/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>英雄述说</title>
    <link href="http://yoursite.com/2019/02/23/%E8%8B%B1%E9%9B%84%E8%BF%B0%E8%AF%B4/"/>
    <id>http://yoursite.com/2019/02/23/英雄述说/</id>
    <published>2019-02-23T05:01:52.000Z</published>
    <updated>2019-02-23T05:16:38.116Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><ul><li><a href="https://baike.baidu.com/item/东皇太一/16006021" target="_blank" rel="noopener"><code>东皇太一</code></a>,上古天庭的主宰者,乃是混沌孕育而出的大神。执掌先天至宝混沌钟，在盘古开天辟地，女娲造人造物之际镇压鸿蒙世界。东皇太一奉鸿钧道人法旨（鸿钧法旨：盘古开天，女娲造灵，太一治世）：统一洪荒万族，并且将洪荒万族合称为“妖族”。开创旷古绝今的无上霸业，登立天帝，自称东皇。立天规戒律，为三界正统至尊。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>古风小记</title>
    <link href="http://yoursite.com/2019/02/23/%E5%8F%A4%E9%A3%8E%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/23/古风小记/</id>
    <published>2019-02-23T03:20:26.933Z</published>
    <updated>2019-02-23T04:53:45.062Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="古风"><a href="#古风" class="headerlink" title="古风"></a>古风</h2><blockquote><p>诗与远方真的存在，愿你相信</p></blockquote><ul><li>我走过的山路是徐霞客曾经留宿过的，我走过的关隘是六国曾经逡巡而不敢前的，我驻足远眺的城楼是于谦曾经坚定守卫过的，我现在能驰骋由疆的西北草原是霍去病曾经为之而奋战过的，我还能吃到苏轼当年手不停箸的红烧肉，我还能饮到太白当年举杯邀月的花间美酒，我还能在众多浩劫后读到前人的筋骨血肉，我还能在大喜大悲后脱口而出一句他们曾经用来形容自己的爱恨离愁。这片土地留给我们后人的礼物，应该就这么两件了吧，一件是历史，一件是文化，前者可鉴世，后者可润心。</li></ul><h2 id="人物小记"><a href="#人物小记" class="headerlink" title="人物小记"></a>人物小记</h2><blockquote><p>因为有这样一群伟大的人，造就了一个伟大的民族</p></blockquote><ul><li>周公旦——文化的奠定者，传闻周公旦作《周礼》；第一次引出了夷夏之辩，在文化上，形成了中国的文化范畴，《左传》有言：”中国有礼仪之大，故称夏；有服章之美，谓之华；华夏，皆出于《周礼》，《周礼》出自周公旦“当之无愧的华夏文化的奠定者。</li><li>嬴政——统一的实践者，历史最终让武统成为中国形成的最后一步，秦始皇嬴政的书同文，车同轨，行同伦的政策，让我们这个国家往后，无论分裂到何种程度，一定会有先贤去努力再次统一，使中国最终成为中国🇨🇳，而不是类似欧盟的存在，嬴政统一的实践者，后世之楷模</li><li>汉武帝刘彻——疆界的划定者，中国的农耕属性，本应让这个国家的疆域定在中原气候适中、湿度适中的平原地区。但是，正是因为我们汉武大帝的雄心，让这个国家去做了，本不需要去做的事情，也为千秋后世打下了一个大大的疆土概念，不仅划定了九段线，还将大汉的军旗插在了那里。你知道吗？不仅乌鲁木齐、呼和浩特市音译的地名，其实芜湖、姑苏、余杭也都是音译。</li><li>王导——火种的保护者，当年五胡之乱，中华民族在外族的屠杀下接近灭族。这是我们第一个最危险的时刻，很可能像其他文明那样，埃及文明、古印度文明一样只留在遗迹之中，但正是王导力主南迁，衣冠南渡，使得中华民族在长江以南留下了火种，等待再次燃烧的时刻，以致我们的文明从未有过断代。</li><li>杨广——霸权的制定者，隋炀帝离千古一帝只差一步，不仅一条大运河是南北终成一体，伐高句丽、征突厥，整个初唐和盛唐都在延续隋炀帝的国策，隋唐是不修长城的，高句丽的覆灭也让整个东亚地区永远不再存在第二个农耕文明大国。</li><li>朱元璋——文明的拯救者，这是我们第二个最危险的时刻，在蒙元帝国因缺少文化因素，将自己和整个中国彻底划向伊斯兰教文化之前，以朱元璋为代表的中国人再次站了出来，让东方的海边依然是儒生的国家而不是阿訇的国度。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>本科生毕业设计（论文）安排</title>
    <link href="http://yoursite.com/2019/02/22/%E6%9C%AC%E7%A7%91%E7%94%9F%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%EF%BC%88%E8%AE%BA%E6%96%87%EF%BC%89%E5%AE%89%E6%8E%92/"/>
    <id>http://yoursite.com/2019/02/22/本科生毕业设计（论文）安排/</id>
    <published>2019-02-22T13:07:09.000Z</published>
    <updated>2019-02-22T14:59:02.030Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】流程简述</p><a id="more"></a><ul><li><a href="http://www.sohu.com/a/258607457_682145" target="_blank" rel="noopener">喇叭扩音丨2015级本科生毕业设计（论文）工作安排 </a></li><li><a href="http://www.paper120.net/j4786.html" target="_blank" rel="noopener">西安电子科技大学关于本科毕业生毕业设计论文检测查重相关事项的说明</a></li></ul><p>@timeline{</p><p>@item{</p><h6 id="2018-10月"><a href="#2018-10月" class="headerlink" title="2018.10月"></a>2018.10月</h6><p>① 启动通知</p><p>}</p><p>@item{</p><h6 id="2018-11月"><a href="#2018-11月" class="headerlink" title="2018.11月"></a>2018.11月</h6><p>② 确定选题</p><p>}</p><p>@item{</p><h6 id="2019-1月"><a href="#2019-1月" class="headerlink" title="2019.1月"></a>2019.1月</h6><p>③ 初期检查：<br>检查学生选题后对资料的收集、阅读及掌握情况，对任务的熟悉理解情况；…</p><p>}</p><p>@item{</p><h6 id="2019-3月中旬-4月上旬"><a href="#2019-3月中旬-4月上旬" class="headerlink" title="2019.3月中旬-4月上旬"></a>2019.3月中旬-4月上旬</h6><p>④ 中期检查：<br>填写“本科生毕业设计（论文）中期检查表”；<br>组织外出毕业设计检查</p><p>}</p><p>@item{</p><h6 id="2019-5月"><a href="#2019-5月" class="headerlink" title="2019.5月"></a>2019.5月</h6><p>⑤ 盲审<br>教务处：公布各学院毕业设计（论文）盲审名单，组织盲审工作<br>学院：按要求上交盲审论文；盲审结果公布后，组织学生进行修改</p><p>}</p><p>@item{</p><h6 id="2019-6月"><a href="#2019-6月" class="headerlink" title="2019.6月"></a>2019.6月</h6><p>⑥ 答辩及后期检查检查普查评估<br>检查论文的格式规范、指导教师对论文的审阅批改、<br>答辩的组织实施、论文成绩评定…</p><p>}</p><p>@item{</p><h6 id="2019-7月"><a href="#2019-7月" class="headerlink" title="2019.7月"></a>2019.7月</h6><p>⑦ 论文评优</p><p>}</p><p>@item{</p><h6 id="2019-寒假前"><a href="#2019-寒假前" class="headerlink" title="2019 寒假前"></a>2019 寒假前</h6><p>⑧ 总结、归档</p><p>}</p><p>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】流程简述&lt;/p&gt;
    
    </summary>
    
      <category term="XD" scheme="http://yoursite.com/categories/XD/"/>
    
    
  </entry>
  
  <entry>
    <title>SPJ文件简介</title>
    <link href="http://yoursite.com/2019/02/18/SPJ%E6%96%87%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/02/18/SPJ文件简介/</id>
    <published>2019-02-18T11:01:58.000Z</published>
    <updated>2019-02-25T01:45:28.353Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】spj文件是和医疗的3维数据相关的文件 ……</p><a id="more"></a><p>同时了解 stl 文件</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>.spj文件”是由清华斯维尔公司计价软件—“清单计价2003” 生成的项目文件，它是针对单位工程编制的造价文件。</li></ul><h3 id="How-to-open"><a href="#How-to-open" class="headerlink" title="How to open"></a>How to open</h3><p><a href="https://fileinfo.com/extension/spj" target="_blank" rel="noopener">.SPJ File Extension</a></p><ul><li>PhotoStage Slideshow Project <a href="https://www.nchsoftware.com/slideshow/index.html?ref=cj&amp;cjevent=1f0060ab350811e983be00a70a180514" target="_blank" rel="noopener">PhotoStage</a><ul><li>SPJ file is a <code>PhotoStage Slideshow Project</code>. NCH PhotoStage Slideshow Software is a software that enables you to create dynamic slideshows from your photos.</li></ul></li><li>Microsoft ICE Panorama Project <a href="https://www.microsoft.com/en-us/research/product/computational-photography-applications/image-composite-editor/" target="_blank" rel="noopener">ICE</a></li><li>SPSS Production Job File <a href="http://www.sdifen.com/spssstatistics25.html" target="_blank" rel="noopener">SPSS</a></li></ul><h3 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】spj文件是和医疗的3维数据相关的文件 ……&lt;/p&gt;
    
    </summary>
    
      <category term="项目调研" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E8%B0%83%E7%A0%94/"/>
    
    
      <category term="精诊科技" scheme="http://yoursite.com/tags/%E7%B2%BE%E8%AF%8A%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>Frequently-used Software/ISO</title>
    <link href="http://yoursite.com/2019/02/15/Frequently-used-Software-ISO/"/>
    <id>http://yoursite.com/2019/02/15/Frequently-used-Software-ISO/</id>
    <published>2019-02-15T08:36:19.000Z</published>
    <updated>2019-02-15T14:55:38.744Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h4 id="Windows-镜像"><a href="#Windows-镜像" class="headerlink" title="Windows 镜像"></a>Windows 镜像</h4><p><a href="http://msdn.itellyou.cn" target="_blank" rel="noopener">MSDN, 我告诉你</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（九）</title>
    <link href="http://yoursite.com/2019/02/01/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/01/PyQt5-Python-实战课程（九）/</id>
    <published>2019-01-31T16:01:53.000Z</published>
    <updated>2019-02-24T09:31:20.839Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="窗口、绘图与特效"><a href="#窗口、绘图与特效" class="headerlink" title="窗口、绘图与特效"></a>窗口、绘图与特效</h2><h3 id="设置窗口风格"><a href="#设置窗口风格" class="headerlink" title="设置窗口风格"></a>设置窗口风格</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/WindowStyle.png" width="500"><br></center><ul><li><p>要点说明：<code>QApplication.setStyle(...)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowStyle</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置窗口风格'</span>)</span><br><span class="line">        horizontalLayout = QHBoxLayout()</span><br><span class="line">        self.styleLabel = QLabel(<span class="string">'设置窗口风格：'</span>)</span><br><span class="line">        self.styleComboBox = QComboBox()</span><br><span class="line">        self.styleComboBox.addItems(QStyleFactory.keys())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前窗口的风格</span></span><br><span class="line">        print(QApplication.style().objectName()) <span class="comment"># macintosh</span></span><br><span class="line">        index = self.styleComboBox.findText(QApplication.style().objectName(),QtCore.Qt.MatchFixedString)</span><br><span class="line"></span><br><span class="line">        self.styleComboBox.setCurrentIndex(index)</span><br><span class="line">        self.styleComboBox.activated[str].connect(self.handleStyleChanged)</span><br><span class="line"></span><br><span class="line">        horizontalLayout.addWidget(self.styleLabel)</span><br><span class="line">        horizontalLayout.addWidget(self.styleComboBox)</span><br><span class="line">        self.setLayout(horizontalLayout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleStyleChanged</span><span class="params">(self,style)</span>:</span></span><br><span class="line">        QApplication.setStyle(style)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = WindowStyle()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="设置窗口样式"><a href="#设置窗口样式" class="headerlink" title="设置窗口样式"></a>设置窗口样式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/WindowPattern.png" width="500"><br></center><ul><li><p>要点说明：</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowPattern</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.resize(<span class="number">500</span>,<span class="number">260</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置窗口的样式'</span>)</span><br><span class="line"></span><br><span class="line">        self.setWindowFlags(Qt.WindowMaximizeButtonHint | Qt.WindowStaysOnTopHint )</span><br><span class="line">        self.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        self.setStyleSheet(<span class="string">"#MainWindow&#123;border-image:url(images/python.jpg);&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = WindowPattern()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用代码设置窗口的最大化和最小化"><a href="#用代码设置窗口的最大化和最小化" class="headerlink" title="用代码设置窗口的最大化和最小化"></a>用代码设置窗口的最大化和最小化</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/WindowMaxMin.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 自定义窗口类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowMaxMin</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">###  构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        <span class="string">'''构造函数'''</span></span><br><span class="line">        <span class="comment"># 调用父类构造函数</span></span><br><span class="line">        super(WindowMaxMin, self).__init__(parent)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">400</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"用代码控制窗口的最大化和最小化"</span>)</span><br><span class="line">        self.setWindowFlags(Qt.WindowMaximizeButtonHint)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        maxButton1 = QPushButton()</span><br><span class="line">        maxButton1.setText(<span class="string">'窗口最大化1'</span>)</span><br><span class="line">        maxButton1.clicked.connect(self.maximized1)</span><br><span class="line"></span><br><span class="line">        maxButton2 = QPushButton()</span><br><span class="line">        maxButton2.setText(<span class="string">'窗口最大化2'</span>)</span><br><span class="line">        maxButton2.clicked.connect(self.showMaximized)</span><br><span class="line"></span><br><span class="line">        minButton = QPushButton()</span><br><span class="line">        minButton.setText(<span class="string">'窗口最小化'</span>)</span><br><span class="line">        minButton.clicked.connect(self.showMinimized)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(maxButton1)</span><br><span class="line">        layout.addWidget(maxButton2)</span><br><span class="line">        layout.addWidget(minButton)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximized1</span><span class="params">(self)</span>:</span></span><br><span class="line">        desktop = QApplication.desktop()</span><br><span class="line">        <span class="comment"># 获取桌面可用尺寸</span></span><br><span class="line">        rect = desktop.availableGeometry()</span><br><span class="line"></span><br><span class="line">        self.setGeometry(rect)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = WindowMaxMin()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="项目实战：实现绘图应用"><a href="#项目实战：实现绘图应用" class="headerlink" title="项目实战：实现绘图应用"></a>项目实战：实现绘图应用</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Drawing.png" width="500"><br></center><ul><li><p>要点说明（需要解决3个核心内容）</p><ol><li><p>如何绘图<br>在paintEvent方法中绘图，通过调用update方法触发painEvent的调用</p></li><li><p>在哪里绘图<br>在白色背景的QPixmap对象中绘图</p></li><li><p>如何通过移动鼠标进行绘图<br>鼠标拥有3个事件：(缺任一，不可运行)<br>（1）鼠标按下：mousePressEvent<br>（2）鼠标移动：mouseMoveEvent<br>（3）鼠标抬起：mouseReleaseEvent</p></li></ol></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(Drawing, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"绘图应用"</span>)</span><br><span class="line">        self.pix = QPixmap()</span><br><span class="line">        self.lastPoint = QPoint()</span><br><span class="line">        self.endPoint = QPoint()</span><br><span class="line">        self.initUi()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUi</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.resize(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">        <span class="comment"># 画布大小为400*400，背景为白色</span></span><br><span class="line">        self.pix = QPixmap(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">        self.pix.fill(Qt.white)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        pp = QPainter(self.pix)</span><br><span class="line">        <span class="comment"># 根据鼠标指针前后两个位置绘制直线</span></span><br><span class="line">        pp.drawLine(self.lastPoint, self.endPoint)</span><br><span class="line">        <span class="comment"># 让前一个坐标值等于后一个坐标值，这样就能实现画出连续的线</span></span><br><span class="line">        self.lastPoint = self.endPoint</span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, self.pix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.lastPoint = event.pos()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.buttons() <span class="keyword">and</span> Qt.LeftButton:</span><br><span class="line">            self.endPoint = event.pos()</span><br><span class="line">            self.update()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="comment"># 鼠标左键释放</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.endPoint = event.pos()</span><br><span class="line">            <span class="comment"># 进行重新绘制</span></span><br><span class="line">            self.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Drawing()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QSS基础"><a href="#QSS基础" class="headerlink" title="QSS基础"></a>QSS基础</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/BasicQSS.png" width="500"><br></center><ul><li>要点说明<br>  QSS（<code>Qt Style Sheets</code>） Qt样式表</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicQSS</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"QSS样式"</span>)</span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn1.setText(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2 = QPushButton(self)</span><br><span class="line">        btn2.setText(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3 = QPushButton(self)</span><br><span class="line">        btn3.setText(<span class="string">"按钮3"</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line">        vbox.addWidget(btn2)</span><br><span class="line">        vbox.addWidget(btn3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = BasicQSS()</span><br><span class="line">    <span class="comment"># 选择器</span></span><br><span class="line">    qssStyle = <span class="string">'''</span></span><br><span class="line"><span class="string">        QPushButton &#123;</span></span><br><span class="line"><span class="string">            background-color:pink</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    form.setStyleSheet(qssStyle)</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用QSS选择器设置控件样式"><a href="#使用QSS选择器设置控件样式" class="headerlink" title="使用QSS选择器设置控件样式"></a>使用QSS选择器设置控件样式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/QSSSelector.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> qdarkstyle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSSSelector</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"QSS样式"</span>)</span><br><span class="line"></span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn1.setText(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2 = QPushButton(self)</span><br><span class="line">        btn2.setProperty(<span class="string">'name'</span>,<span class="string">'btn2'</span>)</span><br><span class="line">        btn2.setText(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3 = QPushButton(self)</span><br><span class="line">        btn3.setProperty(<span class="string">'name'</span>,<span class="string">'btn3'</span>)</span><br><span class="line">        btn3.setText(<span class="string">"按钮3"</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line">        vbox.addWidget(btn2)</span><br><span class="line">        vbox.addWidget(btn3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = QSSSelector()</span><br><span class="line">    <span class="comment"># 选择器</span></span><br><span class="line">    qssStyle = <span class="string">'''</span></span><br><span class="line"><span class="string">        QPushButton[name="btn2"] &#123;</span></span><br><span class="line"><span class="string">            background-color:red;</span></span><br><span class="line"><span class="string">            color:yellow;</span></span><br><span class="line"><span class="string">            height:50;</span></span><br><span class="line"><span class="string">            font-size:30px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        QPushButton[name="btn3"] &#123;</span></span><br><span class="line"><span class="string">            background-color:blue;</span></span><br><span class="line"><span class="string">            color:yellow;</span></span><br><span class="line"><span class="string">            height:25;</span></span><br><span class="line"><span class="string">            font-size:15px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># form.setStyleSheet(qssStyle)</span></span><br><span class="line">    form.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QSS子控件选择器"><a href="#QSS子控件选择器" class="headerlink" title="QSS子控件选择器"></a>QSS子控件选择器</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/QSSSubControl.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSSSubControl</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"QSS子控件选择器"</span>)</span><br><span class="line">        combo = QComboBox(self)</span><br><span class="line">        combo.setObjectName(<span class="string">"myComboBox"</span>)</span><br><span class="line">        combo.addItem(<span class="string">"Window"</span>)</span><br><span class="line">        combo.addItem(<span class="string">"Linux"</span>)</span><br><span class="line">        combo.addItem(<span class="string">"Mac OS X"</span>)</span><br><span class="line"></span><br><span class="line">        combo.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">250</span>,<span class="number">200</span>,<span class="number">320</span>,<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = QSSSubControl()</span><br><span class="line">    qssStyle = <span class="string">'''</span></span><br><span class="line"><span class="string">       QComboBox#myComboBox::drop-down &#123;</span></span><br><span class="line"><span class="string">           image:url(./images/dropdown.png)</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    form.setStyleSheet(qssStyle)</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QDarkStyleSheet样式"><a href="#QDarkStyleSheet样式" class="headerlink" title="QDarkStyleSheet样式"></a>QDarkStyleSheet样式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/DarkStyleSheet.png" width="500"><br></center><ul><li><p>要点说明：<code>pip install qdarkstyle</code>/<code>conda install qdarkstyle</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets, QtCore</span><br><span class="line"><span class="comment"># make the example runnable without the need to install</span></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> abspath, dirname</span><br><span class="line">sys.path.insert(<span class="number">0</span>, abspath(dirname(abspath(__file__)) + <span class="string">'/..'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> qdarkstyle</span><br><span class="line"><span class="keyword">import</span> ui.example_pyqt5_ui <span class="keyword">as</span> example_ui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Application entry point</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">    <span class="comment"># create the application and the main window</span></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    window = QtWidgets.QMainWindow()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup ui</span></span><br><span class="line">    ui = example_ui.Ui_MainWindow()</span><br><span class="line">    ui.setupUi(window)</span><br><span class="line">    ui.bt_delay_popup.addActions([</span><br><span class="line">        ui.actionAction,</span><br><span class="line">        ui.actionAction_C</span><br><span class="line">    ])</span><br><span class="line">    ui.bt_instant_popup.addActions([</span><br><span class="line">        ui.actionAction,</span><br><span class="line">        ui.actionAction_C</span><br><span class="line">    ])</span><br><span class="line">    ui.bt_menu_button_popup.addActions([</span><br><span class="line">        ui.actionAction,</span><br><span class="line">        ui.actionAction_C</span><br><span class="line">    ])</span><br><span class="line">    item = QtWidgets.QTableWidgetItem(<span class="string">"Test"</span>)</span><br><span class="line">    item.setCheckState(QtCore.Qt.Checked)</span><br><span class="line">    ui.tableWidget.setItem(<span class="number">0</span>, <span class="number">0</span>, item)</span><br><span class="line">    window.setWindowTitle(<span class="string">"QDarkStyle example"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tabify dock widgets to show bug #6</span></span><br><span class="line">    window.tabifyDockWidget(ui.dockWidget1, ui.dockWidget2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setup stylesheet</span></span><br><span class="line">    print(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># auto quit after 2s when testing on travis-ci</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"--travis"</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">        QtCore.QTimer.singleShot(<span class="number">2000</span>, app.exit)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># run</span></span><br><span class="line">    window.show()</span><br><span class="line">    app.exec_()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3种设置背景色和背景图片的方式"><a href="#3种设置背景色和背景图片的方式" class="headerlink" title="3种设置背景色和背景图片的方式"></a>3种设置背景色和背景图片的方式</h3><ul><li>使用多种方式设置窗口背景色和背景图片<ol><li>QSS</li><li>QPalette</li><li>直接绘制</li></ol></li></ul><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">win = QMainWindow()</span><br><span class="line">win.setWindowTitle(<span class="string">"背景图片"</span>)</span><br><span class="line">win.resize(<span class="number">350</span>,<span class="number">250</span>)</span><br><span class="line">win.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 通过QSS动态修改窗口的背景颜色和背景图片</span></span><br><span class="line"><span class="string">#win.setStyleSheet("#MainWindow&#123;border-image:url(./images/python.jpg);&#125;")</span></span><br><span class="line"><span class="string">win.setStyleSheet("#MainWindow&#123;background-color:yellow&#125;")</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过QPalette设置背景图片和背景颜色</span></span><br><span class="line"><span class="comment"># palette = QPalette()</span></span><br><span class="line"><span class="comment"># palette.setBrush(QPalette.Background,QBrush(QPixmap("./images/python.jpg")))</span></span><br><span class="line"><span class="comment"># palette.setColor(QPalette.Background,Qt.red)</span></span><br><span class="line"><span class="comment"># win.setPalette(palette)</span></span><br><span class="line"></span><br><span class="line">win.show()</span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background1.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Background1</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"绘制背景颜色"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.setBrush(Qt.yellow)</span><br><span class="line">        painter.drawRect(self.rect())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Background1()</span><br><span class="line"></span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Background2.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Background2</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"绘制背景图片"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        pixmap = QPixmap(<span class="string">'./images/screen1.jpg'</span>)</span><br><span class="line"></span><br><span class="line">        painter.drawPixmap(self.rect(),pixmap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Background2()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="实现不规则窗口（异形窗口）"><a href="#实现不规则窗口（异形窗口）" class="headerlink" title="实现不规则窗口（异形窗口）"></a>实现不规则窗口（异形窗口）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/AbnormityWindow.png" width="500"><br></center><ul><li><p>要点说明</p><ol><li>通过mask实现异形窗口</li><li>需要一张透明的png图，透明部分被扣出，形成一个非矩形的区域</li><li>移动和关闭不规则窗口</li></ol></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbnormityWindow</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"异形窗口"</span>)</span><br><span class="line">        self.pix = QBitmap(<span class="string">'./images/mask.png'</span>)</span><br><span class="line">        self.resize(self.pix.size())</span><br><span class="line">        self.setMask(self.pix)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.m_drag = <span class="keyword">True</span></span><br><span class="line">            self.m_DragPosition = event.globalPos() - self.pos()</span><br><span class="line">            self.setCursor(QCursor(Qt.OpenHandCursor))</span><br><span class="line">            print(<span class="string">"event.globalPos()"</span>,event.globalPos())  <span class="comment">#</span></span><br><span class="line">            print(<span class="string">"event.pos()"</span>,event.pos())</span><br><span class="line">            print(<span class="string">"self.pos()"</span>,self.pos())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.RightButton:</span><br><span class="line">            self.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> Qt.LeftButton <span class="keyword">and</span> self.m_drag:</span><br><span class="line">            <span class="comment"># 当左键移动窗体修改偏移值</span></span><br><span class="line">            <span class="comment"># QPoint</span></span><br><span class="line">            <span class="comment"># 实时计算窗口左上角坐标</span></span><br><span class="line">            self.move(QMouseEvent.globalPos() - self.m_DragPosition)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        self.m_drag = <span class="keyword">False</span></span><br><span class="line">        self.setCursor(QCursor(Qt.ArrowCursor))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.drawPixmap(<span class="number">0</span>,<span class="number">0</span>,self.pix.width(),self.pix.height(),QPixmap(<span class="string">'./images/screen1.jpg'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = AbnormityWindow()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="移动和关闭不规则窗口（异形窗口）"><a href="#移动和关闭不规则窗口（异形窗口）" class="headerlink" title="移动和关闭不规则窗口（异形窗口）"></a>移动和关闭不规则窗口（异形窗口）</h3><h3 id="实现异形窗口动画效果"><a href="#实现异形窗口动画效果" class="headerlink" title="实现异形窗口动画效果"></a>实现异形窗口动画效果</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/AnimationWindows.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap, QPainter, QCursor</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QTimer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimationWindows</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(AnimationWindows, self).__init__(parent)</span><br><span class="line">        self.i = <span class="number">1</span></span><br><span class="line">        self.mypix()</span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.setInterval(<span class="number">500</span>)  <span class="comment"># 500毫秒</span></span><br><span class="line">        self.timer.timeout.connect(self.timeChange)</span><br><span class="line">        self.timer.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示不规则 pic</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mypix</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.update()</span><br><span class="line">        <span class="keyword">if</span> self.i == <span class="number">5</span>:</span><br><span class="line">            self.i = <span class="number">1</span></span><br><span class="line">        self.mypic = &#123;<span class="number">1</span>: <span class="string">'./images/left.png'</span>, <span class="number">2</span>: <span class="string">"./images/up.png"</span>, <span class="number">3</span>: <span class="string">'./images/right.png'</span>, <span class="number">4</span>: <span class="string">'./images/down.png'</span>&#125;</span><br><span class="line">        self.pix = QPixmap(self.mypic[self.i])</span><br><span class="line">        self.resize(self.pix.size())</span><br><span class="line">        self.setMask(self.pix.mask())</span><br><span class="line">        self.dragPosition = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标双击事件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == <span class="number">1</span>:</span><br><span class="line">            self.i += <span class="number">1</span></span><br><span class="line">            self.mypix()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每500毫秒修改paint</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeChange</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.i += <span class="number">1</span></span><br><span class="line">        self.mypix()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> event.button() == Qt.LeftButton:</span><br><span class="line">            self.m_drag = <span class="keyword">True</span></span><br><span class="line">            self.m_DragPosition = event.globalPos() - self.pos()</span><br><span class="line"></span><br><span class="line">            self.setCursor(QCursor(Qt.OpenHandCursor))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> Qt.LeftButton <span class="keyword">and</span> self.m_drag:</span><br><span class="line">            self.move(QMouseEvent.globalPos() - self.m_DragPosition)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span><span class="params">(self, QMouseEvent)</span>:</span></span><br><span class="line">        self.m_drag = <span class="keyword">False</span></span><br><span class="line">        self.setCursor(QCursor(Qt.ArrowCursor))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, self.pix.width(), self.pix.height(), self.pix)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = AnimationWindows()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="装载gif动画文件"><a href="#装载gif动画文件" class="headerlink" title="装载gif动画文件"></a>装载gif动画文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/gifanim.png" width="500"><br></center><ul><li><p>要点说明： <code>QMovie</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,  QLabel  ,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QMovie</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingGif</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.label = QLabel(<span class="string">""</span>,self)</span><br><span class="line">        self.setFixedSize(<span class="number">128</span>,<span class="number">128</span>)</span><br><span class="line">        self.setWindowFlags(Qt.Dialog | Qt.CustomizeWindowHint)</span><br><span class="line">        self.movie = QMovie(<span class="string">'./images/loading.gif'</span>)</span><br><span class="line">        self.label.setMovie(self.movie)</span><br><span class="line">        self.movie.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = LoadingGif()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用QSS为标签和按钮添加背景图"><a href="#使用QSS为标签和按钮添加背景图" class="headerlink" title="使用QSS为标签和按钮添加背景图"></a>使用QSS为标签和按钮添加背景图</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/LabelButtonBackground.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LabelButtonBackground</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        label1 = QLabel(self)</span><br><span class="line">        label1.setToolTip(<span class="string">'这是一个文本标签'</span>)</span><br><span class="line">        label1.setStyleSheet(<span class="string">'QLabel&#123;border-image:url(./images/python.jpg);&#125;'</span>)</span><br><span class="line">        label1.setFixedWidth(<span class="number">476</span>)</span><br><span class="line">        label1.setFixedHeight(<span class="number">259</span>)</span><br><span class="line"></span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn1.setObjectName(<span class="string">'btn1'</span>)</span><br><span class="line">        btn1.setMaximumSize(<span class="number">48</span>, <span class="number">48</span>)</span><br><span class="line">        btn1.setMinimumSize(<span class="number">48</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        style = <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            #btn1&#123;</span></span><br><span class="line"><span class="string">                border-radius:4px;</span></span><br><span class="line"><span class="string">                background-image:url('./images/add.png');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            #btn1:Pressed &#123;</span></span><br><span class="line"><span class="string">                background-image:url('./images/addhover.png');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        btn1.setStyleSheet(style)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addStretch()</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line">        self.setWindowTitle(<span class="string">'使用QSS为标签和按钮添加背景图'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = LabelButtonBackground()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/ScaleImage.png" width="500"><br></center><ul><li><p>要点说明：<code>QImage.scaled</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QLabel, QWidget, QVBoxLayout</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaleImage</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"图片大小缩放例子"</span>)</span><br><span class="line">        filename = <span class="string">'./images/Cloudy_72px.png'</span></span><br><span class="line">        img = QImage(filename)</span><br><span class="line">        label1 = QLabel(self)</span><br><span class="line">        label1.setFixedWidth(<span class="number">200</span>)</span><br><span class="line">        label1.setFixedHeight(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        result = img.scaled(label1.width(),label1.height(),Qt.IgnoreAspectRatio,Qt.SmoothTransformation)</span><br><span class="line">        label1.setPixmap(QPixmap.fromImage(result))</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = ScaleImage()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="创建透明和半透明窗口"><a href="#创建透明和半透明窗口" class="headerlink" title="创建透明和半透明窗口"></a>创建透明和半透明窗口</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/OpacityWindow.png" width="500"><br></center><ul><li><p>要点说明：<code>win.setWindowOpacity(0.6)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = QMainWindow()</span><br><span class="line">    win.setWindowTitle(<span class="string">'窗口的透明度设置'</span>)</span><br><span class="line">    <span class="comment"># 0到1，1表示不透明，0表示完全透明</span></span><br><span class="line">    win.setWindowOpacity(<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    button = QPushButton(<span class="string">'我的按钮'</span>,win)</span><br><span class="line"></span><br><span class="line">    win.resize(<span class="number">400</span>,<span class="number">200</span>)</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="装载QSS文件"><a href="#装载QSS文件" class="headerlink" title="装载QSS文件"></a>装载QSS文件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/LoadQSS.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> CommonHelper <span class="keyword">import</span> CommonHelper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MainWindow, self).__init__(parent)</span><br><span class="line">        self.resize(<span class="number">477</span>, <span class="number">258</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"加载QSS文件"</span>)</span><br><span class="line">        btn = QPushButton()</span><br><span class="line">        btn.setText(<span class="string">'装载QSS文件'</span>)</span><br><span class="line">        btn.setToolTip(<span class="string">'提示文本'</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(btn)</span><br><span class="line">        btn.clicked.connect(self.onClick)</span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">        widget  = QWidget(self)</span><br><span class="line">        self.setCentralWidget(widget)</span><br><span class="line">        widget.setLayout(vbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        styleFile = <span class="string">'./style.qss'</span></span><br><span class="line">        qssStyle = CommonHelper.readQSS(styleFile)</span><br><span class="line">        win.setStyleSheet(qssStyle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MainWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>CommonHelper.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonHelper</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readQSS</span><span class="params">(style)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(style,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> f.read()</span><br></pre></td></tr></table></figure><p>style.qss 👇</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">QMainWindow</span>&#123;</span><br><span class="line">    <span class="attribute">border-image</span>:<span class="built_in">url</span>(./images/python.jpg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">QToolTip</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="built_in">rgb</span>(45,45,45);</span><br><span class="line">   <span class="attribute">background</span>:white;</span><br><span class="line">   <span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用动画效果改变窗口的尺寸"><a href="#用动画效果改变窗口的尺寸" class="headerlink" title="用动画效果改变窗口的尺寸"></a>用动画效果改变窗口的尺寸</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/AnimWindow.png" width="500"><br></center><ul><li><p>要点说明：<code>QPropertyAnimation</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimWindow</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(AnimWindow, self).__init__()</span><br><span class="line">        self.OrigHeight = <span class="number">50</span></span><br><span class="line">        self.ChangeHeight = <span class="number">150</span></span><br><span class="line">        self.setGeometry(QRect(<span class="number">500</span>, <span class="number">400</span>, <span class="number">150</span>, self.OrigHeight))</span><br><span class="line">        self.btn = QPushButton(<span class="string">'展开'</span>, self)</span><br><span class="line">        self.btn.setGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">60</span>, <span class="number">35</span>)</span><br><span class="line">        self.btn.clicked.connect(self.change)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(self)</span>:</span></span><br><span class="line">        currentHeight = self.height()</span><br><span class="line">        <span class="keyword">if</span> self.OrigHeight == currentHeight:</span><br><span class="line">            startHeight = self.OrigHeight</span><br><span class="line">            endHeight = self.ChangeHeight</span><br><span class="line">            self.btn.setText(<span class="string">'收缩'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            startHeight = self.ChangeHeight</span><br><span class="line">            endHeight= self.OrigHeight</span><br><span class="line">            self.btn.setText(<span class="string">'展开'</span>)</span><br><span class="line"></span><br><span class="line">        self.animation = QPropertyAnimation(self,<span class="string">b'geometry'</span>)</span><br><span class="line">        self.animation.setDuration(<span class="number">500</span>)</span><br><span class="line">        self.animation.setStartValue(QRect(<span class="number">500</span>,<span class="number">400</span>,<span class="number">150</span>,startHeight))</span><br><span class="line">        self.animation.setEndValue(QRect(<span class="number">500</span>,<span class="number">400</span>,<span class="number">150</span>,endHeight))</span><br><span class="line">        self.animation.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = AnimWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用动画效果–不同速度移动窗口"><a href="#用动画效果–不同速度移动窗口" class="headerlink" title="用动画效果–不同速度移动窗口"></a>用动画效果–不同速度移动窗口</h3><ul><li>效果说明: 两个窗口（window1、window2）并行（同时）/串行（一先一后）biubiubiu动画移动</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">window1 = QMainWindow()</span><br><span class="line">window1.show()</span><br><span class="line">window2 = QMainWindow()</span><br><span class="line">window2.show()</span><br><span class="line"></span><br><span class="line">animation1 = QPropertyAnimation(window1, <span class="string">b'geometry'</span>)</span><br><span class="line">animation2 = QPropertyAnimation(window2, <span class="string">b'geometry'</span>)</span><br><span class="line"></span><br><span class="line">group = QParallelAnimationGroup()  <span class="comment"># 并行</span></span><br><span class="line"><span class="comment"># group = QSequentialAnimationGroup()  # 串行</span></span><br><span class="line"></span><br><span class="line">group.addAnimation(animation1)</span><br><span class="line">group.addAnimation(animation2)</span><br><span class="line"></span><br><span class="line">animation1.setDuration(<span class="number">3000</span>)</span><br><span class="line">animation1.setStartValue(QRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation1.setEndValue(QRect(<span class="number">250</span>,<span class="number">250</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation1.setEasingCurve(QEasingCurve.OutBounce)</span><br><span class="line"></span><br><span class="line">animation2.setDuration(<span class="number">4000</span>)</span><br><span class="line">animation2.setStartValue(QRect(<span class="number">250</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation2.setEndValue(QRect(<span class="number">850</span>,<span class="number">250</span>,<span class="number">100</span>,<span class="number">30</span>))</span><br><span class="line">animation2.setEasingCurve(QEasingCurve.CosineCurve)</span><br><span class="line"></span><br><span class="line">group.start()</span><br><span class="line"></span><br><span class="line">sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h2 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h2><h3 id="用PyInstaller打包PyQt5"><a href="#用PyInstaller打包PyQt5" class="headerlink" title="用PyInstaller打包PyQt5"></a>用PyInstaller打包PyQt5</h3><ul><li>要点说明</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line"></span><br><span class="line">pyinstaller -Fw Calc.py</span><br><span class="line"></span><br><span class="line">-w：不显示终端</span><br><span class="line">-F：将所有的库打包成一个单独的文件</span><br></pre></td></tr></table></figure><h3 id="操作SQLite数据库"><a href="#操作SQLite数据库" class="headerlink" title="操作SQLite数据库"></a>操作SQLite数据库</h3><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtSql <span class="keyword">import</span> QSqlDatabase,QSqlQuery</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDB</span><span class="params">()</span>:</span></span><br><span class="line">    db = QSqlDatabase.addDatabase(<span class="string">'QSQLITE'</span>)</span><br><span class="line">    <span class="comment"># 指定SQLite数据库的文件名</span></span><br><span class="line">    db.setDatabaseName(<span class="string">'./db/database.db'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db.open():</span><br><span class="line">        print(<span class="string">'无法建立与数据库的连接'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    query = QSqlQuery()</span><br><span class="line">    query.exec(<span class="string">'create table people(id int primary key,name varchar(10),address varchar(50))'</span>)</span><br><span class="line">    query.exec(<span class="string">'insert into people values(1,"李宁","Shenyang")'</span>)</span><br><span class="line">    query.exec(<span class="string">'insert into people values(2,"超人","克星")'</span>)</span><br><span class="line">    db.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    createDB()</span><br></pre></td></tr></table></figure><h3 id="使用可视化的方式对SQLite数据库进行增、删、改、查操作"><a href="#使用可视化的方式对SQLite数据库进行增、删、改、查操作" class="headerlink" title="使用可视化的方式对SQLite数据库进行增、删、改、查操作"></a>使用可视化的方式对SQLite数据库进行增、删、改、查操作</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/DataGrid.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtSql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initializeModel</span><span class="params">(model)</span>:</span></span><br><span class="line">    model.setTable(<span class="string">'people'</span>)</span><br><span class="line">    model.setEditStrategy(QSqlTableModel.OnFieldChange)</span><br><span class="line">    model.select()</span><br><span class="line">    model.setHeaderData(<span class="number">0</span>, Qt.Horizontal,<span class="string">'ID'</span>)</span><br><span class="line">    model.setHeaderData(<span class="number">1</span>, Qt.Horizontal, <span class="string">'姓名'</span>)</span><br><span class="line">    model.setHeaderData(<span class="number">2</span>, Qt.Horizontal, <span class="string">'地址'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createView</span><span class="params">(title,model)</span>:</span></span><br><span class="line">    view = QTableView()</span><br><span class="line">    view.setModel(model)</span><br><span class="line">    view.setWindowTitle(title)</span><br><span class="line">    <span class="keyword">return</span> view</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findrow</span><span class="params">(i)</span>:</span></span><br><span class="line">    delrow = i.row()</span><br><span class="line">    print(<span class="string">'find row=%s'</span> % str(delrow))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addrow</span><span class="params">()</span>:</span></span><br><span class="line">    ret = model.insertRows(model.rowCount(),<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'insertRow=%s'</span> % str(ret))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    db = QSqlDatabase.addDatabase(<span class="string">'QSQLITE'</span>)</span><br><span class="line">    db.setDatabaseName(<span class="string">'./db/database.db'</span>)</span><br><span class="line"></span><br><span class="line">    model = QSqlTableModel()</span><br><span class="line">    delrow = <span class="number">-1</span></span><br><span class="line">    initializeModel(model)</span><br><span class="line">    view = createView(<span class="string">"展示数据"</span>,model)</span><br><span class="line">    view.clicked.connect(findrow)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addBtn = QPushButton(<span class="string">'添加一行'</span>)</span><br><span class="line">    addBtn.clicked.connect(addrow)</span><br><span class="line"></span><br><span class="line">    delBtn = QPushButton(<span class="string">'删除一行'</span>)</span><br><span class="line">    delBtn.clicked.connect(<span class="keyword">lambda</span> :model.removeRow(view.currentIndex().row()))</span><br><span class="line"></span><br><span class="line">    layout = QVBoxLayout()</span><br><span class="line">    layout.addWidget(view)</span><br><span class="line">    layout.addWidget(addBtn)</span><br><span class="line">    layout.addWidget(delBtn)</span><br><span class="line"></span><br><span class="line">    dlg = QDialog()</span><br><span class="line">    dlg.setLayout(layout)</span><br><span class="line">    dlg.setWindowTitle(<span class="string">"Database Demo"</span>)</span><br><span class="line">    dlg.resize(<span class="number">500</span>,<span class="number">400</span>)</span><br><span class="line">    dlg.show()</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><h3 id="分页显示数据"><a href="#分页显示数据" class="headerlink" title="分页显示数据"></a>分页显示数据</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/DataGrid1.png" width="500"><br></center><ul><li><p>要点说明：<code>limit n,m</code></p></li><li><p>完整代码：<a href="https://github.com/Captainzj/PyQt5_Practice/blob/master/src/ext/DataGrid1.py" target="_blank" rel="noopener">DataGrid1.py</a></p></li></ul><h3 id="使用PyQtGraph进行数据可视化"><a href="#使用PyQtGraph进行数据可视化" class="headerlink" title="使用PyQtGraph进行数据可视化"></a>使用PyQtGraph进行数据可视化</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/Graph.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow, QApplication</span><br><span class="line"><span class="keyword">import</span> pyqtgraph <span class="keyword">as</span> pg</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pyqtgraph_pyqt <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(MainWindow, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        pg.setConfigOption(<span class="string">'background'</span>, <span class="string">'#f0f0f0'</span>)</span><br><span class="line">        pg.setConfigOption(<span class="string">'foreground'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.draw1()</span><br><span class="line">        self.draw2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pyqtgraph1.clear()</span><br><span class="line"></span><br><span class="line">        <span class="string">'''第一种绘图方式'''</span></span><br><span class="line">        print(np.random.normal(size=<span class="number">120</span>))</span><br><span class="line">        self.pyqtgraph1.addPlot(title=<span class="string">"绘图单条线"</span>, y=np.random.normal(size=<span class="number">120</span>), pen=pg.mkPen(color=<span class="string">'b'</span>, width=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        <span class="string">'''第二种绘图方式'''</span></span><br><span class="line">        plt2 = self.pyqtgraph1.addPlot(title=<span class="string">'绘制多条线'</span>)</span><br><span class="line"></span><br><span class="line">        plt2.plot(np.random.normal(size=<span class="number">150</span>), pen=pg.mkPen(color=<span class="string">'r'</span>, width=<span class="number">2</span>),</span><br><span class="line">                  name=<span class="string">"Red curve"</span>)</span><br><span class="line">        plt2.plot(np.random.normal(size=<span class="number">110</span>) + <span class="number">5</span>, pen=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), name=<span class="string">"Green curve"</span>)</span><br><span class="line">        plt2.plot(np.random.normal(size=<span class="number">120</span>) + <span class="number">10</span>, pen=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), name=<span class="string">"Blue curve"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw2</span><span class="params">(self)</span>:</span></span><br><span class="line">        plt = self.pyqtgraph2.addPlot(title=<span class="string">'绘制条状图'</span>)</span><br><span class="line">        x = np.arange(<span class="number">10</span>)</span><br><span class="line">        print(x)</span><br><span class="line">        y1 = np.sin(x)</span><br><span class="line">        y2 = <span class="number">1.1</span> * np.sin(x + <span class="number">1</span>)</span><br><span class="line">        y3 = <span class="number">1.2</span> * np.sin(x + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        bg1 = pg.BarGraphItem(x=x, height=y1, width=<span class="number">0.3</span>, brush=<span class="string">'r'</span>)</span><br><span class="line">        bg2 = pg.BarGraphItem(x=x + <span class="number">0.33</span>, height=y2, width=<span class="number">0.3</span>, brush=<span class="string">'g'</span>)</span><br><span class="line">        bg3 = pg.BarGraphItem(x=x + <span class="number">0.66</span>, height=y3, width=<span class="number">0.3</span>, brush=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">        plt.addItem(bg1)</span><br><span class="line">        plt.addItem(bg2)</span><br><span class="line">        plt.addItem(bg3)</span><br><span class="line"></span><br><span class="line">        self.pyqtgraph2.nextRow()</span><br><span class="line"></span><br><span class="line">        p4 = self.pyqtgraph2.addPlot(title=<span class="string">"参数图+显示网格"</span>)</span><br><span class="line">        x = np.cos(np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">1000</span>))</span><br><span class="line">        y = np.sin(np.linspace(<span class="number">0</span>, <span class="number">4</span> * np.pi, <span class="number">1000</span>))</span><br><span class="line">        p4.plot(x, y, pen=pg.mkPen(color=<span class="string">'d'</span>, width=<span class="number">2</span>))</span><br><span class="line">        <span class="comment">#p4.showGrid(x=True, y=True)  # 显示网格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ui = MainWindow()</span><br><span class="line">    ui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>pyqtgraph_pyqt.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'pyqtgraph_pyqt.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.9.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_MainWindow</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        MainWindow.setObjectName(<span class="string">"MainWindow"</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">"centralwidget"</span>)</span><br><span class="line">        self.pyqtgraph1 = GraphicsLayoutWidget(self.centralwidget)</span><br><span class="line">        self.pyqtgraph1.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">721</span>, <span class="number">251</span>))</span><br><span class="line">        self.pyqtgraph1.setObjectName(<span class="string">"pyqtgraph1"</span>)</span><br><span class="line">        self.pyqtgraph2 = GraphicsLayoutWidget(self.centralwidget)</span><br><span class="line">        self.pyqtgraph2.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">290</span>, <span class="number">501</span>, <span class="number">281</span>))</span><br><span class="line">        self.pyqtgraph2.setObjectName(<span class="string">"pyqtgraph2"</span>)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.menubar = QtWidgets.QMenuBar(MainWindow)</span><br><span class="line">        self.menubar.setGeometry(QtCore.QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">22</span>))</span><br><span class="line">        self.menubar.setObjectName(<span class="string">"menubar"</span>)</span><br><span class="line">        MainWindow.setMenuBar(self.menubar)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">"statusbar"</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, MainWindow)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">"MainWindow"</span>, <span class="string">"MainWindow"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyqtgraph <span class="keyword">import</span> GraphicsLayoutWidget</span><br></pre></td></tr></table></figure><h3 id="项目实战：天气信息查询"><a href="#项目实战：天气信息查询" class="headerlink" title="项目实战：天气信息查询"></a>项目实战：天气信息查询</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/02/01/PyQt5-Python-实战课程（九）/CallWeatherWin.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,requests</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> WeatherWin <span class="keyword">import</span> Ui_Form</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MainWindow, self).__init__(parent)</span><br><span class="line">        self.ui = Ui_Form()</span><br><span class="line">        self.ui.setupUi(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queryWeather</span><span class="params">(self)</span>:</span></span><br><span class="line">        cityName = self.ui.weatherComboBox.currentText()</span><br><span class="line">        cityCode = self.transCityName(cityName)</span><br><span class="line"></span><br><span class="line">        rep = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/'</span> + cityCode + <span class="string">'.html'</span>)</span><br><span class="line">        rep.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        print(rep.json())</span><br><span class="line"></span><br><span class="line">        msg1 = <span class="string">'城市: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'city'</span>] + <span class="string">'\n'</span></span><br><span class="line">        msg2 = <span class="string">'风向: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WD'</span>] + <span class="string">'\n'</span></span><br><span class="line">        msg3 = <span class="string">'温度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'temp'</span>] + <span class="string">' 度'</span> + <span class="string">'\n'</span></span><br><span class="line">        msg4 = <span class="string">'风力: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WS'</span>] + <span class="string">'\n'</span></span><br><span class="line">        msg5 = <span class="string">'湿度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'SD'</span>] + <span class="string">'\n'</span></span><br><span class="line">        result = msg1 + msg2 + msg3 + msg4 + msg5</span><br><span class="line">        self.ui.resultText.setText(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transCityName</span><span class="params">(self, cityName)</span>:</span></span><br><span class="line">        cityCode = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> cityName == <span class="string">'北京'</span>:</span><br><span class="line">            cityCode = <span class="string">'101010100'</span></span><br><span class="line">        <span class="keyword">elif</span> cityName == <span class="string">'天津'</span>:</span><br><span class="line">            cityCode = <span class="string">'101030100'</span></span><br><span class="line">        <span class="keyword">elif</span> cityName == <span class="string">'上海'</span>:</span><br><span class="line">            cityCode = <span class="string">'101020100'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cityCode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearResult</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'* clearResult  '</span>)</span><br><span class="line">        self.ui.resultText.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = MainWindow()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>WeatherWin.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'WeatherWin.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.9.2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Form</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Form)</span>:</span></span><br><span class="line">        Form.setObjectName(<span class="string">"Form"</span>)</span><br><span class="line">        Form.resize(<span class="number">450</span>, <span class="number">347</span>)</span><br><span class="line">        self.groupBox = QtWidgets.QGroupBox(Form)</span><br><span class="line">        self.groupBox.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">431</span>, <span class="number">251</span>))</span><br><span class="line">        self.groupBox.setObjectName(<span class="string">"groupBox"</span>)</span><br><span class="line">        self.weatherComboBox = QtWidgets.QComboBox(self.groupBox)</span><br><span class="line">        self.weatherComboBox.setGeometry(QtCore.QRect(<span class="number">60</span>, <span class="number">30</span>, <span class="number">131</span>, <span class="number">21</span>))</span><br><span class="line">        self.weatherComboBox.setObjectName(<span class="string">"weatherComboBox"</span>)</span><br><span class="line">        self.weatherComboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.weatherComboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.weatherComboBox.addItem(<span class="string">""</span>)</span><br><span class="line">        self.resultText = QtWidgets.QTextEdit(self.groupBox)</span><br><span class="line">        self.resultText.setGeometry(QtCore.QRect(<span class="number">10</span>, <span class="number">60</span>, <span class="number">411</span>, <span class="number">181</span>))</span><br><span class="line">        self.resultText.setObjectName(<span class="string">"resultText"</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.groupBox)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">30</span>, <span class="number">72</span>, <span class="number">21</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        self.queryBtn = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.queryBtn.setGeometry(QtCore.QRect(<span class="number">90</span>, <span class="number">300</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        self.queryBtn.setObjectName(<span class="string">"queryBtn"</span>)</span><br><span class="line">        self.clearBtn = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.clearBtn.setGeometry(QtCore.QRect(<span class="number">230</span>, <span class="number">300</span>, <span class="number">93</span>, <span class="number">28</span>))</span><br><span class="line">        self.clearBtn.setObjectName(<span class="string">"clearBtn"</span>)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        self.clearBtn.clicked.connect(Form.clearResult)</span><br><span class="line">        self.queryBtn.clicked.connect(Form.queryWeather)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Form)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">"Form"</span>, <span class="string">"Form"</span>))</span><br><span class="line">        self.groupBox.setTitle(_translate(<span class="string">"Form"</span>, <span class="string">"查询城市天气"</span>))</span><br><span class="line">        self.weatherComboBox.setItemText(<span class="number">0</span>, _translate(<span class="string">"Form"</span>, <span class="string">"北京"</span>))</span><br><span class="line">        self.weatherComboBox.setItemText(<span class="number">1</span>, _translate(<span class="string">"Form"</span>, <span class="string">"天津"</span>))</span><br><span class="line">        self.weatherComboBox.setItemText(<span class="number">2</span>, _translate(<span class="string">"Form"</span>, <span class="string">"上海"</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">"Form"</span>, <span class="string">"城市"</span>))</span><br><span class="line">        self.queryBtn.setText(_translate(<span class="string">"Form"</span>, <span class="string">"查询"</span>))</span><br><span class="line">        self.clearBtn.setText(_translate(<span class="string">"Form"</span>, <span class="string">"清空"</span>))</span><br></pre></td></tr></table></figure><p>Test_demo 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">rep = requests.get(<span class="string">'http://www.weather.com.cn/data/sk/101010100.html'</span>)</span><br><span class="line">rep.encoding = <span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'返回结果: %s'</span> % rep.json() )</span><br><span class="line">print(<span class="string">'城市: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'city'</span>] )</span><br><span class="line">print(<span class="string">'风向: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WD'</span>] )</span><br><span class="line">print(<span class="string">'温度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'temp'</span>] + <span class="string">" 度"</span>)</span><br><span class="line">print(<span class="string">'风力: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'WS'</span>] )</span><br><span class="line">print(<span class="string">'湿度: %s'</span> % rep.json()[<span class="string">'weatherinfo'</span>][<span class="string">'SD'</span>] )</span><br></pre></td></tr></table></figure><p>Out: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">返回结果: &#123;'weatherinfo': &#123;'city': '北京', 'cityid': '101010100', 'temp': '27.9', 'WD': '南风', 'WS': '小于3级', 'SD': '28%', 'AP': '1002hPa', 'njd': '暂无实况', 'WSE': '&lt;3', 'time': '17:55', 'sm': '2.1', 'isRadar': '1', 'Radar': 'JC_RADAR_AZ9010_JB'&#125;&#125;</span><br><span class="line">城市: 北京</span><br><span class="line">风向: 南风</span><br><span class="line">温度: 27.9 度</span><br><span class="line">风力: 小于3级</span><br><span class="line">湿度: 28%</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（八）</title>
    <link href="http://yoursite.com/2019/01/31/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/31/PyQt5-Python-实战课程（八）/</id>
    <published>2019-01-30T16:18:58.000Z</published>
    <updated>2019-02-18T15:15:24.309Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="PyQt5与Web交互"><a href="#PyQt5与Web交互" class="headerlink" title="PyQt5与Web交互"></a>PyQt5与Web交互</h2><h3 id="用Web浏览器控件（QWebEngineView）显示网页"><a href="#用Web浏览器控件（QWebEngineView）显示网页" class="headerlink" title="用Web浏览器控件（QWebEngineView）显示网页"></a>用Web浏览器控件（QWebEngineView）显示网页</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/QWebEngineView.png" width="500"><br></center><ul><li><p>要点说明</p><ol><li>PyQt5和Web的交互技术</li><li>同时使用Python和Web开发程序，混合开发</li><li>Python+JavaScript+HTML5+CSS</li><li>QWebEngineView</li></ol></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebEngineView</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self )</span>:</span></span><br><span class="line">        super(WebEngineView, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'打开外部网页例子'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">5</span>, <span class="number">30</span>, <span class="number">1355</span>, <span class="number">730</span>)</span><br><span class="line">        self.browser = QWebEngineView()</span><br><span class="line">        self.browser.load(QUrl(<span class="string">'https://www.jd.com'</span>))</span><br><span class="line">        self.setCentralWidget(self.browser)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">win = WebEngineView()</span><br><span class="line">win.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="装载本地Web页面"><a href="#装载本地Web页面" class="headerlink" title="装载本地Web页面"></a>装载本地Web页面</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/LocalHTML.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebEngineView</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self )</span>:</span></span><br><span class="line">        super(WebEngineView, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'装载本地Web页面'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">5</span>, <span class="number">30</span>, <span class="number">1355</span>, <span class="number">730</span>)</span><br><span class="line">        url = os.getcwd() + <span class="string">'/test.html'</span></span><br><span class="line">        self.browser = QWebEngineView()</span><br><span class="line">        self.browser.load(QUrl.fromLocalFile(url))</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.browser)</span><br><span class="line">        </span><br><span class="line">        print(os.getcwd())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">win = WebEngineView()</span><br><span class="line">win.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>test.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello PyQt5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello PyQt5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello PyQt5<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Hello PyQt5<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显示嵌入Web页面"><a href="#显示嵌入Web页面" class="headerlink" title="显示嵌入Web页面"></a>显示嵌入Web页面</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/InnerHTML.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerHTML</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(InnerHTML, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'显示嵌入Web页面'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">5</span>, <span class="number">30</span>, <span class="number">1355</span>, <span class="number">730</span>)</span><br><span class="line"></span><br><span class="line">        self.browser = QWebEngineView()</span><br><span class="line">        self.browser.setHtml(<span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang="en"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;测试页面&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Hello PyQt5&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Hello PyQt5&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Hello PyQt5&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Hello PyQt5&lt;/h4&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">        '''</span>)</span><br><span class="line">        self.setCentralWidget(self.browser)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = InnerHTML()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="PyQt5调用JavaScript代码，并返回值"><a href="#PyQt5调用JavaScript代码，并返回值" class="headerlink" title="PyQt5调用JavaScript代码，并返回值"></a>PyQt5调用JavaScript代码，并返回值</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/PyQtCallJS.png" width="500"><br></center><ul><li><p>要点说明</p><ol><li>PyQt5和JavaScript交互</li><li>什么叫交互</li><li>PyQt5 <-> JavaScript</-></li></ol></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyQtCallJS</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PyQtCallJS, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'PyQt5调用JavaScript'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">5</span>, <span class="number">30</span>, <span class="number">1355</span>, <span class="number">730</span>)</span><br><span class="line">        self.layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        self.browser = QWebEngineView()</span><br><span class="line"></span><br><span class="line">        url = os.getcwd() + <span class="string">'/tt.html'</span></span><br><span class="line">        self.browser.load(QUrl.fromLocalFile(url))</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.browser)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">'设置全名'</span>)</span><br><span class="line">        button.clicked.connect(self.fullname)</span><br><span class="line">        self.layout.addWidget(button)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">js_callback</span><span class="params">(self,result)</span>:</span></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fullname</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value = <span class="string">'hello world'</span></span><br><span class="line">        self.browser.page().runJavaScript(<span class="string">'fullname("'</span> + self.value + <span class="string">'");'</span>,self.js_callback)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = PyQtCallJS()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>tt.html 👇</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fullname</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"&lt;"</span> + value +<span class="string">"&gt;"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> firstname = <span class="built_in">document</span>.getElementById(<span class="string">'firstname'</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> lastname = <span class="built_in">document</span>.getElementById(<span class="string">'lastname'</span>).value;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> fullname = firstname + <span class="string">' '</span> + lastname;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'fullname'</span>).value = fullname;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'submit-btn'</span>).style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> fullname;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>First Name：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">id</span>=<span class="string">"firstname"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Last Name：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastname"</span> <span class="attr">id</span>=<span class="string">"lastname"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Full Name：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fullname"</span> <span class="attr">id</span>=<span class="string">"fullname"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"submit-btn"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript调用Python-API计算阶乘"><a href="#JavaScript调用Python-API计算阶乘" class="headerlink" title="JavaScript调用Python API计算阶乘"></a>JavaScript调用Python API计算阶乘</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/PyFactorial.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebEngineWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWebChannel <span class="keyword">import</span>  QWebChannel</span><br><span class="line"><span class="keyword">from</span> factorial <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line">channel = QWebChannel()</span><br><span class="line">factorial = Factorial()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyFactorial</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PyFactorial, self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'Python计算阶乘'</span>)</span><br><span class="line">        self.resize(<span class="number">600</span>,<span class="number">300</span>)</span><br><span class="line">        layout=QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.browser = QWebEngineView()</span><br><span class="line">        url = os.getcwd() + <span class="string">'/f.html'</span></span><br><span class="line">        self.browser.load(QUrl.fromLocalFile(url))</span><br><span class="line">        channel.registerObject(<span class="string">"obj"</span>,factorial)</span><br><span class="line">        self.browser.page().setWebChannel(channel)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.browser)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = PyFactorial()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>f.html  👇<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>A Demo Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./qwebchannel.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'计算结果:'</span> + result)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> QWebChannel( qt.webChannelTransport, <span class="function"><span class="keyword">function</span>(<span class="params">channel</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.obj = channel.objects.obj;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">onFactorial</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ( <span class="built_in">window</span>.obj) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">document</span>.getElementById(<span class="string">'n'</span>).value);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.obj.factorial(n,callback)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> &gt;</span>请输入N：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">id</span>=<span class="string">"n"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"计算阶乘"</span> <span class="attr">onclick</span>=<span class="string">"onFactorial()"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>factorial.py 👇</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factorial</span><span class="params">(QObject)</span>:</span></span><br><span class="line"><span class="meta">    @pyqtSlot(int, result=int)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.factorial(n - <span class="number">1</span>) * n</span><br></pre></td></tr></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/AbsoluteLayout.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsoluteLayout</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(AbsoluteLayout,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"绝对布局"</span>)</span><br><span class="line"></span><br><span class="line">        self.label1 = QLabel(<span class="string">'欢迎'</span>,self)</span><br><span class="line">        self.label1.move(<span class="number">15</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.label2 = QLabel(<span class="string">'学习'</span>,self)</span><br><span class="line">        self.label2.move(<span class="number">35</span>,<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">        self.label3 = QLabel(<span class="string">'PyQt5'</span>,self)</span><br><span class="line">        self.label3.move(<span class="number">55</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = AbsoluteLayout()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="水平盒布局（QHBoxLayout）"><a href="#水平盒布局（QHBoxLayout）" class="headerlink" title="水平盒布局（QHBoxLayout）"></a>水平盒布局（QHBoxLayout）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/HBoxLayout.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HBoxLayout</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(HBoxLayout,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"水平盒布局"</span>)</span><br><span class="line"></span><br><span class="line">        hlayout = QHBoxLayout()</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮1'</span>))</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮2'</span>))</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮3'</span>))</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮4'</span>))</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮5'</span>))</span><br><span class="line">        hlayout.setSpacing(<span class="number">40</span>)</span><br><span class="line">        self.setLayout(hlayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = HBoxLayout()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="设置控件的对齐方式"><a href="#设置控件的对齐方式" class="headerlink" title="设置控件的对齐方式"></a>设置控件的对齐方式</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/HBoxLayoutAlign.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HBoxLayoutAlign</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(HBoxLayoutAlign,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"水平盒布局"</span>)</span><br><span class="line"></span><br><span class="line">        hlayout = QHBoxLayout()</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮1'</span>),<span class="number">2</span>,Qt.AlignLeft | Qt.AlignTop)</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮2'</span>),<span class="number">4</span>,Qt.AlignLeft | Qt.AlignTop)</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮3'</span>),<span class="number">1</span>,Qt.AlignLeft | Qt.AlignTop)</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮4'</span>),<span class="number">1</span>,Qt.AlignLeft | Qt.AlignBottom)</span><br><span class="line">        hlayout.addWidget(QPushButton(<span class="string">'按钮5'</span>),<span class="number">1</span>,Qt.AlignLeft | Qt.AlignBottom)</span><br><span class="line">        hlayout.setSpacing(<span class="number">40</span>)</span><br><span class="line">        self.setLayout(hlayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = HBoxLayoutAlign()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="垂直盒布局"><a href="#垂直盒布局" class="headerlink" title="垂直盒布局"></a>垂直盒布局</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/VBoxLayout.png" width="500"><br></center><ul><li><p>要点说明：<code>layout = QVBoxLayout()</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VBoxLayout</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(VBoxLayout,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"垂直盒布局"</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(QPushButton(<span class="string">'按钮1'</span>))</span><br><span class="line">        layout.addWidget(QPushButton(<span class="string">'按钮2'</span>))</span><br><span class="line">        layout.addWidget(QPushButton(<span class="string">'按钮3'</span>))</span><br><span class="line">        layout.addWidget(QPushButton(<span class="string">'按钮4'</span>))</span><br><span class="line">        layout.addWidget(QPushButton(<span class="string">'按钮5'</span>))</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = VBoxLayout()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="设置布局的伸缩量"><a href="#设置布局的伸缩量" class="headerlink" title="设置布局的伸缩量"></a>设置布局的伸缩量</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/Stretch.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码<br>Stretch.py 👇</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stretch</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Stretch,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"设置伸缩量"</span>)</span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn2 = QPushButton(self)</span><br><span class="line">        btn3 = QPushButton(self)</span><br><span class="line">        btn1.setText(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2.setText(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3.setText(<span class="string">"按钮3"</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        layout.addStretch(<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(btn1)</span><br><span class="line"></span><br><span class="line">        layout.addStretch(<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(btn2)</span><br><span class="line">        layout.addStretch(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(btn3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Stretch()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/Stretch1.png" width="500"><br></center><br>- 完整代码   Stretch1.py 👇👇 👇<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stretch</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Stretch,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"设置伸缩量"</span>)</span><br><span class="line">        self.resize(<span class="number">800</span>,<span class="number">100</span>)</span><br><span class="line">        btn1 = QPushButton(self)</span><br><span class="line">        btn2 = QPushButton(self)</span><br><span class="line">        btn3 = QPushButton(self)</span><br><span class="line">        btn4 = QPushButton(self)</span><br><span class="line">        btn5 = QPushButton(self)</span><br><span class="line">        btn1.setText(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2.setText(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3.setText(<span class="string">"按钮3"</span>)</span><br><span class="line">        btn4.setText(<span class="string">"按钮4"</span>)</span><br><span class="line">        btn5.setText(<span class="string">"按钮5"</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        layout.addStretch(<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(btn1)</span><br><span class="line">        layout.addWidget(btn2)</span><br><span class="line">        layout.addWidget(btn3)</span><br><span class="line">        layout.addWidget(btn4)</span><br><span class="line">        layout.addWidget(btn5)</span><br><span class="line"></span><br><span class="line">        btnOK = QPushButton(self)</span><br><span class="line">        btnOK.setText(<span class="string">"确定"</span>)</span><br><span class="line">        btnCancel = QPushButton(self)</span><br><span class="line">        btnCancel.setText(<span class="string">"取消"</span>)</span><br><span class="line">        layout.addStretch(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(btnOK)</span><br><span class="line">        layout.addWidget(btnCancel)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Stretch()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 让按钮永远在窗口的右下角<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/RightBottomButton.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RightBottomButton</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(RightBottomButton,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"让按钮永远在右下角"</span>)</span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        okButton = QPushButton(<span class="string">"确定"</span>)</span><br><span class="line">        cancelButton = QPushButton(<span class="string">"取消"</span>)</span><br><span class="line"></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addStretch(<span class="number">1</span>)</span><br><span class="line">        hbox.addWidget(okButton)</span><br><span class="line">        hbox.addWidget(cancelButton)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        btn1 = QPushButton(<span class="string">"按钮1"</span>)</span><br><span class="line">        btn2 = QPushButton(<span class="string">"按钮2"</span>)</span><br><span class="line">        btn3 = QPushButton(<span class="string">"按钮3"</span>)</span><br><span class="line"></span><br><span class="line">        vbox.addStretch(<span class="number">0</span>)</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line">        vbox.addWidget(btn2)</span><br><span class="line">        vbox.addWidget(btn3)</span><br><span class="line">        vbox.addStretch(<span class="number">1</span>)</span><br><span class="line">        vbox.addLayout(hbox)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = RightBottomButton()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="栅格布局：用循环方式实现计算器UI"><a href="#栅格布局：用循环方式实现计算器UI" class="headerlink" title="栅格布局：用循环方式实现计算器UI"></a>栅格布局：用循环方式实现计算器UI</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/Calc.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calc</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Calc,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"栅格布局"</span>)</span><br><span class="line"></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">        names = [<span class="string">'Cls'</span>,<span class="string">'Back'</span>,<span class="string">''</span>,<span class="string">'Close'</span>,</span><br><span class="line">                 <span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'/'</span>,</span><br><span class="line">                 <span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'*'</span>,</span><br><span class="line">                 <span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'-'</span>,</span><br><span class="line">                 <span class="string">'0'</span>,<span class="string">'.'</span>,<span class="string">'='</span>,<span class="string">'+'</span>]</span><br><span class="line"></span><br><span class="line">        positions = [(i,j) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">        <span class="comment"># print(positions)</span></span><br><span class="line">        <span class="comment"># [ (0, 0), (0, 1), (0, 2), (0, 3),</span></span><br><span class="line">        <span class="comment">#   (1, 0), (1, 1), (1, 2), (1, 3),</span></span><br><span class="line">        <span class="comment">#   (2, 0), (2, 1), (2, 2), (2, 3),</span></span><br><span class="line">        <span class="comment">#   (3, 0), (3, 1), (3, 2), (3, 3),</span></span><br><span class="line">        <span class="comment">#   (4, 0), (4, 1), (4, 2), (4, 3)]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> position,name <span class="keyword">in</span> zip(positions,names):</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            button = QPushButton(name)</span><br><span class="line">            <span class="comment"># print(position)</span></span><br><span class="line">            grid.addWidget(button,*position)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Calc()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="栅格布局：进行表单UI设计"><a href="#栅格布局：进行表单UI设计" class="headerlink" title="栅格布局：进行表单UI设计"></a>栅格布局：进行表单UI设计</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/GridForm.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridForm</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(GridForm,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"栅格布局：表单设计"</span>)</span><br><span class="line"></span><br><span class="line">        titleLabel = QLabel(<span class="string">'标题'</span>)</span><br><span class="line">        authorLabel = QLabel(<span class="string">'作者'</span>)</span><br><span class="line">        contentLabel = QLabel(<span class="string">'内容'</span>)</span><br><span class="line"></span><br><span class="line">        titleEdit = QLineEdit()</span><br><span class="line">        authorEdit = QLineEdit()</span><br><span class="line">        contentEdit = QTextEdit()</span><br><span class="line"></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        grid.addWidget(titleLabel,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        grid.addWidget(titleEdit,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        grid.addWidget(authorLabel,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">        grid.addWidget(authorEdit,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        grid.addWidget(contentLabel,<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">        grid.addWidget(contentEdit,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(grid)</span><br><span class="line">        self.resize(<span class="number">350</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = GridForm()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="表单布局"><a href="#表单布局" class="headerlink" title="表单布局"></a>表单布局</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/FormLayout.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormForm</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(FormForm,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"表单布局"</span>)</span><br><span class="line">        self.resize(<span class="number">350</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        titleLabel = QLabel(<span class="string">'标题'</span>)</span><br><span class="line">        authorLabel = QLabel(<span class="string">'作者'</span>)</span><br><span class="line">        contentLabel = QLabel(<span class="string">'内容'</span>)</span><br><span class="line"></span><br><span class="line">        titleEdit = QLineEdit()</span><br><span class="line">        authorEdit = QLineEdit()</span><br><span class="line">        contentEdit = QTextEdit()</span><br><span class="line"></span><br><span class="line">        formLayout.addRow(titleLabel,titleEdit)</span><br><span class="line">        formLayout.addRow(authorLabel,authorEdit)</span><br><span class="line">        formLayout.addRow(contentLabel,contentEdit)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = FormForm()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="拖动控件之间的边界（QSplitter）"><a href="#拖动控件之间的边界（QSplitter）" class="headerlink" title="拖动控件之间的边界（QSplitter）"></a>拖动控件之间的边界（QSplitter）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/Splitter.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splitter</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Splitter, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        hbox = QHBoxLayout(self)</span><br><span class="line">        self.setWindowTitle(<span class="string">'QSplitter 例子'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        topleft = QFrame()</span><br><span class="line">        topleft.setFrameShape(QFrame.StyledPanel)</span><br><span class="line"></span><br><span class="line">        bottom = QFrame()</span><br><span class="line">        bottom.setFrameShape(QFrame.StyledPanel)</span><br><span class="line"></span><br><span class="line">        splitter1 = QSplitter(Qt.Horizontal)</span><br><span class="line">        textedit = QTextEdit()</span><br><span class="line">        splitter1.addWidget(topleft)</span><br><span class="line">        splitter1.addWidget(textedit)</span><br><span class="line">        splitter1.setSizes([<span class="number">200</span>,<span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">        splitter2 = QSplitter(Qt.Vertical)</span><br><span class="line">        splitter2.addWidget(splitter1)</span><br><span class="line">        splitter2.addWidget(bottom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        hbox.addWidget(splitter2)</span><br><span class="line">        self.setLayout(hbox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Splitter()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="信号（Signal）与槽（Slot）"><a href="#信号（Signal）与槽（Slot）" class="headerlink" title="信号（Signal）与槽（Slot）"></a>信号（Signal）与槽（Slot）</h2><h3 id="信号与槽基础"><a href="#信号与槽基础" class="headerlink" title="信号与槽基础"></a>信号与槽基础</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/SignalSlotDemo.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SigalSlotDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(SigalSlotDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'信号（Signal）与槽（Slot）'</span>)</span><br><span class="line">        self.btn = QPushButton(<span class="string">'我的按钮'</span>,self)</span><br><span class="line">        self.btn.clicked.connect(self.onClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.btn.setText(<span class="string">"信号已经发出"</span>)</span><br><span class="line">        self.btn.setStyleSheet(<span class="string">"QPushButton(max-width:100px;min-width:100px"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    gui = SigalSlotDemo()</span><br><span class="line">    gui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="自定义信号实现对象之间的通信"><a href="#自定义信号实现对象之间的通信" class="headerlink" title="自定义信号实现对象之间的通信"></a>自定义信号实现对象之间的通信</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/CustomSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTypeSignal</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个信号</span></span><br><span class="line">    sendmsg = pyqtSignal(object)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送3个参数的信号</span></span><br><span class="line">    sendmsg1 = pyqtSignal(str,int,int)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sendmsg.emit(<span class="string">'Hello PyQt5'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sendmsg1.emit(<span class="string">"hello"</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySlot</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        print(<span class="string">"信息："</span> + msg) <span class="comment"># 信息：Hello PyQt5</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get1</span><span class="params">(self,msg,a,b)</span>:</span></span><br><span class="line">        print(msg) <span class="comment"># hello</span></span><br><span class="line">        print(a+b) <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    send = MyTypeSignal()</span><br><span class="line">    slot = MySlot()</span><br><span class="line"></span><br><span class="line">    send.sendmsg.connect(slot.get)</span><br><span class="line">    send.sendmsg1.connect(slot.get1)</span><br><span class="line"></span><br><span class="line">    send.run() <span class="comment"># 信息：Hello PyQt5</span></span><br><span class="line">    send.run1() <span class="comment"># hello # 7</span></span><br><span class="line"></span><br><span class="line">    send.sendmsg.disconnect(slot.get)</span><br><span class="line">    send.run()  <span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><h3 id="可以传递多个参数的信号"><a href="#可以传递多个参数的信号" class="headerlink" title="可以传递多个参数的信号"></a>可以传递多个参数的信号</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/CustomSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTypeSignal</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个信号</span></span><br><span class="line">    sendmsg = pyqtSignal(object)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送3个参数的信号</span></span><br><span class="line">    sendmsg1 = pyqtSignal(str,int,int)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sendmsg.emit(<span class="string">'Hello PyQt5'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sendmsg1.emit(<span class="string">"hello"</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySlot</span><span class="params">(QObject)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,msg)</span>:</span></span><br><span class="line">        print(<span class="string">"信息："</span> + msg) <span class="comment"># 信息：Hello PyQt5</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get1</span><span class="params">(self,msg,a,b)</span>:</span></span><br><span class="line">        print(msg) <span class="comment"># hello</span></span><br><span class="line">        print(a+b) <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    send = MyTypeSignal()</span><br><span class="line">    slot = MySlot()</span><br><span class="line"></span><br><span class="line">    send.sendmsg.connect(slot.get)</span><br><span class="line">    send.sendmsg1.connect(slot.get1)</span><br><span class="line"></span><br><span class="line">    send.run() <span class="comment"># 信息：Hello PyQt5</span></span><br><span class="line">    send.run1() <span class="comment"># hello # 7</span></span><br><span class="line"></span><br><span class="line">    send.sendmsg.disconnect(slot.get)</span><br><span class="line">    send.run()  <span class="comment"># 无输出</span></span><br></pre></td></tr></table></figure><h3 id="为类添加多个信号（重载形式的信号）"><a href="#为类添加多个信号（重载形式的信号）" class="headerlink" title="为类添加多个信号（重载形式的信号）"></a>为类添加多个信号（重载形式的信号）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/MultiSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiSignal</span><span class="params">(QObject)</span>:</span></span><br><span class="line"></span><br><span class="line">    signal1 = pyqtSignal()</span><br><span class="line">    signal2 = pyqtSignal(int)</span><br><span class="line">    signal3 = pyqtSignal(int, str)</span><br><span class="line">    signal4 = pyqtSignal(list)</span><br><span class="line">    signal5 = pyqtSignal(dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明一个重载版本的信号，也就是槽函数的参数可以是int和str类型，也可以只有一个str类型的参数</span></span><br><span class="line">    signal6 = pyqtSignal([int,str],[str])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MultiSignal,self).__init__()</span><br><span class="line">        self.signal1.connect(self.signalCall1)</span><br><span class="line">        self.signal2.connect(self.signalCall2)</span><br><span class="line">        self.signal3.connect(self.signalCall3)</span><br><span class="line">        self.signal4.connect(self.signalCall4)</span><br><span class="line">        self.signal5.connect(self.signalCall5)</span><br><span class="line">        self.signal6[str].connect(self.signalCall6Overload)</span><br><span class="line">        self.signal6[int,str].connect(self.signalCall6)</span><br><span class="line"></span><br><span class="line">        self.signal1.emit()</span><br><span class="line">        self.signal2.emit(<span class="number">10</span>)</span><br><span class="line">        self.signal3.emit(<span class="number">1</span>,<span class="string">"hello world"</span>)</span><br><span class="line">        self.signal4.emit([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">        self.signal5.emit(&#123;<span class="string">"name"</span>:<span class="string">"Bill"</span>,<span class="string">"age"</span>:<span class="number">30</span>&#125;)</span><br><span class="line">        self.signal6[str].emit(<span class="string">"test"</span>)</span><br><span class="line">        self.signal6[int,str].emit(<span class="number">100</span>,<span class="string">"mytest"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"signal1 emit"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall2</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        print(<span class="string">"signal2 emit,value:"</span>, val)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall3</span><span class="params">(self,val,text)</span>:</span></span><br><span class="line">        print(<span class="string">"signal3 emit,value:"</span>, val,text)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall4</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        print(<span class="string">"signal4 emit,value:"</span>, val)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall5</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        print(<span class="string">"signal5 emit,value:"</span>, val)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall6</span><span class="params">(self,val,text)</span>:</span></span><br><span class="line">        print(<span class="string">"signal6 emit,value:"</span>, val,text)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">signalCall6Overload</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        print(<span class="string">"signal6 overload emit,value:"</span>, val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multiSignal = MultiSignal()</span><br></pre></td></tr></table></figure><h3 id="信号和槽的N对N连接与断开连接"><a href="#信号和槽的N对N连接与断开连接" class="headerlink" title="信号和槽的N对N连接与断开连接"></a>信号和槽的N对N连接与断开连接</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/NNSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NNSignal</span><span class="params">(QObject)</span>:</span></span><br><span class="line"></span><br><span class="line">    signal1 = pyqtSignal()</span><br><span class="line">    signal2 = pyqtSignal(int)</span><br><span class="line">    signal3 = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(NNSignal,self).__init__()</span><br><span class="line"></span><br><span class="line">        self.signal1.connect(self.call1)</span><br><span class="line">        self.signal1.connect(self.call11)</span><br><span class="line">        self.signal3.connect(self.call1)</span><br><span class="line"></span><br><span class="line">        self.signal1.emit()</span><br><span class="line">        self.signal3.emit()</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        self.signal2.connect(self.signal1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.signal2.emit(2)   # 触发了信号1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.signal1.disconnect(self.call1)</span></span><br><span class="line"><span class="string">        self.signal1.disconnect(self.call11)</span></span><br><span class="line"><span class="string">        self.signal2.disconnect(self.signal1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.signal1.connect(self.call1)</span></span><br><span class="line"><span class="string">        self.signal2.connect(self.call2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.signal1.emit()</span></span><br><span class="line"><span class="string">        self.signal2.emit(100)</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"call1 emit"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call11</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"call11 emit"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call2</span><span class="params">(self,val)</span>:</span></span><br><span class="line">        print(<span class="string">"call2 emit:"</span>,val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    nnSignal = NNSignal()</span><br></pre></td></tr></table></figure><h3 id="为窗口添加新号"><a href="#为窗口添加新号" class="headerlink" title="为窗口添加新号"></a>为窗口添加新号</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/WinSignal.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WinSignal</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    button_clicked_signal = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"为窗口类添加信号"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        btn = QPushButton(<span class="string">'关闭窗口'</span>,self)</span><br><span class="line">        btn.clicked.connect(self.btn_clicked)</span><br><span class="line">        self.button_clicked_signal.connect(self.btn_close)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.button_clicked_signal.emit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">btn_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = WinSignal()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="多线程更新UI数据"><a href="#多线程更新UI数据" class="headerlink" title="多线程更新UI数据"></a>多线程更新UI数据</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/ThreadUpdateUI.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread ,  pyqtSignal,  QDateTime</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,  QDialog,  QLineEdit</span><br><span class="line"><span class="keyword">import</span> time,sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BackendThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line"></span><br><span class="line">    update_date = pyqtSignal(str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = QDateTime.currentDateTime()</span><br><span class="line">            currentTime = data.toString(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">            self.update_date.emit(str(currentTime))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadUpdateUI</span><span class="params">(QDialog)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        QDialog.__init__(self)</span><br><span class="line">        self.setWindowTitle(<span class="string">'多线程更新UI数据'</span>)</span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line">        self.input = QLineEdit(self)</span><br><span class="line">        self.input.resize(<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.backend = BackendThread()</span><br><span class="line">        self.backend.update_date.connect(self.handleDisplay)</span><br><span class="line"></span><br><span class="line">        self.backend.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleDisplay</span><span class="params">(self,data)</span>:</span></span><br><span class="line">        self.input.setText(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = ThreadUpdateUI()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="信号与槽自动连接"><a href="#信号与槽自动连接" class="headerlink" title="信号与槽自动连接"></a>信号与槽自动连接</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/AutoSignalSlot.png" width="500"><br></center><ul><li><p>要点说明：<code>QtCore.QMetaObject.connectSlotsByName(self)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication ,QWidget ,QHBoxLayout , QPushButton</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoSignalSlot</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(AutoSignalSlot,self).__init__()</span><br><span class="line"></span><br><span class="line">        self.okButton = QPushButton(<span class="string">"ok"</span>,self)</span><br><span class="line">        self.okButton.setObjectName(<span class="string">"okButton"</span>)</span><br><span class="line"></span><br><span class="line">        self.cancelButton = QPushButton(<span class="string">"cancel"</span>,self)</span><br><span class="line">        self.cancelButton.setObjectName(<span class="string">"cancelButton"</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(self.okButton)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(self)</span><br><span class="line">        <span class="comment"># self.okButton.clicked.connect(self.on_okButton_clicked)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># AutoSignalSlot</span></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_okButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"点击了ok按钮"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_cancelButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"点击了cancel按钮"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = AutoSignalSlot()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用Lambda表达式为槽传递参数"><a href="#使用Lambda表达式为槽传递参数" class="headerlink" title="使用Lambda表达式为槽传递参数"></a>使用Lambda表达式为槽传递参数</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/LambdaSlotArg.png" width="500"><br></center><ul><li>要点说明<br>Lambda表达式：匿名函数，也就是没有名字的函数</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LambdaSlotArg</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"使用Lambda表达式为槽函数传递参数"</span>)</span><br><span class="line"></span><br><span class="line">        button1 = QPushButton(<span class="string">"按钮1"</span>)</span><br><span class="line">        button2 = QPushButton(<span class="string">"按钮2"</span>)</span><br><span class="line">        ok = <span class="number">100</span></span><br><span class="line">        button1.clicked.connect(<span class="keyword">lambda</span> :self.onButtonClick(<span class="number">10</span>,ok))</span><br><span class="line">        button2.clicked.connect(<span class="keyword">lambda</span> :self.onButtonClick(ok,<span class="number">-20</span>))</span><br><span class="line">        button1.clicked.connect(<span class="keyword">lambda</span> :QMessageBox.information(self,<span class="string">"结果"</span>,<span class="string">"单击了button1"</span>))</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(button1)</span><br><span class="line">        layout.addWidget(button2)</span><br><span class="line"></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line">        self.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self,m,n)</span>:</span></span><br><span class="line">        print(<span class="string">"m + n ="</span>,m + n )</span><br><span class="line">        QMessageBox.information(self,<span class="string">"结果"</span>,str(m+n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = LambdaSlotArg()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用Partial对象为槽传递参数"><a href="#使用Partial对象为槽传递参数" class="headerlink" title="使用Partial对象为槽传递参数"></a>使用Partial对象为槽传递参数</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/PartialSlotArg.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartialSlotArg</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"使用Partial表达式为槽函数传递参数"</span>)</span><br><span class="line"></span><br><span class="line">        button1 = QPushButton(<span class="string">"按钮1"</span>)</span><br><span class="line">        button2 = QPushButton(<span class="string">"按钮2"</span>)</span><br><span class="line">        x = <span class="number">20</span></span><br><span class="line">        y = <span class="number">-123</span></span><br><span class="line">        button1.clicked.connect(partial(self.onButtonClick,<span class="number">10</span>,<span class="number">20</span>))</span><br><span class="line">        button2.clicked.connect(partial(self.onButtonClick, x, y))</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(button1)</span><br><span class="line">        layout.addWidget(button2)</span><br><span class="line"></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line">        self.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self,m,n)</span>:</span></span><br><span class="line">        print(<span class="string">"m + n ="</span>,m + n )</span><br><span class="line">        QMessageBox.information(self,<span class="string">"结果"</span>,str(m+n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = PartialSlotArg()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="Override（覆盖）槽函数"><a href="#Override（覆盖）槽函数" class="headerlink" title="Override（覆盖）槽函数"></a>Override（覆盖）槽函数</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/OverrideSlot.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverrideSlot</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"Override（覆盖）槽函数"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keyPressEvent</span><span class="params">(self, e)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> e.key() == Qt.Key_Escape:</span><br><span class="line">            self.close()</span><br><span class="line">        <span class="keyword">elif</span> e.key() == Qt.Key_Alt:</span><br><span class="line">            self.setWindowTitle(<span class="string">"按下Alt键"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = OverrideSlot()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="多窗口交互（1）：不使用信号和槽"><a href="#多窗口交互（1）：不使用信号和槽" class="headerlink" title="多窗口交互（1）：不使用信号和槽"></a>多窗口交互（1）：不使用信号和槽</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/MultiWindow1.png" width="500"><br></center><ul><li><p>要点说明</p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> DateDialog <span class="keyword">import</span> DateDialog</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiWindow1</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">"多窗口交互（1）：不使用信号与槽"</span>)</span><br><span class="line"></span><br><span class="line">        self.lineEdit = QLineEdit(self)</span><br><span class="line">        self.button1 = QPushButton(<span class="string">'弹出对话框1'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.onButton1Click)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'弹出对话框2'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.onButton2Click)</span><br><span class="line"></span><br><span class="line">        gridLayout = QGridLayout()</span><br><span class="line">        gridLayout.addWidget(self.lineEdit)</span><br><span class="line">        gridLayout.addWidget(self.button1)</span><br><span class="line">        gridLayout.addWidget(self.button2)</span><br><span class="line"></span><br><span class="line">        self.setLayout(gridLayout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButton1Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = DateDialog(self)</span><br><span class="line">        result = dialog.exec()</span><br><span class="line">        date = dialog.dateTime()</span><br><span class="line">        self.lineEdit.setText(date.date().toString())</span><br><span class="line">        dialog.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButton2Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        date,time,result = DateDialog.getDateTime()</span><br><span class="line">        self.lineEdit.setText(date.toString())</span><br><span class="line">        <span class="keyword">if</span> result == QDialog.Accepted:</span><br><span class="line">            print(<span class="string">'点击确定按钮'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'单击取消按钮'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = MultiWindow1()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>DateDialog.py  👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateDialog</span><span class="params">(QDialog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,parent=None)</span>:</span></span><br><span class="line">        super(DateDialog,self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"DateDialog"</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout(self)</span><br><span class="line">        self.datetime = QDateTimeEdit(self)</span><br><span class="line">        self.datetime.setCalendarPopup(<span class="keyword">True</span>)</span><br><span class="line">        self.datetime.setDateTime(QDateTime.currentDateTime())</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.datetime)</span><br><span class="line"></span><br><span class="line">        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel,Qt.Horizontal,self)</span><br><span class="line">        buttons.accepted.connect(self.accept)</span><br><span class="line">        buttons.rejected.connect(self.reject)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(buttons)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dateTime</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.datetime.dateTime()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDateTime</span><span class="params">(parent = None)</span>:</span></span><br><span class="line">        dialog = DateDialog(parent)</span><br><span class="line">        result = dialog.exec()</span><br><span class="line">        date = dialog.dateTime()</span><br><span class="line">        <span class="keyword">return</span> (date.date(),date.time(),result == QDialog.Accepted)</span><br></pre></td></tr></table></figure></p><h3 id="多窗口交互（2）：使用信号和槽"><a href="#多窗口交互（2）：使用信号和槽" class="headerlink" title="多窗口交互（2）：使用信号和槽"></a>多窗口交互（2）：使用信号和槽</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/31/PyQt5-Python-实战课程（八）/MultiWindow2.png" width="500"><br></center><ul><li><p>要点说明<br>  如果一个窗口A与另一个窗口B交互，那么A尽量不要直接访问B窗口中的控件，<br>  应该访问B窗口中的信号，并指定与信号绑定的槽函数</p><p>  例：如果A直接访问B窗口的控件，一旦B窗口控件发生改变，那么A和B的代码都需要变化</p><p>  如果A访问的是B中的信号，那么B中的控件发生了改变，只需要修改B中的代码即可</p></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> NewDateDialog <span class="keyword">import</span> NewDateDialog</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiWindow2</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MultiWindow2, self).__init__(parent)</span><br><span class="line">        self.resize(<span class="number">400</span>, <span class="number">90</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'多窗口交互（2）：使用信号与槽'</span>)</span><br><span class="line"></span><br><span class="line">        self.open_btn = QPushButton(<span class="string">'获取时间'</span>)</span><br><span class="line">        self.lineEdit_inner = QLineEdit(self)</span><br><span class="line">        self.lineEdit_emit = QLineEdit(self)</span><br><span class="line">        self.open_btn.clicked.connect(self.openDialog)</span><br><span class="line"></span><br><span class="line">        self.lineEdit_inner.setText(<span class="string">'接收子窗口内置信号的时间'</span>)</span><br><span class="line">        self.lineEdit_emit.setText(<span class="string">'接收子窗口自定义信号的时间'</span>)</span><br><span class="line"></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.addWidget(self.lineEdit_inner)</span><br><span class="line">        grid.addWidget(self.lineEdit_emit)</span><br><span class="line">        grid.addWidget(self.open_btn)</span><br><span class="line">        self.setLayout(grid)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = NewDateDialog(self)</span><br><span class="line">        <span class="comment"># 连接子窗口的内置信号与主窗口的槽函数</span></span><br><span class="line">        dialog.datetime_inner.dateTimeChanged.connect(self.deal_inner_slot)</span><br><span class="line">        <span class="comment"># 连接子窗口的自定义信号与主窗口的槽函数</span></span><br><span class="line">        dialog.Signal_OneParameter.connect(self.deal_emit_slot)</span><br><span class="line">        dialog.show()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_inner_slot</span><span class="params">(self, date)</span>:</span></span><br><span class="line">        self.lineEdit_inner.setText(date.toString())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deal_emit_slot</span><span class="params">(self, dateStr)</span>:</span></span><br><span class="line">        self.lineEdit_emit.setText(dateStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = MultiWindow2()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>NewDateDialog.py 👇<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewDateDialog</span><span class="params">(QDialog)</span>:</span></span><br><span class="line">    Signal_OneParameter = pyqtSignal(str)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(NewDateDialog, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'子窗口：用来发射信号'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在布局中添加部件</span></span><br><span class="line">        layout = QVBoxLayout(self)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(self)</span><br><span class="line">        self.label.setText(<span class="string">'前者发射内置信号\n后者发射自定义信号'</span>)</span><br><span class="line"></span><br><span class="line">        self.datetime_inner = QDateTimeEdit(self)</span><br><span class="line">        self.datetime_inner.setCalendarPopup(<span class="keyword">True</span>)</span><br><span class="line">        self.datetime_inner.setDateTime(QDateTime.currentDateTime())</span><br><span class="line"></span><br><span class="line">        self.datetime_emit = QDateTimeEdit(self)</span><br><span class="line">        self.datetime_emit.setCalendarPopup(<span class="keyword">True</span>)</span><br><span class="line">        self.datetime_emit.setDateTime(QDateTime.currentDateTime())</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line">        layout.addWidget(self.datetime_inner)</span><br><span class="line">        layout.addWidget(self.datetime_emit)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用两个button(ok和cancel)分别连接accept()和reject()槽函数</span></span><br><span class="line">        buttons = QDialogButtonBox(</span><br><span class="line">            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,</span><br><span class="line">            Qt.Horizontal, self)</span><br><span class="line">        buttons.accepted.connect(self.accept)</span><br><span class="line">        buttons.rejected.connect(self.reject)</span><br><span class="line">        layout.addWidget(buttons)</span><br><span class="line"></span><br><span class="line">        self.datetime_emit.dateTimeChanged.connect(self.emit_signal)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emit_signal</span><span class="params">(self)</span>:</span></span><br><span class="line">        date_str = self.datetime_emit.dateTime().toString()</span><br><span class="line">        self.Signal_OneParameter.emit(date_str)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>许是一观</title>
    <link href="http://yoursite.com/2019/01/30/%E8%AE%B8%E6%98%AF%E4%B8%80%E8%A7%82/"/>
    <id>http://yoursite.com/2019/01/30/许是一观/</id>
    <published>2019-01-30T13:36:18.000Z</published>
    <updated>2019-02-27T07:21:56.547Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="毒鸡汤"><a href="#毒鸡汤" class="headerlink" title="毒鸡汤"></a>毒鸡汤</h2><blockquote><p>干了这碗，好好拼命</p></blockquote><ul><li>所有的不顺意，都是因为自己「菜」</li><li>钱真的可以为所欲为，「请努力挣钱」</li><li>弱，即是罪</li></ul><h2 id="快意人生"><a href="#快意人生" class="headerlink" title="快意人生"></a>快意人生</h2><blockquote><p>开心自得便好，与他人何干</p></blockquote><ul><li>愿你出走半生，归来仍是少年</li><li>以梦为马，诗酒趁年华</li></ul><h2 id="孤狼"><a href="#孤狼" class="headerlink" title="孤狼"></a>孤狼</h2><blockquote><p>一个人才知道什么是自由，对吧</p></blockquote><ul><li>像我这种人就不适合谈恋爱，因为爱会唤醒我的占有欲、控制欲、疑心，也会勾引出我的狭隘、自私、敏感。而这每一种情绪，都足以令我和我爱的人痛苦。</li><li>我不想取悦别人，也不奢望会有人来哄我开心。我可以独自承受一切，我不需要任何人来陪伴。</li><li>我怕我做的不好，让你觉得爱情不过如此</li></ul><h2 id="心伤"><a href="#心伤" class="headerlink" title="心伤"></a>心伤</h2><blockquote><p>有情终被无情伤，何苦自陷不自拔</p></blockquote><ul><li>纵我心如红铁，难融你三尺冰寒</li><li>原本只知道「白茶清欢无别事，我在等风也等你」，后来才知晓了后半句「苦酒折柳今相离，无风无月也无你」</li></ul><h2 id="心动"><a href="#心动" class="headerlink" title="心动"></a>心动</h2><blockquote><p>愿有情人终成眷属，可我不想掺和</p></blockquote><ul><li>最是初见惊鸿，开在尘世繁艳</li></ul><h2 id="表白"><a href="#表白" class="headerlink" title="表白"></a>表白</h2><blockquote><p>假装一下 </p></blockquote><ul><li>我还是很喜欢你，像日月轮回交替，不理朝夕</li></ul><h2 id="恋爱"><a href="#恋爱" class="headerlink" title="恋爱"></a>恋爱</h2><blockquote><p>无聊的恋爱观…</p></blockquote><ul><li>天使就是为了整个世界放弃了你，而魔鬼是为了你放弃了整个世界</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Macbook A1502 升级SSD</title>
    <link href="http://yoursite.com/2019/01/30/Macbook-A1502-%E5%8D%87%E7%BA%A7SSD/"/>
    <id>http://yoursite.com/2019/01/30/Macbook-A1502-升级SSD/</id>
    <published>2019-01-30T07:11:39.000Z</published>
    <updated>2019-02-17T15:39:19.462Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><p>参考:</p><ul><li><a href="https://www.crifan.com/macbook_pro_a1502_2015_early_13_inch_ssd_upgrade_volume/" target="_blank" rel="noopener">【整理】Macbook Pro A1502 2015 Early13寸硬盘升级扩容</a></li><li><a href="https://zhuanlan.zhihu.com/p/35806613" target="_blank" rel="noopener">2015款retina macbook pro自行升级SSD</a></li><li><a href="https://blog.csdn.net/hanhailong18/article/details/82345877" target="_blank" rel="noopener">Mac pro更换大内存固态硬盘实践教程</a></li></ul><h4 id="硬件选择"><a href="#硬件选择" class="headerlink" title="硬件选择"></a>硬件选择</h4><p>参考：<a href="https://zhuanlan.zhihu.com/p/35806613" target="_blank" rel="noopener">2015款retina macbook pro自行升级SSD</a></p><ol><li>SM951a  M.2接口  NVME规范  容量512G  价格1000左右<ul><li>马云家的“企业店铺”，购入的是五个字的企业卖家</li></ul></li><li>转接卡  <ul><li>某宝店铺”迪奥科技” 18元/卡</li></ul></li><li>合适的螺丝刀<ul><li>某宝店铺”迪奥科技” 1元/套 (一次性，可用)</li></ul></li></ol><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><h5 id="电脑备份"><a href="#电脑备份" class="headerlink" title="电脑备份"></a>电脑备份</h5><p>备份方式：Time Machine<br>注意事项：泪的教训… 一定在拆机前再次备份（!!!），以免备份资料有遗漏.否则，要重新换上旧的SSD，进行备份，保证数据的最新状态.</p><h5 id="U盘启动盘制作"><a href="#U盘启动盘制作" class="headerlink" title="U盘启动盘制作"></a>U盘启动盘制作</h5><p><a href="https://www.iplaysoft.com/macos-usb-install-drive.html" target="_blank" rel="noopener">制作 macOS Mojave U盘USB启动安装盘方法教程 (全新安装 Mac 系统)</a> </p><ol><li>在 App Store 下载 Mojave 安装器.<a href="https://support.apple.com/zh-cn/HT201475" target="_blank" rel="noopener">如何升级到macOS Mojave - Apple 支持</a></li><li><p>插入一个不小于8G的U盘，“应用程序 → 实用工具 → 磁盘工具 → Erase”:</p><ol><li>将 U盘命名为「MOJAVE」/ 「Mojave」名称</li><li>「Mac OS X 扩展（日志式）」格式</li><li>「GUID 分区图」方案</li></ol></li><li><p>打开terminal，输入以下命令：</p> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MOJAVE /Applications/Install\ macOS\ Mojave.app --nointeraction</span><br></pre></td></tr></table></figure></li></ol><h5 id="通过-U-盘安装-macOS-Mojave"><a href="#通过-U-盘安装-macOS-Mojave" class="headerlink" title="通过 U 盘安装 macOS Mojave"></a>通过 U 盘安装 macOS Mojave</h5><ol><li>备份好 Mac 里所有的重要数据（TimeMachine）</li><li>插上制作好的安装U盘，如果系统能识别出来即可，这时我们先关机了</li><li>按下电源键开机，当听到“噹”的一声时，按住 Option 键不放，直到出现启动菜单选项</li><li>这时选择安装U盘 (黄色图标) 并回车，就可以开始安装了，在过程中你可以通过“磁盘工具”对 Mac 的磁盘式化或者重新分区等操作。</li><li>之后就是一步一步的安装直到完成了。</li></ol><h4 id="拆机步骤"><a href="#拆机步骤" class="headerlink" title="拆机步骤"></a>拆机步骤</h4><p>请参考：<a href="https://www.crifan.com/upgrade_mac_ssd_disk_volume_from_120gb_to_owc_pcie_480gb/" target="_blank" rel="noopener">详解笔记</a>、<a href="https://www.youtube.com/watch?v=engdHBU7fwY" target="_blank" rel="noopener">OWC 详解视频</a></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>再次强调：拆机前备份一次，避免上次备份之后修改了部分文件，造成未备份至最新状态</li><li>一定要注意先把电池电源接口<a href="https://mp.weixin.qq.com/s/OE0hyGBT48Y1iROL9F-TiQ" target="_blank" rel="noopener">断开</a>。带电进行的任何操作都有烧机的风险。 <ul><li>在做SSD硬盘拆换之前，一定要记得请先断开电池的接口，给主板断电。带电操作永远是错误的，万一烧机了就全完了，切记，切记！<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/断电图例.jpg" width="500"><br><img src="/2019/01/30/Macbook-A1502-升级SSD/断电示例.png" width="500"><br></center></li></ul></li><li>螺丝顺序不能乱（不同位置的螺丝是有差异的），不要用蛮力，不要滑丝(<code>说到此处，我的心，这个痛啊....</code>)<ul><li>如若遇到滑丝的情况，稍作尝试，拧不下来就stop，趁着螺丝没被彻底拧花，找专业人员处理（此时的情况收费不会很贵，10来块钱就搞定了  如若完全拧花了，收费可能会贵些）<ul><li>（仅针对西安的”同学”）：<ol><li>优先去“赛格电脑城”，附近有许多维修店，许是因为竞争关系，价格都很公道，态度也很和善（换个后盖螺丝，10元.  和那些“道貌岸然、趾高气昂”的苹果维修店相比，已经很合理了） </li><li>如若解决不了，就去所谓的“苹果售后维修点”（据观察推荐 阳明国际10楼9号 会好一些） 收费自然贵一些，还概不讲价（大写的“坑”） </li></ol></li></ul></li><li>倘若螺丝已经拧出来了一些，可以用钳子或尖嘴钳将断在里面的螺丝拧出，仅适用于下图情况.（请小心尝试）<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/可拔螺丝的情况.png" width="500"><br></center>  </li><li>自行处理的“可行”方法：<ol><li>用502将螺丝刀与螺丝粘在一起，等待502硬化以后，将其拧下（502填充刀头与螺丝口间缝隙，听似可行，但并不可行）</li><li>用电烙铁将焊锡滴在螺丝口，把螺丝刀插进螺丝口与其焊在一起（不敢尝试）</li><li>电钻暴力拆解，把螺丝打穿（目前已有<a href="https://post.smzdm.com/p/318674/" target="_blank" rel="noopener">成果案例</a>）<ul><li>一定是手枪钻，千万别错用成冲击钻<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/手枪钻使用说明.png" width="500"><br></center></li></ul></li></ol></li></ul></li></ul><h4 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h4><p><a href="https://www.crifan.com/after_mac_change_ssd_and_restore_system/" target="_blank" rel="noopener">【记录】Mac更换SSD硬盘后恢复系统</a></p><ul><li>用Mac OS的启动U盘全新安装完系统之后，记得要重置一下SMC 和 NVRAM （<code>若是用TimeMachine恢复的情况，可以略过此步骤</code>）<ul><li><a href="https://support.apple.com/zh-cn/HT201295" target="_blank" rel="noopener">如何重置 Mac 上的系统管理控制器 (SMC)</a></li><li><a href="https://support.apple.com/zh-cn/HT204063" target="_blank" rel="noopener">如何重置 Mac 上的 NVRAM</a></li></ul></li></ul><h4 id="双系统安装"><a href="#双系统安装" class="headerlink" title="双系统安装"></a>双系统安装</h4><ul><li>可能会因为转接卡的问题，双系统中的读写速度会受影响</li></ul><h4 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h4><ul><li>查看磁盘容量  <center><br>  <img src="/2019/01/30/Macbook-A1502-升级SSD/Storeage.png" width="500"><br>  </center></li><li>从系统信息中查看，SATA express/NVMExpress 信息（链接宽度是X4（正常））  <center><br>  <img src="/2019/01/30/Macbook-A1502-升级SSD/NVMExpress.png" width="500"><br>  </center></li><li>“Disk Speed Test”软件测试读写速度   <center><br>  <img src="/2019/01/30/Macbook-A1502-升级SSD/DiskSpeedTest.png" width="500"><br>  </center></li></ul><h4 id="后期的“坑”"><a href="#后期的“坑”" class="headerlink" title="后期的“坑”"></a>后期的“坑”</h4><h5 id="无法连接WiFi"><a href="#无法连接WiFi" class="headerlink" title="无法连接WiFi"></a>无法连接WiFi</h5><ul><li>原装硬盘接头是在金属壳子里面的，新的转接卡接头是悬空的而且没屏蔽，你可以试试<code>用两面绝缘的金属箔覆盖硬盘</code>来改善电磁干扰<center><br><img src="/2019/01/30/Macbook-A1502-升级SSD/屏蔽转接头电磁干扰.jpg" width="300"><br></center></li></ul><h5 id="Macbook-Pro-休眠后黑屏重启修复一例"><a href="#Macbook-Pro-休眠后黑屏重启修复一例" class="headerlink" title="Macbook Pro 休眠后黑屏重启修复一例"></a>Macbook Pro 休眠后黑屏重启修复一例</h5><ul><li>偶尔会出现“休眠后黑屏，无法唤醒，需强制重启”的情况，可能是无线网卡的问题。详情可参考<a href="https://zhuanlan.zhihu.com/p/51188437" target="_blank" rel="noopener">此处</a>，同时可了解<a href="https://www.jianshu.com/p/1bc730bd129c" target="_blank" rel="noopener">MacOS休眠机制</a>的知识。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="动手捣鼓" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%89%8B%E6%8D%A3%E9%BC%93/"/>
    
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（七）</title>
    <link href="http://yoursite.com/2019/01/28/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/28/PyQt5-Python-实战课程（七）/</id>
    <published>2019-01-28T08:29:18.000Z</published>
    <updated>2019-02-24T08:41:32.516Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="表格与树🌲"><a href="#表格与树🌲" class="headerlink" title="表格与树🌲"></a>表格与树🌲</h2><h3 id="显示二维表数据（QTableView控件）"><a href="#显示二维表数据（QTableView控件）" class="headerlink" title="显示二维表数据（QTableView控件）"></a>显示二维表数据（QTableView控件）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TableView.png" width="500"><br></center><br>- 要点说明<br>    - 需要创建QTableView实例和一个数据源（Model），然后将两者关联 <code>self.tableview.setModel(self.model)</code><br>    - <code>MVC：Model   Viewer   Controller</code>    MVC的目的是将后端的数据和前端页面的耦合度降低<br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableView</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, arg=None)</span>:</span></span><br><span class="line">        super(TableView, self).__init__(arg)</span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableView表格视图控件演示"</span>)</span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Model</span></span><br><span class="line">        self.model = QStandardItemModel(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">        self.model.setHorizontalHeaderLabels([<span class="string">'id'</span>, <span class="string">'姓名'</span>, <span class="string">'年龄'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># QTableView控件</span></span><br><span class="line">        self.tableview = QTableView()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关联QTableView控件和Model</span></span><br><span class="line">        self.tableview.setModel(self.model)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        item11 = QStandardItem(<span class="string">'10'</span>)</span><br><span class="line">        item12 = QStandardItem(<span class="string">'雷神'</span>)</span><br><span class="line">        item13 = QStandardItem(<span class="string">'2000'</span>)</span><br><span class="line">        self.model.setItem(<span class="number">0</span>, <span class="number">0</span>, item11)</span><br><span class="line">        self.model.setItem(<span class="number">0</span>, <span class="number">1</span>, item12)</span><br><span class="line">        self.model.setItem(<span class="number">0</span>, <span class="number">2</span>, item13)</span><br><span class="line"></span><br><span class="line">        item31 = QStandardItem(<span class="string">'30'</span>)</span><br><span class="line">        item32 = QStandardItem(<span class="string">'死亡女神'</span>)</span><br><span class="line">        item33 = QStandardItem(<span class="string">'3000'</span>)</span><br><span class="line">        self.model.setItem(<span class="number">2</span>, <span class="number">0</span>, item31)</span><br><span class="line">        self.model.setItem(<span class="number">2</span>, <span class="number">1</span>, item32)</span><br><span class="line">        self.model.setItem(<span class="number">2</span>, <span class="number">2</span>, item33)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(self.tableview)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    table = TableView()</span><br><span class="line">    table.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 显示列数据（QListView控件）<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ListView.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QVBoxLayout, QListView, QMessageBox</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QStringListModel</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListViewDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(ListViewDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"QListView 例子"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>, <span class="number">270</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Model</span></span><br><span class="line">        listModel = QStringListModel()</span><br><span class="line">        self.list = [<span class="string">"列表项1"</span>,<span class="string">"列表项2"</span>, <span class="string">"列表项3"</span>]</span><br><span class="line">        listModel.setStringList(self.list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># QListView控件</span></span><br><span class="line">        listview = QListView()</span><br><span class="line">        listview.setModel(listModel)</span><br><span class="line">        listview.clicked.connect(self.clicked)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(listview)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clicked</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        QMessageBox.information(self,<span class="string">"QListView"</span>,<span class="string">"您选择了："</span> + self.list[item.row()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    win = ListViewDemo()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="扩展的列表控件（QListWidget）"><a href="#扩展的列表控件（QListWidget）" class="headerlink" title="扩展的列表控件（QListWidget）"></a>扩展的列表控件（QListWidget）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ListWidget.png" width="500"><br></center><br>- 要点说明<br>    - 不通过model，直接在控件中添加数据 <code>class QListWidget(QListView)</code><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListWidgetDemo</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">super(ListWidgetDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">self.setWindowTitle(<span class="string">"QListWidget 例子"</span>)</span><br><span class="line">self.resize(<span class="number">300</span>, <span class="number">270</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># QListWidget控件</span></span><br><span class="line">self.listwidget = QListWidget()</span><br><span class="line">self.listwidget.addItem(<span class="string">"item1"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item2"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item3"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item4"</span>)</span><br><span class="line">self.listwidget.addItem(<span class="string">"item5"</span>)</span><br><span class="line">self.listwidget.itemClicked.connect(self.clicked)</span><br><span class="line"></span><br><span class="line">self.setCentralWidget(self.listwidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clicked</span><span class="params">(self,Index)</span>:</span></span><br><span class="line">QMessageBox.information(self,<span class="string">"QListWidget"</span>,<span class="string">"您选择了："</span> + self.listwidget.item(self.listwidget.row(Index)).text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line">win = ListWidgetDemo()</span><br><span class="line">win.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 扩展的表格控件（QTableWidget）<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TableWidget.png" width="500"><br></center><br>- 要点说明：每一个Cell（单元格）是一个QTableWidgetItem<br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem, QAbstractItemView)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableWidgetDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(TableWidgetDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableWidget演示"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        tablewidget = QTableWidget()</span><br><span class="line">        tablewidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tablewidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(tablewidget)</span><br><span class="line"></span><br><span class="line">        tablewidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'籍贯'</span>])</span><br><span class="line">        nameItem = QTableWidgetItem(<span class="string">"小明"</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>,<span class="number">0</span>,nameItem)</span><br><span class="line"></span><br><span class="line">        ageItem = QTableWidgetItem(<span class="string">"24"</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>,<span class="number">1</span>,ageItem)</span><br><span class="line"></span><br><span class="line">        jgItem = QTableWidgetItem(<span class="string">"北京"</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>,<span class="number">2</span>,jgItem)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 禁止编辑</span></span><br><span class="line">        tablewidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 整行选择</span></span><br><span class="line">        tablewidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line">        <span class="comment"># 调整列和行</span></span><br><span class="line">        tablewidget.resizeColumnsToContents()</span><br><span class="line">        tablewidget.resizeRowsToContents()</span><br><span class="line"></span><br><span class="line">        tablewidget.horizontalHeader().setVisible(<span class="keyword">False</span>)</span><br><span class="line">     <span class="comment">#   tablewidget.verticalHeader().setVisible(False)</span></span><br><span class="line"></span><br><span class="line">        tablewidget.setVerticalHeaderLabels([<span class="string">"a"</span>,<span class="string">"b"</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 隐藏表格线</span></span><br><span class="line">        tablewidget.setShowGrid(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = TableWidgetDemo()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在单元格中放置控件<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/PlaceControlInCell.png" width="500"><br></center><br>- 要点说明<br>    - setItem：将文本放到单元格中<br>    - setCellWidget：将控件放到单元格中<br>    - setStyleSheet：设置控件的样式（QSS）<br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem, QAbstractItemView,</span><br><span class="line">                              QComboBox, QPushButton)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlaceControlInCell</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PlaceControlInCell,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"在单元格中放置控件"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>,<span class="string">'性别'</span>,<span class="string">'体重（kg）'</span>])</span><br><span class="line">        textItem = QTableWidgetItem(<span class="string">'小明'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,textItem)</span><br><span class="line"></span><br><span class="line">        combox = QComboBox()</span><br><span class="line">        combox.addItem(<span class="string">'男'</span>)</span><br><span class="line">        combox.addItem(<span class="string">'女'</span>)</span><br><span class="line">        <span class="comment"># QSS Qt StyleSheet</span></span><br><span class="line">        combox.setStyleSheet(<span class="string">'QComboBox&#123;margin:3px&#125;;'</span>)</span><br><span class="line">        tableWidget.setCellWidget(<span class="number">0</span>,<span class="number">1</span>,combox)</span><br><span class="line"></span><br><span class="line">        modifyButton = QPushButton(<span class="string">'修改'</span>)</span><br><span class="line">        modifyButton.setDown(<span class="keyword">True</span>)</span><br><span class="line">        modifyButton.setStyleSheet(<span class="string">'QPushButton&#123;margin:3px&#125;;'</span>)</span><br><span class="line">        tableWidget.setCellWidget(<span class="number">0</span>,<span class="number">2</span>,modifyButton)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = PlaceControlInCell()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在表格中搜索Cell和行定位<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/DataLocation.png" width="500"><br></center><br>- 要点说明<br>    1. 数据的定位：<code>findItems</code>  返回一个列表<br>    2. 如果找到了满足条件的单元格，会定位到单元格所在的行：<code>setSliderPosition(row)</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QColor, QBrush</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataLocation</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DataLocation,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableWidget 例子"</span>)</span><br><span class="line">        self.resize(<span class="number">600</span>, <span class="number">800</span>);</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">40</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                itemContent = <span class="string">'(%d,%d)'</span> %(i,j)</span><br><span class="line">                tableWidget.setItem(i,j,QTableWidgetItem(itemContent))</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 搜索满足条件的Cell</span></span><br><span class="line">        text = <span class="string">'(1'</span></span><br><span class="line">        items = tableWidget.findItems(text,QtCore.Qt.MatchStartsWith)</span><br><span class="line">        <span class="keyword">if</span> len(items) &gt; <span class="number">0</span>:</span><br><span class="line">            item = items[<span class="number">0</span>]</span><br><span class="line">            item.setBackground(QBrush(QColor(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)))</span><br><span class="line">            item.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">            row = item.row()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定位到指定的行</span></span><br><span class="line">            tableWidget.verticalScrollBar().setSliderPosition(row)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = DataLocation()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置单元格字体和颜色<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellFontAndColor.png" width="500"><br></center><br>- 要点片段代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">14</span>,QFont.Black))</span><br><span class="line">newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line">tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br></pre></td></tr></table></figure><br><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QBrush, QColor, QFont</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellFontAndColor</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellFontAndColor,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"设置单元格字体和颜色"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">14</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'女'</span>)</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)))</span><br><span class="line">        newItem.setBackground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">20</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellFontAndColor()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 按表格的某一列排序<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ColumnSort.png" width="500"><br></center><br>- 要点说明: <code>sortItems(columnIndex，orderType）</code><br>  1. 按哪一列排序<br>  2. 排序类型：升序或降序<br><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.orderType == Qt.DescendingOrder:</span><br><span class="line">        self.orderType = Qt.AscendingOrder</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.orderType = Qt.DescendingOrder</span><br><span class="line"></span><br><span class="line">    self.tableWidget.sortItems(<span class="number">2</span>,self.orderType)</span><br></pre></td></tr></table></figure><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColumnSort</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ColumnSort,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"按列排序"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.tableWidget = QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        self.tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(self.tableWidget)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'张三'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem=QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem=QTableWidgetItem(<span class="string">'165'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'李四'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'女'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'王五'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'170'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(<span class="string">'排序'</span>)</span><br><span class="line">        self.button.clicked.connect(self.order)</span><br><span class="line">        layout.addWidget(self.button)</span><br><span class="line"></span><br><span class="line">        self.orderType = Qt.DescendingOrder</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">order</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.orderType == Qt.DescendingOrder:</span><br><span class="line">            self.orderType = Qt.AscendingOrder</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.orderType = Qt.DescendingOrder</span><br><span class="line"></span><br><span class="line">        self.tableWidget.sortItems(<span class="number">2</span>,self.orderType)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = ColumnSort()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置单元格的文本对齐方式<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellTextAlignment.png" width="500"><br></center><br>- 要点片段<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newItem.setTextAlignment(Qt.AlignRight | Qt.AlignBottom)</span><br><span class="line">newItem.setTextAlignment(Qt.AlignCenter | Qt.AlignBottom)</span><br><span class="line">newItem.setTextAlignment(Qt.AlignRight)</span><br></pre></td></tr></table></figure><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellTextAlignment</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellTextAlignment,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"设置单元格的文本对齐方式"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        newItem.setTextAlignment(Qt.AlignRight | Qt.AlignBottom)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        newItem.setTextAlignment(Qt.AlignCenter | Qt.AlignBottom)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'190'</span>)</span><br><span class="line">        newItem.setTextAlignment(Qt.AlignRight)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellTextAlignment()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 合并单元格<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/Span.png" width="500"><br></center><br>- 要点说明: <code>setSpan(row,col,要合并的行数，要合并的列数）</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Span</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Span,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"合并单元格"</span>)</span><br><span class="line">        self.resize(<span class="number">430</span>, <span class="number">230</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line">        tableWidget.setSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line">        tableWidget.setSpan(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line">        tableWidget.setSpan(<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = Span()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置单元格的尺寸<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellSize.png" width="500"><br></center><br>- 要点说明<br>    - 设置行高<code>tableWidget.setRowHeight(0, 80)</code><br>    - 设置列宽<code>tableWidget.setColumnWidth(2, 120)</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QBrush, QColor, QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellSize</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellSize,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"QTableWidget之设置单元格尺寸"</span>)</span><br><span class="line">        self.resize(<span class="number">530</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        tableWidget = QTableWidget()</span><br><span class="line">        tableWidget.setRowCount(<span class="number">4</span>)</span><br><span class="line">        tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(tableWidget)</span><br><span class="line"></span><br><span class="line">        tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重(kg)'</span>])</span><br><span class="line">        tableWidget.setRowHeight(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">        tableWidget.setColumnWidth(<span class="number">2</span>, <span class="number">120</span>)</span><br><span class="line">        tableWidget.setRowHeight(<span class="number">2</span>,<span class="number">100</span>)</span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'雷神'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">40</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'女'</span>)</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)))</span><br><span class="line">        newItem.setBackground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        newItem.setFont(QFont(<span class="string">'Times'</span>,<span class="number">60</span>,QFont.Black))</span><br><span class="line">        newItem.setForeground(QBrush(QColor(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellSize()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在单元格中实现图文混排的效果<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellImageText.png" width="500"><br></center><br>- 要点代码:<code>newItem = QTableWidgetItem(QIcon(&#39;./images/bao1.png&#39;),&#39;背包&#39;)</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellImageText</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellImageText,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"在单元格中实现图文混排的效果"</span>)</span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.tableWidget = QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(<span class="number">5</span>)</span><br><span class="line">        self.tableWidget.setColumnCount(<span class="number">4</span>)</span><br><span class="line">        layout.addWidget(self.tableWidget)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重'</span>, <span class="string">'显示图片'</span>])</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'李宁'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">0</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'男'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">1</span>,newItem)</span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">'160'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">2</span>,newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(QIcon(<span class="string">'./images/bao1.png'</span>),<span class="string">'背包'</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>,<span class="number">3</span>,newItem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellImageText()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 改变单元格中图片的尺寸<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/CellImageSize.png" width="500"><br></center><br>- 要点说明: <code>setIconSize(QSize(width,height))</code><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellImageSize</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CellImageSize,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"改变单元格中图片的尺寸"</span>)</span><br><span class="line">        self.resize(<span class="number">1000</span>, <span class="number">900</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        tablewidget = QTableWidget()</span><br><span class="line">        tablewidget.setIconSize(QSize(<span class="number">300</span>,<span class="number">200</span>))</span><br><span class="line">        tablewidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        tablewidget.setRowCount(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tablewidget.setHorizontalHeaderLabels([<span class="string">'图片1'</span>, <span class="string">'图片2'</span>, <span class="string">'图片3'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让列的宽度和图片的宽度相同</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            tablewidget.setColumnWidth(i,<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让行的高度和图片的高度相同</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">            tablewidget.setRowHeight(i,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">            i = k / <span class="number">3</span>   <span class="comment"># 行</span></span><br><span class="line">            j = k % <span class="number">3</span>   <span class="comment"># 列</span></span><br><span class="line">            item = QTableWidgetItem()</span><br><span class="line"></span><br><span class="line">            item.setIcon(QIcon(<span class="string">'./images/bao%d.png'</span> % k))</span><br><span class="line">            tablewidget.setItem(i,j,item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        layout.addWidget(tablewidget)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = CellImageSize()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 在表格中显示上下文菜单<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TableWidgetContextMenu.png" width="500"><br></center><br>- 要点说明<br>    1. 如何弹出菜单<br><br>        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line">self.tableWidget.customContextMenuRequested.connect(self.generateMenu)</span><br></pre></td></tr></table></figure><br><br>    3. 如果在满足条件的情况下弹出菜单：槽方法被触发后，<code>QMenu()</code><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QMenu, QWidget, QTableWidget, QHBoxLayout, QApplication, QTableWidgetItem,QHeaderView)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableWidgetContextMenu</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(TableWidgetContextMenu,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"在表格中显示上下文菜单"</span>)</span><br><span class="line">        self.resize(<span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.tableWidget = QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(<span class="number">5</span>)</span><br><span class="line">        self.tableWidget.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(self.tableWidget)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([<span class="string">'姓名'</span>, <span class="string">'性别'</span>, <span class="string">'体重'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"张三"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"男"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"160"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">0</span>, <span class="number">2</span>, newItem)</span><br><span class="line">        <span class="comment"># 表格中第二行记录</span></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"李四"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"女"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"170"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">1</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 表格中第二行记录</span></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"李"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">0</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"女"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">1</span>, newItem)</span><br><span class="line"></span><br><span class="line">        newItem = QTableWidgetItem(<span class="string">"170"</span>)</span><br><span class="line">        self.tableWidget.setItem(<span class="number">2</span>, <span class="number">2</span>, newItem)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line"></span><br><span class="line">        self.tableWidget.customContextMenuRequested.connect(self.generateMenu)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMenu</span><span class="params">(self,pos)</span>:</span></span><br><span class="line">        print(pos)  <span class="comment"># 相对于窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.tableWidget.selectionModel().selection().indexes():</span><br><span class="line">            rowNum = i.row()</span><br><span class="line">        <span class="comment"># 如果选择的行索引小于2，弹出上下文菜单</span></span><br><span class="line">        <span class="keyword">if</span> rowNum &lt; <span class="number">2</span>:</span><br><span class="line">            menu = QMenu()</span><br><span class="line">            item1 = menu.addAction(<span class="string">"菜单项1"</span>)</span><br><span class="line">            item2 = menu.addAction(<span class="string">"菜单项2"</span>)</span><br><span class="line">            item3 = menu.addAction(<span class="string">"菜单项3"</span>)</span><br><span class="line">            screenPos = self.tableWidget.mapToGlobal(pos)</span><br><span class="line">            print(screenPos) <span class="comment"># 相对于屏幕</span></span><br><span class="line">            <span class="comment"># 被阻塞</span></span><br><span class="line">            action = menu.exec(screenPos)</span><br><span class="line">            <span class="keyword">if</span> action == item1:</span><br><span class="line">                print(<span class="string">'选择了第1个菜单项'</span>,self.tableWidget.item(rowNum,<span class="number">0</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum,<span class="number">1</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum, <span class="number">2</span>).text())</span><br><span class="line">            <span class="keyword">elif</span> action == item2:</span><br><span class="line">                print(<span class="string">'选择了第2个菜单项'</span>,self.tableWidget.item(rowNum,<span class="number">0</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum,<span class="number">1</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum, <span class="number">2</span>).text())</span><br><span class="line">            <span class="keyword">elif</span> action == item3:</span><br><span class="line">                print(<span class="string">'选择了第3个菜单项'</span>,self.tableWidget.item(rowNum,<span class="number">0</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum,<span class="number">1</span>).text(),</span><br><span class="line">                                        self.tableWidget.item(rowNum, <span class="number">2</span>).text())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    example = TableWidgetContextMenu()</span><br><span class="line">    example.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 树🌲控件（QTreeWidget）的基本用法<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/BasicTreeWidget.png" width="500"><br></center><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicTreeWidget</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(BasicTreeWidget, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'树控件（QTreeWidget）的基本用法'</span>)</span><br><span class="line"></span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line">        <span class="comment"># 为树控件指定列数</span></span><br><span class="line">        self.tree.setColumnCount(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 指定列标签</span></span><br><span class="line">        self.tree.setHeaderLabels([<span class="string">'Key'</span>,<span class="string">'Value'</span>])</span><br><span class="line"></span><br><span class="line">        root = QTreeWidgetItem(self.tree)</span><br><span class="line">        root.setText(<span class="number">0</span>,<span class="string">'根节点'</span>)</span><br><span class="line">        root.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/root.png'</span>))</span><br><span class="line">        self.tree.setColumnWidth(<span class="number">0</span>,<span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加子节点1</span></span><br><span class="line">        child1 = QTreeWidgetItem(root)</span><br><span class="line">        child1.setText(<span class="number">0</span>,<span class="string">'子节点1'</span>)</span><br><span class="line">        child1.setText(<span class="number">1</span>,<span class="string">'子节点1的数据'</span>)</span><br><span class="line">        child1.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/bao3.png'</span>))</span><br><span class="line">        child1.setCheckState(<span class="number">0</span>,Qt.Checked)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加子节点2</span></span><br><span class="line">        child2 = QTreeWidgetItem(root)</span><br><span class="line">        child2.setText(<span class="number">0</span>,<span class="string">'子节点2'</span>)</span><br><span class="line">        child2.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/bao6.png'</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为child2添加一个子节点</span></span><br><span class="line">        child3 = QTreeWidgetItem(child2)</span><br><span class="line">        child3.setText(<span class="number">0</span>,<span class="string">'子节点2-1'</span>)</span><br><span class="line">        child3.setText(<span class="number">1</span>,<span class="string">'新的值'</span>)</span><br><span class="line">        child3.setIcon(<span class="number">0</span>,QIcon(<span class="string">'./images/music.png'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.tree.expandAll() <span class="comment"># 显示方式：expand</span></span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(self.tree)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    tree = BasicTreeWidget()</span><br><span class="line">    tree.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 为树🌲节点添加响应事件<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TreeEvent.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeEvent</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(TreeEvent, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'为树节点添加响应事件'</span>)</span><br><span class="line"></span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line"></span><br><span class="line">        self.tree.setColumnCount(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.tree.setHeaderLabels([<span class="string">'Key'</span>,<span class="string">'Value'</span>])</span><br><span class="line"></span><br><span class="line">        root  = QTreeWidgetItem(self.tree)</span><br><span class="line">        root.setText(<span class="number">0</span>,<span class="string">'root'</span>)</span><br><span class="line">        root.setText(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">        child1 = QTreeWidgetItem(root)</span><br><span class="line">        child1.setText(<span class="number">0</span>,<span class="string">'child1'</span>)</span><br><span class="line">        child1.setText(<span class="number">1</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">        child2 = QTreeWidgetItem(root)</span><br><span class="line">        child2.setText(<span class="number">0</span>,<span class="string">'child2'</span>)</span><br><span class="line">        child2.setText(<span class="number">1</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">        child3 = QTreeWidgetItem(child2)</span><br><span class="line">        child3.setText(<span class="number">0</span>,<span class="string">'child3'</span>)</span><br><span class="line">        child3.setText(<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">        self.tree.clicked.connect(self.onTreeClicked)</span><br><span class="line">        self.setCentralWidget(self.tree)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTreeClicked</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        print(index.row())</span><br><span class="line">        print(<span class="string">'key=%s,value=%s'</span> % (item.text(<span class="number">0</span>),item.text(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    tree = TreeEvent()</span><br><span class="line">    tree.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="增加、修改和删除树🌲控件中的节点"><a href="#增加、修改和删除树🌲控件中的节点" class="headerlink" title="增加、修改和删除树🌲控件中的节点"></a>增加、修改和删除树🌲控件中的节点</h3><p><strong>Presentation</strong></p><p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/ModifyTree.png" width="500"><br></center></p><ul><li>要点片段</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNode</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'添加节点'</span>)</span><br><span class="line">    item = self.tree.currentItem()</span><br><span class="line">    print(item)</span><br><span class="line">    node = QTreeWidgetItem(item)</span><br><span class="line">    node.setText(<span class="number">0</span>,<span class="string">'新节点'</span>)</span><br><span class="line">    node.setText(<span class="number">1</span>,<span class="string">'新值'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateNode</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'修改节点'</span>)</span><br><span class="line">    item = self.tree.currentItem()</span><br><span class="line">    item.setText(<span class="number">0</span>,<span class="string">'修改节点'</span>)</span><br><span class="line">    item.setText(<span class="number">1</span>, <span class="string">'值已经被修改'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'删除节点'</span>)</span><br><span class="line">    item = self.tree.currentItem()</span><br><span class="line">    root = self.tree.invisibleRootItem()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self.tree.selectedItems():</span><br><span class="line">        (item.parent() <span class="keyword">or</span> root).removeChild(item)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifyTree</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(ModifyTree, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">'TreeWidget 例子'</span>)</span><br><span class="line"></span><br><span class="line">        operatorLayout = QHBoxLayout()</span><br><span class="line">        addBtn = QPushButton(<span class="string">'添加节点'</span>)</span><br><span class="line">        updateBtn = QPushButton(<span class="string">'修改节点'</span>)</span><br><span class="line">        deleteBtn = QPushButton(<span class="string">'删除节点'</span>)</span><br><span class="line"></span><br><span class="line">        operatorLayout.addWidget(addBtn)</span><br><span class="line">        operatorLayout.addWidget(updateBtn)</span><br><span class="line">        operatorLayout.addWidget(deleteBtn)</span><br><span class="line"></span><br><span class="line">        addBtn.clicked.connect(self.addNode)</span><br><span class="line">        updateBtn.clicked.connect(self.updateNode)</span><br><span class="line">        deleteBtn.clicked.connect(self.deleteNode)</span><br><span class="line"></span><br><span class="line">        self.tree = QTreeWidget()</span><br><span class="line">        self.tree.setColumnCount(<span class="number">2</span>)</span><br><span class="line">        self.tree.setHeaderLabels([<span class="string">'Key'</span>,<span class="string">'Value'</span>])</span><br><span class="line"></span><br><span class="line">        root  = QTreeWidgetItem(self.tree)</span><br><span class="line">        root.setText(<span class="number">0</span>,<span class="string">'root'</span>)</span><br><span class="line">        root.setText(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">        child1 = QTreeWidgetItem(root)</span><br><span class="line">        child1.setText(<span class="number">0</span>,<span class="string">'child1'</span>)</span><br><span class="line">        child1.setText(<span class="number">1</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">        child2 = QTreeWidgetItem(root)</span><br><span class="line">        child2.setText(<span class="number">0</span>,<span class="string">'child2'</span>)</span><br><span class="line">        child2.setText(<span class="number">1</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">        child3 = QTreeWidgetItem(child2)</span><br><span class="line">        child3.setText(<span class="number">0</span>,<span class="string">'child3'</span>)</span><br><span class="line">        child3.setText(<span class="number">1</span>,<span class="string">'3'</span>)</span><br><span class="line">        self.tree.clicked.connect(self.onTreeClicked)</span><br><span class="line"></span><br><span class="line">        mainLayout = QVBoxLayout(self)</span><br><span class="line">        mainLayout.addLayout(operatorLayout)</span><br><span class="line">        mainLayout.addWidget(self.tree)</span><br><span class="line">        self.setLayout(mainLayout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTreeClicked</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        print(index.row())</span><br><span class="line">        print(<span class="string">'key=%s,value=%s'</span> % (item.text(<span class="number">0</span>),item.text(<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addNode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'添加节点'</span>)</span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        print(item)</span><br><span class="line">        node = QTreeWidgetItem(item)</span><br><span class="line">        node.setText(<span class="number">0</span>,<span class="string">'新节点'</span>)</span><br><span class="line">        node.setText(<span class="number">1</span>,<span class="string">'新值'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateNode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'修改节点'</span>)</span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        item.setText(<span class="number">0</span>,<span class="string">'修改节点'</span>)</span><br><span class="line">        item.setText(<span class="number">1</span>, <span class="string">'值已经被修改'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'删除节点'</span>)</span><br><span class="line">        item = self.tree.currentItem()</span><br><span class="line">        root = self.tree.invisibleRootItem()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.tree.selectedItems():</span><br><span class="line">            (item.parent() <span class="keyword">or</span> root).removeChild(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    tree = ModifyTree()</span><br><span class="line">    tree.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QTreeView控件与系统定制模式"><a href="#QTreeView控件与系统定制模式" class="headerlink" title="QTreeView控件与系统定制模式"></a>QTreeView控件与系统定制模式</h3><p><strong>Presentation</strong></p><p><center><br> <img src="/2019/01/28/PyQt5-Python-实战课程（七）/TreeView.png" width="500"><br></center></p><ul><li><code>QTreeView</code>与<code>QTreeWidget</code>的区别在于load数据的方式不同，QTreeView使用<code>Model</code>方式（常见的有<code>QDirModel()</code>）</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    model = QDirModel()</span><br><span class="line">    tree = QTreeView()</span><br><span class="line">    tree.setModel(model)</span><br><span class="line"></span><br><span class="line">    tree.setWindowTitle(<span class="string">'QTreeView'</span>)</span><br><span class="line">    tree.resize(<span class="number">600</span>,<span class="number">400</span>)</span><br><span class="line">    tree.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>医疗影像文件读取方法</title>
    <link href="http://yoursite.com/2019/01/27/%E5%8C%BB%E7%96%97%E5%BD%B1%E5%83%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/01/27/医疗影像文件读取方法/</id>
    <published>2019-01-27T13:52:52.000Z</published>
    <updated>2019-02-25T01:45:41.803Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="Medical-Image-File-Formats"><a href="#Medical-Image-File-Formats" class="headerlink" title="Medical Image File Formats"></a>Medical Image File Formats</h2><center><br> <img src="/2019/01/27/医疗影像文件读取方法/SummaryOfFileFormatsCharacteristics.png" width="500"><br></center><br><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3948928/" target="_blank" rel="noopener">Medical Image File Formats 2014 Apr</a><br><br>## DCM<br>### Relevant Software<br>- <a href="https://inobitec.com/eng/downloads/dicomviewer/" target="_blank" rel="noopener">Inobitec DICOM Viewer</a><br>- Mango<br><br>### SimpleITK读取并显示dcm文件<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/27/医疗影像文件读取方法/SimpleITK_dcm.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SimpleITK <span class="keyword">as</span> sitk</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">image = sitk.ReadImage(<span class="string">r"./729427_20181010_CT_5_249_011.dcm"</span>) <span class="comment"># type(image) &lt;class 'SimpleITK.SimpleITK.Image'&gt;</span></span><br><span class="line">image_array = np.squeeze(sitk.GetArrayFromImage(image))  <span class="comment"># type(image_array) -&gt;&gt; &lt;class 'numpy.ndarray'&gt;  image_array.shape -&gt;&gt; (512, 512)</span></span><br><span class="line">plt.imshow(image_array)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="PyQt5-DcmViewer"><a href="#PyQt5-DcmViewer" class="headerlink" title="PyQt5_DcmViewer"></a>PyQt5_DcmViewer</h4><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/医疗影像文件读取方法/DcmViewer_demo.png" width="500"><br></center><ul><li><code>os.walk</code> 、<code>SimpleITK</code>、<code>FigureCanvas</code></li><li>参考链接: <a href="https://blog.csdn.net/lsq2902101015/article/details/51305825" target="_blank" rel="noopener">Python获取指定文件夹下的文件名</a>、<a href="https://pythonspot.com/pyqt5-matplotlib/" target="_blank" rel="noopener">PyQt5 Matplotlib</a></li><li><a href="https://github.com/Captainzj/PyQt5_Practice/blob/master/src/Dcm_Viewer/DcmViewer.py" target="_blank" rel="noopener">DcmViewer.py code</a></li></ul><h4 id="PyQt5-DcmViewer-3d"><a href="#PyQt5-DcmViewer-3d" class="headerlink" title="PyQt5_DcmViewer_3d"></a>PyQt5_DcmViewer_3d</h4><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/医疗影像文件读取方法/DcmViewer_3d.png" width="500"><br></center><ul><li>重点代码：<code>scipy.misc.imresize(gray,(200,200))</code></li><li><a href="https://github.com/Captainzj/PyQt5_Practice/blob/master/src/Dcm_Viewer/DcmViewer_3d.py" target="_blank" rel="noopener">DcmViewer_3d.py code</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
      <category term="项目调研" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E8%B0%83%E7%A0%94/"/>
    
    
      <category term="医疗图像" scheme="http://yoursite.com/tags/%E5%8C%BB%E7%96%97%E5%9B%BE%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（六）</title>
    <link href="http://yoursite.com/2019/01/27/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/27/PyQt5-Python-实战课程（六）/</id>
    <published>2019-01-27T07:55:37.000Z</published>
    <updated>2019-02-23T12:33:29.395Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="拖拽与剪贴板"><a href="#拖拽与剪贴板" class="headerlink" title="拖拽与剪贴板"></a>拖拽与剪贴板</h2><h3 id="让控件支持拖拽动作"><a href="#让控件支持拖拽动作" class="headerlink" title="让控件支持拖拽动作"></a>让控件支持拖拽动作</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/DrapDrop.png" width="500"><br></center><ul><li>要点说明</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.setDragEnabled(<span class="keyword">True</span>)</span><br><span class="line">B.setAcceptDrops(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">B需要两个事件</span><br><span class="line"><span class="number">1.</span> dragEnterEvent   <span class="comment">#将A拖到B触发</span></span><br><span class="line"><span class="number">2.</span> dropEvent        <span class="comment">#在B的区域放下A时触发</span></span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComboBox</span><span class="params">(QComboBox)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyComboBox,self).__init__()</span><br><span class="line">        self.setAcceptDrops(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dragEnterEvent</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        print(e)</span><br><span class="line">        <span class="keyword">if</span> e.mimeData().hasText():</span><br><span class="line">            e.accept()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            e.ignore()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dropEvent</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        self.addItem(e.mimeData().text())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrapDropDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrapDropDemo,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'拖拽案例'</span>)</span><br><span class="line"></span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line">        formLayout.addRow(QLabel(<span class="string">"请将左边的文本拖拽到右边的下拉列表中"</span>))</span><br><span class="line">        lineEdit = QLineEdit()</span><br><span class="line">        lineEdit.setDragEnabled(<span class="keyword">True</span>)  <span class="comment"># 让QLineEdit控件可拖动</span></span><br><span class="line"></span><br><span class="line">        combo = MyComboBox()</span><br><span class="line">        formLayout.addRow(lineEdit,combo)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrapDropDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用剪贴板"><a href="#使用剪贴板" class="headerlink" title="使用剪贴板"></a>使用剪贴板</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/ClipBoard.png" width="500"><br></center><ul><li>要点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyText</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    clipboard.setText(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasteText</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    self.textLabel.setText(clipboard.text())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyImage</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    clipboard.setPixmap(QPixmap(<span class="string">'./images/book.png'</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasteImage</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    self.imageLabel.setPixmap(clipboard.pixmap())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">    mimeData = QMimeData()</span><br><span class="line">    mimeData.setHtml(<span class="string">'&lt;b&gt;Bold and &lt;font color=red&gt;Red&lt;/font&gt;&lt;/b&gt;'</span>)</span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    clipboard.setMimeData(mimeData)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pasteHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">    clipboard = QApplication.clipboard()</span><br><span class="line">    mimeData = clipboard.mimeData()</span><br><span class="line">    <span class="keyword">if</span> mimeData.hasHtml():</span><br><span class="line">        self.textLabel.setText(mimeData.html())</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClipBoard</span><span class="params">(QDialog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ClipBoard,self).__init__()</span><br><span class="line">        textCopyButton = QPushButton(<span class="string">'复制文本'</span>)</span><br><span class="line">        textPasteButton = QPushButton(<span class="string">'粘贴文本'</span>)</span><br><span class="line"></span><br><span class="line">        htmlCopyButton = QPushButton(<span class="string">'复制HTML'</span>)</span><br><span class="line">        htmlPasteButton = QPushButton(<span class="string">'粘贴HTML'</span>)</span><br><span class="line"></span><br><span class="line">        imageCopyButton = QPushButton(<span class="string">'复制图像'</span>)</span><br><span class="line">        imagePasteButton = QPushButton(<span class="string">'粘贴图像'</span>)</span><br><span class="line"></span><br><span class="line">        self.textLabel  = QLabel(<span class="string">'默认文本'</span>)</span><br><span class="line">        self.imageLabel=QLabel()</span><br><span class="line">      <span class="comment">#  self.imageLabel.setPixmap(QPixmap('./images/book1.png'))</span></span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        layout.addWidget(textCopyButton,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(imageCopyButton,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(htmlCopyButton,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(textPasteButton,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(imagePasteButton,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(htmlPasteButton,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.textLabel,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.imageLabel,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        textCopyButton.clicked.connect(self.copyText)</span><br><span class="line">        textPasteButton.clicked.connect(self.pasteText)</span><br><span class="line"></span><br><span class="line">        htmlCopyButton.clicked.connect(self.copyHtml)</span><br><span class="line">        htmlPasteButton.clicked.connect(self.pasteHtml)</span><br><span class="line"></span><br><span class="line">        imageCopyButton.clicked.connect(self.copyImage)</span><br><span class="line">        imagePasteButton.clicked.connect(self.pasteImage)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'剪贴板演示'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyText</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setText(<span class="string">'hello world'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pasteText</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        self.textLabel.setText(clipboard.text())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyImage</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setPixmap(QPixmap(<span class="string">'./images/book.png'</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pasteImage</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        self.imageLabel.setPixmap(clipboard.pixmap())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">        mimeData = QMimeData()</span><br><span class="line">        mimeData.setHtml(<span class="string">'&lt;b&gt;Bold and &lt;font color=red&gt;Red&lt;/font&gt;&lt;/b&gt;'</span>)</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setMimeData(mimeData)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pasteHtml</span><span class="params">(self)</span>:</span></span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        mimeData = clipboard.mimeData()</span><br><span class="line">        <span class="keyword">if</span> mimeData.hasHtml():</span><br><span class="line">            self.textLabel.setText(mimeData.html())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ClipBoard()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="日历和时间"><a href="#日历和时间" class="headerlink" title="日历和时间"></a>日历和时间</h2><h3 id="日历控件"><a href="#日历控件" class="headerlink" title="日历控件"></a>日历控件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QCalendarWidget.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyCalendar, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cal = QCalendarWidget(self)</span><br><span class="line">        self.cal.setMinimumDate(QDate(<span class="number">1988</span>,<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.cal.setMaximumDate(QDate(<span class="number">2088</span>,<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.cal.setGridVisible(<span class="keyword">True</span>)</span><br><span class="line">        self.cal.move(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line">        self.cal.clicked.connect(self.showDate)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(self)</span><br><span class="line"></span><br><span class="line">        date = self.cal.selectedDate()</span><br><span class="line">        self.label.setText(date.toString(<span class="string">"yyyy-MM-dd dddd"</span>))</span><br><span class="line">        self.label.move(<span class="number">20</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">350</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"日历演示"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDate</span><span class="params">(self,date)</span>:</span></span><br><span class="line">        <span class="comment">#self.label.setText((date.toString("yyyy-MM-dd dddd")))</span></span><br><span class="line">        self.label.setText((self.cal.selectedDate().toString(<span class="string">"yyyy-MM-dd dddd"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = MyCalendar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="设置不同风格的日期和时间"><a href="#设置不同风格的日期和时间" class="headerlink" title="设置不同风格的日期和时间"></a>设置不同风格的日期和时间</h3><h3 id="日期和时间控件的高级操作"><a href="#日期和时间控件的高级操作" class="headerlink" title="日期和时间控件的高级操作"></a>日期和时间控件的高级操作</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QDateTimeEdit.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateTimeEdit</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DateTimeEdit, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        vlayout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        dateTimeEdit1 = QDateTimeEdit()</span><br><span class="line">        dateTimeEdit1.setMinimumDate(QDate.currentDate().addDays(<span class="number">-365</span>))</span><br><span class="line">        dateTimeEdit1.setMaximumDate(QDate.currentDate().addDays(<span class="number">365</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dateTimeEdit2 = QDateTimeEdit(QDateTime.currentDateTime())</span><br><span class="line">        dateTimeEdit2.setCalendarPopup(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        dateEdit = QDateTimeEdit(QDate.currentDate()) <span class="comment"># 仅显示日期</span></span><br><span class="line">        timeEdit = QDateTimeEdit(QTime.currentTime()) <span class="comment"># 仅显示时间</span></span><br><span class="line"></span><br><span class="line">        dateTimeEdit1.setDisplayFormat(<span class="string">"yyyy-MM-dd  HH:mm:ss"</span>)</span><br><span class="line">        dateTimeEdit2.setDisplayFormat(<span class="string">"yyyy/MM/dd HH-mm-ss"</span>)</span><br><span class="line">        dateEdit.setDisplayFormat(<span class="string">"yyyy.MM.dd"</span>)</span><br><span class="line">        timeEdit.setDisplayFormat(<span class="string">"HH:mm:ss"</span>)</span><br><span class="line"></span><br><span class="line">        self.dateTimeEdit = dateTimeEdit1</span><br><span class="line">        dateTimeEdit1.dateChanged.connect(self.onDateChanged)</span><br><span class="line">        dateTimeEdit1.timeChanged.connect(self.onTimeChanged)</span><br><span class="line">        dateTimeEdit1.dateTimeChanged.connect(self.onDateTimeChanged)</span><br><span class="line"></span><br><span class="line">        vlayout.addWidget(dateTimeEdit1)</span><br><span class="line">        vlayout.addWidget(dateTimeEdit2)</span><br><span class="line">        vlayout.addWidget(dateEdit)</span><br><span class="line">        vlayout.addWidget(timeEdit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.btn = QPushButton(<span class="string">'获取日期和时间'</span>)</span><br><span class="line">        self.btn.clicked.connect(self.onButtonClick)</span><br><span class="line">        vlayout.addWidget(self.btn)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vlayout)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">90</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">"设置不同风格的日期和时间"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日期变化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onDateChanged</span><span class="params">(self,date)</span>:</span></span><br><span class="line">        print(date)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 时间变化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTimeChanged</span><span class="params">(self,time)</span>:</span></span><br><span class="line">        print(time)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日期和时间变化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onDateTimeChanged</span><span class="params">(self,datetime)</span>:</span></span><br><span class="line">        print(datetime)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        datetime = self.dateTimeEdit.dateTime()</span><br><span class="line">        print(datetime)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最大日期</span></span><br><span class="line">        print(self.dateTimeEdit.maximumDate())</span><br><span class="line">        <span class="comment"># 最大日期和时间</span></span><br><span class="line">        print(self.dateTimeEdit.maximumDateTime())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最小日期</span></span><br><span class="line">        print(self.dateTimeEdit.minimumDateTime())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DateTimeEdit()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="菜单、工具栏和状态栏"><a href="#菜单、工具栏和状态栏" class="headerlink" title="菜单、工具栏和状态栏"></a>菜单、工具栏和状态栏</h2><h3 id="创建和使用菜单"><a href="#创建和使用菜单" class="headerlink" title="创建和使用菜单"></a>创建和使用菜单</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/menuBar.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span><span class="params">(QMainWindow)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Menu,self).__init__()</span><br><span class="line">        bar = self.menuBar()  <span class="comment"># 获取菜单栏</span></span><br><span class="line"></span><br><span class="line">        file = bar.addMenu(<span class="string">"文件"</span>)</span><br><span class="line">        file.addAction(<span class="string">"新建"</span>)</span><br><span class="line"></span><br><span class="line">        save = QAction(<span class="string">"保存"</span>,self)</span><br><span class="line">        save.setShortcut(<span class="string">"Ctrl + S"</span>)</span><br><span class="line">        save.triggered.connect(self.process)</span><br><span class="line">        file.addAction(save)</span><br><span class="line"></span><br><span class="line">        quit = QAction(<span class="string">"退出"</span>,self)</span><br><span class="line">        file.addAction(quit)</span><br><span class="line"></span><br><span class="line">        edit = bar.addMenu(<span class="string">"Edit"</span>)</span><br><span class="line">        edit.addAction(<span class="string">"copy"</span>)</span><br><span class="line">        edit.addAction(<span class="string">"paste"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        print(self.sender().text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Menu()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="创建和使用工具栏"><a href="#创建和使用工具栏" class="headerlink" title="创建和使用工具栏"></a>创建和使用工具栏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">工具栏默认按钮：<span class="string">'只显示图标，将文本作为悬停提示展示'</span></span><br><span class="line"></span><br><span class="line">工具栏按钮有<span class="number">3</span>中显示状态</span><br><span class="line"><span class="number">1.</span>  只显示图标 ToolButtonIconOnly = <span class="number">0</span></span><br><span class="line"><span class="number">2.</span>  只显示文本 ToolButtonTextOnly = <span class="number">1</span></span><br><span class="line"><span class="number">3.</span>  同时显示文本和图标 ToolButtonTextBesideIcon = <span class="number">2</span>/ ToolButtonTextUnderIcon = <span class="number">3</span>/ ToolButtonFollowStyle = <span class="number">4</span> ...</span><br></pre></td></tr></table></figure><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/Toolbar.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toolbar</span><span class="params">(QMainWindow)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Toolbar,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"工具栏例子"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        tb1 = self.addToolBar(<span class="string">"File"</span>)</span><br><span class="line"></span><br><span class="line">        new = QAction(QIcon(<span class="string">'./images/new.png'</span>),<span class="string">"new"</span>,self)</span><br><span class="line">        tb1.addAction(new)</span><br><span class="line"></span><br><span class="line">        open = QAction(QIcon(<span class="string">'./images/open.png'</span>),<span class="string">"open"</span>,self)</span><br><span class="line">        tb1.addAction(open)</span><br><span class="line"></span><br><span class="line">        save = QAction(QIcon(<span class="string">'./images/save.png'</span>),<span class="string">"save"</span>,self)</span><br><span class="line">        tb1.addAction(save)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tb2 = self.addToolBar(<span class="string">"File1"</span>)</span><br><span class="line"></span><br><span class="line">        new1 = QAction(QIcon(<span class="string">'./images/new.png'</span>),<span class="string">"新建"</span>,self)</span><br><span class="line">        tb2.addAction(new1)</span><br><span class="line"></span><br><span class="line">        tb2.setToolButtonStyle(Qt.ToolButtonTextUnderIcon) <span class="comment"># try more ToolButtonStyle</span></span><br><span class="line"></span><br><span class="line">        tb1.actionTriggered.connect(self.toolbtnpressed)</span><br><span class="line"></span><br><span class="line">        tb2.actionTriggered.connect(self.toolbtnpressed)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toolbtnpressed</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        print(<span class="string">"按下的工具栏按钮是"</span>,a.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Toolbar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="创建和使用状态栏"><a href="#创建和使用状态栏" class="headerlink" title="创建和使用状态栏"></a>创建和使用状态栏</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/StatusBar.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatusBar</span><span class="params">(QMainWindow)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(StatusBar,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"状态栏演示"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        bar = self.menuBar()  <span class="comment"># 菜单栏</span></span><br><span class="line">        file = bar.addMenu(<span class="string">"File"</span>)</span><br><span class="line">        file.addAction(<span class="string">"show"</span>)</span><br><span class="line">        file.triggered.connect(self.processTrigger)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(QTextEdit())  <span class="comment"># no sense</span></span><br><span class="line"></span><br><span class="line">        self.statusBar = QStatusBar()</span><br><span class="line">        self.setStatusBar(self.statusBar)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processTrigger</span><span class="params">(self,q)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> q.text() == <span class="string">"show"</span> :</span><br><span class="line">            self.statusBar.showMessage(q.text() + <span class="string">" 菜单被点击了"</span>,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = StatusBar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><h3 id="使用打印机"><a href="#使用打印机" class="headerlink" title="使用打印机"></a>使用打印机</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/PrintSupport.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtGui, QtWidgets, QtPrintSupport</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintSupport</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(PrintSupport,self).__init__()</span><br><span class="line">        self.setGeometry(<span class="number">500</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.button = QPushButton(<span class="string">'打印QTextEdit控件中的内容'</span>,self)</span><br><span class="line">        self.button.setGeometry(<span class="number">20</span>,<span class="number">20</span>,<span class="number">260</span>,<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        self.editor = QTextEdit(<span class="string">'默认文本'</span>,self)</span><br><span class="line">        self.editor.setGeometry(<span class="number">20</span>,<span class="number">60</span>,<span class="number">260</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.<span class="keyword">print</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        printer = QtPrintSupport.QPrinter()</span><br><span class="line">        painter = QtGui.QPainter()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将绘制的目标重定向(begin)到打印机(printer)</span></span><br><span class="line">        painter.begin(printer)</span><br><span class="line">        screen = self.editor.grab()  <span class="comment"># 获取屏幕</span></span><br><span class="line">        painter.drawPixmap(<span class="number">10</span>,<span class="number">10</span>,screen) <span class="comment"># 内容以图片形式打印</span></span><br><span class="line">        painter.end()</span><br><span class="line">        print(<span class="string">"print"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    gui = PrintSupport()</span><br><span class="line">    gui.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><h3 id="显示打印对话框"><a href="#显示打印对话框" class="headerlink" title="显示打印对话框"></a>显示打印对话框</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/PrintDialog.png" width="500"><br></center><br>- 要点代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openFile</span><span class="params">(self)</span>:</span></span><br><span class="line">    fname = QFileDialog.getOpenFileName(self,<span class="string">'打开文本文件'</span>,<span class="string">'./'</span>)</span><br><span class="line">    <span class="keyword">if</span> fname[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">with</span> open(fname[<span class="number">0</span>],<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>,errors = <span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.editor.setText(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示打印设置对话框</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showSettingsDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">    printDialog = QPageSetupDialog(self.printer,self)</span><br><span class="line">    printDialog.exec()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示打印对话框</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showPrintDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">    printdialog = QPrintDialog(self.printer,self)</span><br><span class="line">    <span class="keyword">if</span> QDialog.Accepted == printdialog.exec():</span><br><span class="line">        self.editor.print(self.printer)</span><br></pre></td></tr></table></figure><br><br>- 完整代码<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QApplication, QPushButton, QTextEdit, QFileDialog, QDialog</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtPrintSupport <span class="keyword">import</span> QPageSetupDialog, QPrintDialog, QPrinter</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintDialog</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PrintDialog,self).__init__()</span><br><span class="line">        self.printer = QPrinter()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'打印对话框'</span>)</span><br><span class="line"></span><br><span class="line">        self.editor = QTextEdit(self)</span><br><span class="line">        self.editor.setGeometry(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">270</span>)</span><br><span class="line"></span><br><span class="line">        self.openButton = QPushButton(<span class="string">'打开文件'</span>,self)</span><br><span class="line">        self.openButton.move(<span class="number">350</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.settingsButton = QPushButton(<span class="string">'打印设置'</span>,self)</span><br><span class="line">        self.settingsButton.move(<span class="number">350</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.printButton = QPushButton(<span class="string">'打印文档'</span>,self)</span><br><span class="line">        self.printButton.move(<span class="number">350</span>,<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        self.openButton.clicked.connect(self.openFile)</span><br><span class="line">        self.settingsButton.clicked.connect(self.showSettingsDialog)</span><br><span class="line">        self.printButton.clicked.connect(self.showPrintDialog)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openFile</span><span class="params">(self)</span>:</span></span><br><span class="line">        fname = QFileDialog.getOpenFileName(self,<span class="string">'打开文本文件'</span>,<span class="string">'./'</span>)</span><br><span class="line">        <span class="keyword">if</span> fname[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">with</span> open(fname[<span class="number">0</span>],<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>,errors = <span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                self.editor.setText(f.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示打印设置对话框</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showSettingsDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        printDialog = QPageSetupDialog(self.printer,self)</span><br><span class="line">        printDialog.exec()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示打印对话框</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showPrintDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        printdialog = QPrintDialog(self.printer,self)</span><br><span class="line">        <span class="keyword">if</span> QDialog.Accepted == printdialog.exec():</span><br><span class="line">            self.editor.print(self.printer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    gui = PrintDialog()</span><br><span class="line">    gui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>## 容器控件<br>### 选项卡控件（QTabWidget）<br><strong>Presentation</strong><br><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/TabWidgetDemo.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabWidgetDemo</span><span class="params">(QTabWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(TabWidgetDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"选项卡控件：QTabWidget"</span>)</span><br><span class="line">        <span class="comment"># 创建用于显示控件的窗口</span></span><br><span class="line">        self.tab1 = QWidget()</span><br><span class="line">        self.tab2 = QWidget()</span><br><span class="line">        self.tab3 = QWidget()</span><br><span class="line"></span><br><span class="line">        self.addTab(self.tab1,<span class="string">'选项卡1'</span>)</span><br><span class="line">        self.addTab(self.tab2,<span class="string">'选项卡2'</span>)</span><br><span class="line">        self.addTab(self.tab3,<span class="string">'选项卡3'</span>)</span><br><span class="line"></span><br><span class="line">        self.tab1UI()</span><br><span class="line">        self.tab2UI()</span><br><span class="line">        self.tab3UI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab1UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        layout.addRow(<span class="string">'姓名'</span>,QLineEdit())</span><br><span class="line">        layout.addRow(<span class="string">'地址'</span>,QLineEdit())</span><br><span class="line">        self.setTabText(<span class="number">0</span>,<span class="string">'联系方式'</span>)</span><br><span class="line">        self.tab1.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab2UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        sex = QHBoxLayout()</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'男'</span>))</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'女'</span>))</span><br><span class="line">        layout.addRow(QLabel(<span class="string">'性别'</span>),sex)</span><br><span class="line">        layout.addRow(<span class="string">'生日'</span>,QLineEdit())</span><br><span class="line">        self.setTabText(<span class="number">1</span>,<span class="string">'个人详细信息'</span>)</span><br><span class="line">        self.tab2.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab3UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(QLabel(<span class="string">'科目'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'物理'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'高数'</span>))</span><br><span class="line">        self.setTabText(<span class="number">2</span>,<span class="string">'教育程度'</span>)</span><br><span class="line">        self.tab3.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = TabWidgetDemo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="堆栈窗口控件（QStackedWidget）"><a href="#堆栈窗口控件（QStackedWidget）" class="headerlink" title="堆栈窗口控件（QStackedWidget）"></a>堆栈窗口控件（QStackedWidget）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QStackedWidget.png" width="500"><br></center><ul><li><p>要点说明</p><ul><li>左侧 <code>QListWidget()</code> ；右侧 <code>QStackedWidget()</code>   </li><li><p><code>self.list.currentRowChanged.connect(self.display)</code></p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self,index)</span>:</span></span><br><span class="line">   self.stack.setCurrentIndex(index)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackedExample</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(StackedExample, self).__init__()</span><br><span class="line">        self.setGeometry(<span class="number">300</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'堆栈窗口控件（QStackedWidget）'</span>)</span><br><span class="line"></span><br><span class="line">        self.list = QListWidget()</span><br><span class="line">        self.list.insertItem(<span class="number">0</span>,<span class="string">'联系方式'</span>)</span><br><span class="line">        self.list.insertItem(<span class="number">1</span>,<span class="string">'个人信息'</span>)</span><br><span class="line">        self.list.insertItem(<span class="number">2</span>,<span class="string">'教育程度'</span>)</span><br><span class="line"></span><br><span class="line">        self.stack1 = QWidget()</span><br><span class="line">        self.stack2 = QWidget()</span><br><span class="line">        self.stack3 = QWidget()</span><br><span class="line"></span><br><span class="line">        self.tab1UI()</span><br><span class="line">        self.tab2UI()</span><br><span class="line">        self.tab3UI()</span><br><span class="line"></span><br><span class="line">        self.stack = QStackedWidget()</span><br><span class="line">        self.stack.addWidget(self.stack1)</span><br><span class="line">        self.stack.addWidget(self.stack2)</span><br><span class="line">        self.stack.addWidget(self.stack3)</span><br><span class="line"></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addWidget(self.list)</span><br><span class="line">        hbox.addWidget(self.stack)</span><br><span class="line">        self.setLayout(hbox)</span><br><span class="line"></span><br><span class="line">        self.list.currentRowChanged.connect(self.display)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab1UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        layout.addRow(<span class="string">'姓名'</span>,QLineEdit())</span><br><span class="line">        layout.addRow(<span class="string">'地址'</span>,QLineEdit())</span><br><span class="line">        self.stack1.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab2UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        sex = QHBoxLayout()</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'男'</span>))</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">'女'</span>))</span><br><span class="line">        layout.addRow(QLabel(<span class="string">'性别'</span>),sex)</span><br><span class="line">        layout.addRow(<span class="string">'生日'</span>,QLineEdit())</span><br><span class="line">        self.stack2.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tab3UI</span><span class="params">(self)</span>:</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(QLabel(<span class="string">'科目'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'物理'</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">'高数'</span>))</span><br><span class="line">        self.stack3.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self,index)</span>:</span></span><br><span class="line">        self.stack.setCurrentIndex(index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = StackedExample()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="停靠控件（QDockWidget）"><a href="#停靠控件（QDockWidget）" class="headerlink" title="停靠控件（QDockWidget）"></a>停靠控件（QDockWidget）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QDockWidget.png" width="500"><br></center><ul><li><p>实例化： <code>self.items = QDockWidget(&#39;Dockable&#39;,self)</code></p></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DockDemo</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(DockDemo, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"停靠控件（QDockWidget）"</span>)</span><br><span class="line">        self.setCentralWidget(QLineEdit())</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.items = QDockWidget(<span class="string">'Dockable'</span>,self)</span><br><span class="line"></span><br><span class="line">        self.listWidget = QListWidget()</span><br><span class="line">        self.listWidget.addItem(<span class="string">'item1'</span>)</span><br><span class="line">        self.listWidget.addItem(<span class="string">'item2'</span>)</span><br><span class="line">        self.listWidget.addItem(<span class="string">'item3'</span>)</span><br><span class="line"></span><br><span class="line">        self.items.setWidget(self.listWidget)</span><br><span class="line"></span><br><span class="line">        self.items.setFloating(<span class="keyword">True</span>) <span class="comment"># 初始时为浮动状态</span></span><br><span class="line"></span><br><span class="line">        self.addDockWidget(Qt.RightDockWidgetArea,self.items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = DockDemo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="容纳多文档的窗口"><a href="#容纳多文档的窗口" class="headerlink" title="容纳多文档的窗口"></a>容纳多文档的窗口</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/MultiWindows.png" width="500"><br></center><ul><li>要点说明： <code>QMdiArea</code>  、  <code>QMdiSubWindow</code></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiWindows</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(MultiWindows, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"容纳多文档的窗口"</span>)</span><br><span class="line">        self.mdi = QMdiArea()</span><br><span class="line">        self.setCentralWidget(self.mdi)</span><br><span class="line"></span><br><span class="line">        bar = self.menuBar()</span><br><span class="line">        file = bar.addMenu(<span class="string">"File"</span>)</span><br><span class="line">        file.addAction(<span class="string">"New"</span>)</span><br><span class="line">        file.addAction(<span class="string">"cascade"</span>)</span><br><span class="line">        file.addAction(<span class="string">"Tiled"</span>)</span><br><span class="line"></span><br><span class="line">        file.triggered.connect(self.windowaction)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">windowaction</span><span class="params">(self,q)</span>:</span></span><br><span class="line">        print(q.text())</span><br><span class="line">        <span class="keyword">if</span> q.text() == <span class="string">"New"</span>:</span><br><span class="line">            MultiWindows.count = MultiWindows.count + <span class="number">1</span></span><br><span class="line">            sub = QMdiSubWindow()</span><br><span class="line">            sub.setWidget(QTextEdit())</span><br><span class="line">            sub.setWindowTitle(<span class="string">"子窗口"</span> + str(MultiWindows.count))</span><br><span class="line">            self.mdi.addSubWindow(sub)</span><br><span class="line">            sub.show()</span><br><span class="line">        <span class="keyword">elif</span> q.text() == <span class="string">"cascade"</span>: <span class="comment"># 层叠</span></span><br><span class="line">            self.mdi.cascadeSubWindows()</span><br><span class="line">        <span class="keyword">elif</span> q.text() == <span class="string">"Tiled"</span>:  <span class="comment"># 平铺</span></span><br><span class="line">            self.mdi.tileSubWindows()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = MultiWindows()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="滚动条控件（QScrollBar）"><a href="#滚动条控件（QScrollBar）" class="headerlink" title="滚动条控件（QScrollBar）"></a>滚动条控件（QScrollBar）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/QScrollBar.png" width="500"><br></center><ul><li>QScrollBar的作用<ol><li>通过滚动条值的变化控制其他控件状态的变化</li><li>通过滚动条值的变化控制控件位置的变化</li></ol></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollBar</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ScrollBar, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        self.label = QLabel(<span class="string">'拖动滚动条去改变文字颜色'</span>)</span><br><span class="line"></span><br><span class="line">        hbox.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        self.scrollbar1 = QScrollBar()</span><br><span class="line">        self.scrollbar1.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar1.sliderMoved.connect(self.sliderMoved)</span><br><span class="line"></span><br><span class="line">        self.scrollbar2 = QScrollBar()</span><br><span class="line">        self.scrollbar2.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar2.sliderMoved.connect(self.sliderMoved)</span><br><span class="line"></span><br><span class="line">        self.scrollbar3 = QScrollBar()</span><br><span class="line">        self.scrollbar3.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar3.sliderMoved.connect(self.sliderMoved)</span><br><span class="line"></span><br><span class="line">        self.scrollbar4 = QScrollBar()</span><br><span class="line">        self.scrollbar4.setMaximum(<span class="number">255</span>)</span><br><span class="line">        self.scrollbar4.sliderMoved.connect(self.sliderMoved1)</span><br><span class="line">        </span><br><span class="line">        hbox.addWidget(self.scrollbar1)</span><br><span class="line">        hbox.addWidget(self.scrollbar2)</span><br><span class="line">        hbox.addWidget(self.scrollbar3)</span><br><span class="line">        hbox.addWidget(self.scrollbar4)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.setLayout(hbox)</span><br><span class="line"></span><br><span class="line">        self.y = self.label.pos().y()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sliderMoved</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.scrollbar1.value(),self.scrollbar2.value(),self.scrollbar3.value())</span><br><span class="line">        palette = QPalette()</span><br><span class="line">        c = QColor(self.scrollbar1.value(),self.scrollbar2.value(),self.scrollbar3.value(),<span class="number">255</span>)</span><br><span class="line">        palette.setColor(QPalette.Foreground,c)</span><br><span class="line">        self.label.setPalette(palette)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sliderMoved1</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.label.move(self.label.x(),self.y + self.scrollbar4.value())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = ScrollBar()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="动态显示当前时间（QTimer）"><a href="#动态显示当前时间（QTimer）" class="headerlink" title="动态显示当前时间（QTimer）"></a>动态显示当前时间（QTimer）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/ShowTime.png" width="500"><br></center><ul><li><p><code>self.timer = QTimer()</code>  # 计时器</p><ul><li><code>self.timer.start(1000)</code></li><li><code>self.timer.stop()</code></li></ul></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication, QGridLayout, QLabel</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer, QDateTime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowTime</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(ShowTime, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">"动态显示当前时间"</span>)</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(<span class="string">'显示当前时间'</span>)</span><br><span class="line">        self.startBtn = QPushButton(<span class="string">'开始'</span>)</span><br><span class="line">        self.endBtn = QPushButton(<span class="string">'结束'</span>)</span><br><span class="line">        layout= QGridLayout()</span><br><span class="line"></span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.timeout.connect(self.showTime)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(self.startBtn,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">        layout.addWidget(self.endBtn,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.startBtn.clicked.connect(self.startTimer)</span><br><span class="line">        self.endBtn.clicked.connect(self.endTimer)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showTime</span><span class="params">(self)</span>:</span></span><br><span class="line">        time = QDateTime.currentDateTime()</span><br><span class="line">        timeDisplay = time.toString(<span class="string">"yyyy-MM-dd hh:mm:ss dddd"</span>)</span><br><span class="line">        self.label.setText(timeDisplay)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.start(<span class="number">1000</span>)</span><br><span class="line">        self.startBtn.setEnabled(<span class="keyword">False</span>)</span><br><span class="line">        self.endBtn.setEnabled(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">endTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.stop()</span><br><span class="line">        self.startBtn.setEnabled(<span class="keyword">True</span>)</span><br><span class="line">        self.endBtn.setEnabled(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = ShowTime()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="让窗口定时关闭"><a href="#让窗口定时关闭" class="headerlink" title="让窗口定时关闭"></a>让窗口定时关闭</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/AutoCloseWindow.png" width="500"><br></center><ul><li><code>QTimer.singleShot(5000,app.quit)</code>  # 窗口在5秒后自动关闭!</li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    label = QLabel(<span class="string">'&lt;font color=red size=140&gt;&lt;b&gt;Hello World，窗口在5秒后自动关闭!&lt;/b&gt;&lt;/font&gt;'</span>)</span><br><span class="line">    label.setWindowFlags(Qt.SplashScreen | Qt.FramelessWindowHint) <span class="comment"># 闪屏 | 无框架窗口</span></span><br><span class="line">    label.show()</span><br><span class="line">    QTimer.singleShot(<span class="number">5000</span>,app.quit)</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="使用线程类（QThread）编写计数器"><a href="#使用线程类（QThread）编写计数器" class="headerlink" title="使用线程类（QThread）编写计数器"></a>使用线程类（QThread）编写计数器</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/27/PyQt5-Python-实战课程（六）/Counter.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sec = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span><span class="params">(QThread)</span>:</span>  <span class="comment"># 自定义信号</span></span><br><span class="line">    timer = pyqtSignal()</span><br><span class="line">    end = pyqtSignal()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            self.sleep(<span class="number">1</span>)  <span class="comment"># 休眠1秒</span></span><br><span class="line">            <span class="keyword">if</span> sec == <span class="number">5</span>:</span><br><span class="line">                self.end.emit()   <span class="comment"># 发送end信号，触发与end关联的槽方法，计数完成后发送一次信号</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.timer.emit()   <span class="comment"># 发送timer信号，每隔1秒发送一次信号</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></span><br><span class="line">        super(Counter, self).__init__(parent)</span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">"使用线程类（QThread）编写计数器"</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.lcdNumber = QLCDNumber()  <span class="comment"># 模拟LED的数字显示效果</span></span><br><span class="line">        layout.addWidget(self.lcdNumber)</span><br><span class="line"></span><br><span class="line">        button = QPushButton(<span class="string">'开始计数'</span>)</span><br><span class="line">        layout.addWidget(button)</span><br><span class="line"></span><br><span class="line">        self.workThread = WorkThread()</span><br><span class="line"></span><br><span class="line">        self.workThread.timer.connect(self.countTime)</span><br><span class="line">        self.workThread.end.connect(self.end)</span><br><span class="line">        button.clicked.connect(self.work)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countTime</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> sec</span><br><span class="line">        sec += <span class="number">1</span></span><br><span class="line">        self.lcdNumber.display(sec)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        QMessageBox.information(self,<span class="string">'消息'</span>,<span class="string">'计数结束'</span>,QMessageBox.Ok)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.workThread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = Counter()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（五）</title>
    <link href="http://yoursite.com/2019/01/26/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/26/PyQt5-Python-实战课程（五）/</id>
    <published>2019-01-26T14:45:28.000Z</published>
    <updated>2019-02-23T12:29:48.873Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="绘图API"><a href="#绘图API" class="headerlink" title="绘图API"></a>绘图API</h2><p>绘图类型</p><ol><li>文本</li><li>各种图形（直线，点，椭圆，弧，扇形，多边形等）</li><li>图像</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般的绘制过程：必须在paintEvent事件方法中绘制各种元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">    painter = QPainter()    </span><br><span class="line"></span><br><span class="line">    painter.begin(self)</span><br><span class="line"></span><br><span class="line">    painter.drawText(...)</span><br><span class="line">    </span><br><span class="line">    painter.end()</span><br></pre></td></tr></table></figure><h3 id="在窗口上绘制直线"><a href="#在窗口上绘制直线" class="headerlink" title="在窗口上绘制直线"></a>在窗口上绘制直线</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawText.png" width="500"><br></center><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter,QColor,QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawText</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawText,self).__init__()</span><br><span class="line">        self.setWindowTitle(<span class="string">'在窗口上绘制文本'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line">        self.text = <span class="string">"Python从菜鸟到高手"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span> <span class="comment"># 伸缩窗口大小时，该方法会不断调用</span></span><br><span class="line">        painter = QPainter(self)</span><br><span class="line">        painter.begin(self)</span><br><span class="line">        painter.setPen(QColor(<span class="number">150</span>,<span class="number">43</span>,<span class="number">5</span>)) <span class="comment">#设置画笔颜色</span></span><br><span class="line">        painter.setFont(QFont(<span class="string">'SimSun'</span>,<span class="number">25</span>)) <span class="comment">#设置字体、大小</span></span><br><span class="line"></span><br><span class="line">        painter.drawText(event.rect(),Qt.Aligncenter,self.text) <span class="comment"># 设置绘制区域</span></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawText()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用像素点绘制正弦曲线"><a href="#用像素点绘制正弦曲线" class="headerlink" title="用像素点绘制正弦曲线"></a>用像素点绘制正弦曲线</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawPoints.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">painter.drawPoint(x,y)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawPoints</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawPoints,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'在窗口上用像素点绘制2个周期的正弦曲线'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter()</span><br><span class="line">        painter.begin(self)</span><br><span class="line">        painter.setPen(Qt.blue)</span><br><span class="line">        size = self.size()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            x = <span class="number">100</span> * (<span class="number">-1</span> + <span class="number">2.0</span> * i/<span class="number">1000</span>) + size.width()/<span class="number">2.0</span></span><br><span class="line">            y = <span class="number">-50</span> * math.sin((x - size.width()/<span class="number">2.0</span>) * math.pi/<span class="number">50</span>) + size.height()/<span class="number">2.0</span></span><br><span class="line">            painter.drawPoint(x,y)  <span class="comment"># x ∈ (-2PI, 2PI)</span></span><br><span class="line"></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawPoints()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="绘制不同类型的直线"><a href="#绘制不同类型的直线" class="headerlink" title="绘制不同类型的直线"></a>绘制不同类型的直线</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawMultiLine.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pen.setStyle(Qt.SolidLine) <span class="comment"># or Qt.DashLine or Qt.DashDotDotLine or Qt.DotLine or CustomDashLine etc.</span></span><br><span class="line">painter.setPen(pen)</span><br><span class="line">painter.drawLine(start_x, start_y, end_x, end_y)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMultiLine</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawMultiLine,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置Pen的样式'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        painter = QPainter()</span><br><span class="line">        painter.begin(self)</span><br><span class="line"></span><br><span class="line">        pen = QPen(Qt.red,<span class="number">3</span>,Qt.SolidLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>,<span class="number">40</span>,<span class="number">250</span>,<span class="number">40</span>) <span class="comment"># (start_x, start_y, end_x, end_y)</span></span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DashLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">250</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DashDotDotLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">120</span>, <span class="number">250</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DotLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">160</span>, <span class="number">250</span>, <span class="number">160</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.DashDotDotLine)</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        pen.setStyle(Qt.CustomDashLine)</span><br><span class="line">        pen.setDashPattern([<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line">        painter.setPen(pen)</span><br><span class="line">        painter.drawLine(<span class="number">20</span>, <span class="number">240</span>, <span class="number">250</span>, <span class="number">240</span>)</span><br><span class="line"></span><br><span class="line">        size = self.size()</span><br><span class="line"></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawMultiLine()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="绘制各种图形"><a href="#绘制各种图形" class="headerlink" title="绘制各种图形"></a>绘制各种图形</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/DrawAll.png" width="500"><br></center><ul><li>类型<ol><li>弧</li><li>圆形</li><li>椭圆</li><li>矩形（正方形）</li><li>多边形</li><li>绘制图像</li></ol></li></ul><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawAll</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DrawAll,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">600</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'绘制各种图形'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qp = QPainter()</span><br><span class="line"></span><br><span class="line">        qp.begin(self)</span><br><span class="line"></span><br><span class="line">        qp.setPen(Qt.blue)</span><br><span class="line">        <span class="comment"># 绘制弧</span></span><br><span class="line">        rect = QRect(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># alen: 1个alen等于1/16度   45 * 16</span></span><br><span class="line">        qp.drawArc(rect,<span class="number">0</span>, <span class="number">50</span> * <span class="number">16</span>)</span><br><span class="line">        </span><br><span class="line">        qp.setPen(Qt.red)</span><br><span class="line">        <span class="comment"># 通过弧绘制圆</span></span><br><span class="line">        qp.drawArc(<span class="number">120</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>, <span class="number">360</span> * <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 绘制带弦的弧</span></span><br><span class="line">        qp.drawChord(<span class="number">10</span>,<span class="number">120</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">12</span>,<span class="number">130</span>*<span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 绘制扇形</span></span><br><span class="line">        qp.drawPie(<span class="number">10</span>,<span class="number">240</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">12</span>,<span class="number">130</span>*<span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 椭圆</span></span><br><span class="line">        qp.drawEllipse(<span class="number">120</span>,<span class="number">120</span>,<span class="number">150</span>,<span class="number">100</span>)</span><br><span class="line">        <span class="comment"># 绘制5边形</span></span><br><span class="line">        point1 = QPoint(<span class="number">140</span>,<span class="number">380</span>)</span><br><span class="line">        point2 = QPoint(<span class="number">270</span>,<span class="number">420</span>)</span><br><span class="line">        point3 = QPoint(<span class="number">290</span>,<span class="number">512</span>)</span><br><span class="line">        point4 = QPoint(<span class="number">290</span>,<span class="number">588</span>)</span><br><span class="line">        point5 = QPoint(<span class="number">200</span>,<span class="number">533</span>)</span><br><span class="line">        polygon = QPolygon([point1,point2,point3,point4,point5])</span><br><span class="line">        qp.drawPolygon(polygon)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制图像</span></span><br><span class="line">        image = QImage(<span class="string">'./images/book1.png'</span>)</span><br><span class="line">        rect = QRect(<span class="number">10</span>, <span class="number">400</span>, image.width()/<span class="number">3</span>, image.height()/<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#image.save('./images/book1.png')</span></span><br><span class="line">        qp.drawImage(rect,image)</span><br><span class="line"></span><br><span class="line">        qp.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawAll()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用画刷填充图形区域"><a href="#用画刷填充图形区域" class="headerlink" title="用画刷填充图形区域"></a>用画刷填充图形区域</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（五）/FillRect.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">brush = QBrush(Qt.SolidPattern) <span class="comment"># or Qt.Dense1Pattern or Qt.Dense2Pattern or Qt.Dense3Pattern or Qt.HorPattern etc.</span></span><br><span class="line">qp.setBrush(brush)</span><br><span class="line">qp.drawRect(x, y, width, height)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FillRect</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(FillRect,self).__init__()</span><br><span class="line">        self.resize(<span class="number">500</span>,<span class="number">260</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'用画刷填充区域'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self,e)</span>:</span></span><br><span class="line">        qp = QPainter()</span><br><span class="line">        qp.begin(self)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.SolidPattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">10</span>,<span class="number">15</span>,<span class="number">90</span>,<span class="number">60</span>) <span class="comment"># (x, y, width, height)</span></span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.Dense1Pattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">130</span>,<span class="number">15</span>,<span class="number">90</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.Dense2Pattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">250</span>,<span class="number">15</span>,<span class="number">90</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.Dense3Pattern)</span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">10</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        brush = QBrush(Qt.HorPattern) <span class="comment"># Hor - Horizontal</span></span><br><span class="line">        qp.setBrush(brush)</span><br><span class="line">        qp.drawRect(<span class="number">130</span>, <span class="number">105</span>, <span class="number">90</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        qp.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = FillRect()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5-Python-实战课程（四）</title>
    <link href="http://yoursite.com/2019/01/26/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/26/PyQt5-Python-实战课程（四）/</id>
    <published>2019-01-26T11:54:42.000Z</published>
    <updated>2019-02-23T12:16:01.067Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="对话框-QDialog"><a href="#对话框-QDialog" class="headerlink" title="对话框 QDialog"></a>对话框 QDialog</h2><ul><li><p>对话框类型</p><ul><li>QMessageBox </li><li>QColorDialog</li><li>QFileDialog</li><li>QFontDialog</li><li>QInputDialog</li></ul></li><li><p>窗口类型</p><ul><li>QMainWindow</li><li>QWidget</li><li>QDialog</li></ul></li></ul><h3 id="使用QDialog显示通用对话框"><a href="#使用QDialog显示通用对话框" class="headerlink" title="使用QDialog显示通用对话框"></a>使用QDialog显示通用对话框</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QDialogDemo.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = QDialog()</span><br><span class="line">        dialog.setWindowTitle(<span class="string">'对话框'</span>)</span><br><span class="line">        dialog.setWindowModality(Qt.ApplicationModal) <span class="comment"># 原窗口不可操作</span></span><br><span class="line">        button = QPushButton(<span class="string">'确定'</span>,dialog)</span><br><span class="line">        button.clicked.connect(dialog.close)</span><br><span class="line">        button.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        dialog.exec()</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QDialogDemo</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QDialog案例'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(self)</span><br><span class="line">        self.button.setText(<span class="string">'弹出对话框'</span>)</span><br><span class="line">        self.button.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        self.button.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = QDialog()</span><br><span class="line">        dialog.setWindowTitle(<span class="string">'对话框'</span>)</span><br><span class="line">        dialog.setWindowModality(Qt.ApplicationModal) <span class="comment"># 原窗口不可操作</span></span><br><span class="line">        button = QPushButton(<span class="string">'确定'</span>,dialog)</span><br><span class="line">        button.clicked.connect(dialog.close)</span><br><span class="line">        button.move(<span class="number">50</span>,<span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        dialog.exec()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="显示不同类型的消息对话框"><a href="#显示不同类型的消息对话框" class="headerlink" title="显示不同类型的消息对话框"></a>显示不同类型的消息对话框</h3><p><strong>Presentation</strong></p><center><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox1.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox2.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox3.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox4.png" width="255"><br><img src="/2019/01/26/PyQt5-Python-实战课程（四）/QMessageBox5.png" width="255"><br></center><ul><li>消息对话框：QMessageBox<ol><li>关于对话框</li><li>错误对话框</li><li>警告对话框</li><li>提问对话框</li><li>消息对话框</li></ol></li><li>有2点差异<ol><li>显示的对话框图标可能不同</li><li>显示的按钮是不一样的</li></ol></li></ul><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QMessageBox.about(self,<span class="string">'about'</span>,<span class="string">'这是一个关于对话框'</span>)</span><br><span class="line">QMessageBox.information(self,<span class="string">'information'</span>,<span class="string">'这是一个消息对话框'</span>, QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">QMessageBox.warning(self,<span class="string">'warning'</span>,<span class="string">'这是一个警告对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">QMessageBox.critical(self,<span class="string">'critical'</span>,<span class="string">'这是一个错误对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">QMessageBox.question(self,<span class="string">'question'</span>,<span class="string">'这是一个提问对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QMessageBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QMessageBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QMessageBox案例'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.button1 = QPushButton()</span><br><span class="line">        self.button1.setText(<span class="string">'显示关于对话框'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton()</span><br><span class="line">        self.button2.setText(<span class="string">'显示消息对话框'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        self.button3 = QPushButton()</span><br><span class="line">        self.button3.setText(<span class="string">'显示警告对话框'</span>)</span><br><span class="line">        self.button3.clicked.connect(self.showDialog)</span><br><span class="line">        </span><br><span class="line">        self.button4 = QPushButton()</span><br><span class="line">        self.button4.setText(<span class="string">'显示错误对话框'</span>)</span><br><span class="line">        self.button4.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        self.button5 = QPushButton()</span><br><span class="line">        self.button5.setText(<span class="string">'显示提问对话框'</span>)</span><br><span class="line">        self.button5.clicked.connect(self.showDialog)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line">        layout.addWidget(self.button3)</span><br><span class="line">        layout.addWidget(self.button4)</span><br><span class="line">        layout.addWidget(self.button5)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showDialog</span><span class="params">(self)</span>:</span></span><br><span class="line">        text = self.sender().text()</span><br><span class="line">        <span class="keyword">if</span> text == <span class="string">'显示关于对话框'</span>:</span><br><span class="line">            QMessageBox.about(self,<span class="string">'about'</span>,<span class="string">'这是一个关于对话框'</span>)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示消息对话框'</span>:</span><br><span class="line">            reply = QMessageBox.information(self,<span class="string">'information'</span>,<span class="string">'这是一个消息对话框'</span>, QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">            print(reply == QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示警告对话框'</span>:</span><br><span class="line">            QMessageBox.warning(self,<span class="string">'warning'</span>,<span class="string">'这是一个警告对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示错误对话框'</span>:</span><br><span class="line">            QMessageBox.critical(self,<span class="string">'critical'</span>,<span class="string">'这是一个错误对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">'显示提问对话框'</span>:</span><br><span class="line">            QMessageBox.question(self,<span class="string">'question'</span>,<span class="string">'这是一个提问对话框'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QMessageBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="用于输入列表、文本和数字的输入对话框"><a href="#用于输入列表、文本和数字的输入对话框" class="headerlink" title="用于输入列表、文本和数字的输入对话框"></a>用于输入列表、文本和数字的输入对话框</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo.png" width="500"><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo1.png" width="255"><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo2.png" width="255"><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QInputDialogDemo3.png" width="255"><br></center><ul><li><p>输入对话框：QInputDialog</p><ul><li>QInputDialog.getItem</li><li>QInputDialog.getText</li><li>QInputDialog.getInt</li></ul></li><li><p>重点方法</p><ul><li><code>item, ok =QInputDialog.getItem(self,&#39;请选择编程语言&#39;,&#39;语言列表&#39;,items)</code></li><li><code>text, ok =QInputDialog.getText(self,&#39;文本输入框&#39;,&#39;输入姓名&#39;)</code></li><li><code>num, ok =QInputDialog.getInt(self,&#39;整数输入框&#39;,&#39;输入数字&#39;)</code></li></ul></li><li><p>完整代码</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QInputDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QInputDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'输入对话框'</span>)</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'获取列表中的选项'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.getItem)</span><br><span class="line">        self.lineEdit1 = QLineEdit()</span><br><span class="line">        layout.addRow(self.button1, self.lineEdit1)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'获取字符串'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.getText)</span><br><span class="line">        self.lineEdit2 = QLineEdit()</span><br><span class="line">        layout.addRow(self.button2, self.lineEdit2)</span><br><span class="line"></span><br><span class="line">        self.button3 = QPushButton(<span class="string">'获取整数'</span>)</span><br><span class="line">        self.button3.clicked.connect(self.getInt)</span><br><span class="line">        self.lineEdit3 = QLineEdit()</span><br><span class="line">        layout.addRow(self.button3, self.lineEdit3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getItem</span><span class="params">(self)</span>:</span></span><br><span class="line">        items = (<span class="string">'C'</span>,<span class="string">'C++'</span>,<span class="string">'Ruby'</span>,<span class="string">'Python'</span>,<span class="string">'Java'</span>)</span><br><span class="line">        item, ok =QInputDialog.getItem(self,<span class="string">'请选择编程语言'</span>,<span class="string">'语言列表'</span>,items)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> item:</span><br><span class="line">            self.lineEdit1.setText(item)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getText</span><span class="params">(self)</span>:</span></span><br><span class="line">        text, ok =QInputDialog.getText(self,<span class="string">'文本输入框'</span>,<span class="string">'输入姓名'</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> text:</span><br><span class="line">            self.lineEdit2.setText(text)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInt</span><span class="params">(self)</span>:</span></span><br><span class="line">        num, ok =QInputDialog.getInt(self,<span class="string">'整数输入框'</span>,<span class="string">'输入数字'</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> num:</span><br><span class="line">            self.lineEdit3.setText(str(num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QInputDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="字体对话框（QFontDialog）"><a href="#字体对话框（QFontDialog）" class="headerlink" title="字体对话框（QFontDialog）"></a>字体对话框（QFontDialog）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QFontDialogDemo.png" width="500"><br></center><ul><li>重点方法：<code>font, ok = QFontDialog.getFont()</code></li><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFontDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QFontDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'Font Dialog例子'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.fontButton = QPushButton(<span class="string">'选择字体'</span>)</span><br><span class="line">        self.fontButton.clicked.connect(self.getFont)</span><br><span class="line">        layout.addWidget(self.fontButton)</span><br><span class="line"></span><br><span class="line">        self.fontLabel = QLabel(<span class="string">'Hello，测试字体例子'</span>)</span><br><span class="line">        layout.addWidget(self.fontLabel)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getFont</span><span class="params">(self)</span>:</span></span><br><span class="line">        font, ok = QFontDialog.getFont()</span><br><span class="line">        <span class="keyword">if</span> ok :</span><br><span class="line">            self.fontLabel.setFont(font)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QFontDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="颜色对话框（QColorDialog）"><a href="#颜色对话框（QColorDialog）" class="headerlink" title="颜色对话框（QColorDialog）"></a>颜色对话框（QColorDialog）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QColorDialogDemo.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p= QPalette()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体颜色</span></span><br><span class="line">p.setColor(QPalette.WindowText,color)</span><br><span class="line"><span class="comment"># 设置背景颜色</span></span><br><span class="line">p.setColor(QPalette.Window,color)</span><br><span class="line">self.colorLabel.setAutoFillBackground(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">self.colorLabel.setPalette(p) <span class="comment"># 设置调色板（必要）</span></span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QColorDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QColorDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'Color Dialog例子'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.colorButton = QPushButton(<span class="string">'设置颜色'</span>)</span><br><span class="line">        self.colorButton.clicked.connect(self.getColor)</span><br><span class="line">        layout.addWidget(self.colorButton)</span><br><span class="line"></span><br><span class="line">        self.colorButton1 = QPushButton(<span class="string">'设置背景颜色'</span>)</span><br><span class="line">        self.colorButton1.clicked.connect(self.getBGColor)</span><br><span class="line">        layout.addWidget(self.colorButton1)</span><br><span class="line"></span><br><span class="line">        self.colorLabel = QLabel(<span class="string">'Hello，测试颜色例子'</span>)</span><br><span class="line">        layout.addWidget(self.colorLabel)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getColor</span><span class="params">(self)</span>:</span></span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        p = QPalette()</span><br><span class="line">        p.setColor(QPalette.WindowText,color)</span><br><span class="line">        self.colorLabel.setPalette(p)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBGColor</span><span class="params">(self)</span>:</span>   <span class="comment"># 仅修改背景颜色，字体颜色为默认值</span></span><br><span class="line">        color = QColorDialog.getColor()</span><br><span class="line">        p = QPalette()</span><br><span class="line">        p.setColor(QPalette.Window,color)</span><br><span class="line">        self.colorLabel.setAutoFillBackground(<span class="keyword">True</span>)</span><br><span class="line">        self.colorLabel.setPalette(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QColorDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="文件对话框（QFileDialog）"><a href="#文件对话框（QFileDialog）" class="headerlink" title="文件对话框（QFileDialog）"></a>文件对话框（QFileDialog）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/26/PyQt5-Python-实战课程（四）/QFileDialogDemo.png" width="500"><br></center><ul><li>重点代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadImage</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line">    <span class="comment"># '打开文件'：caption  '.'：当前路径  '图像文件(*.jpg *.png)'：文件类型的过滤</span></span><br><span class="line">    fname,_ = QFileDialog.getOpenFileName(self,<span class="string">'打开文件'</span>,<span class="string">'.'</span>,<span class="string">'图像文件(*.jpg *.png)'</span>)  </span><br><span class="line">    self.imageLabel.setPixmap(QPixmap(fname))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadText</span><span class="params">(self)</span>:</span></span><br><span class="line">    dialog = QFileDialog() <span class="comment"># 方法二 ，区别于上述的静态方法</span></span><br><span class="line">    dialog.setFileMode(QFileDialog.AnyFile) <span class="comment"># 可选中任意类型的文件</span></span><br><span class="line">    dialog.setFilter(QDir.Files) <span class="comment"># 过滤器 （可选中文件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dialog.exec(): <span class="comment">#打开对话框</span></span><br><span class="line">        filenames = dialog.selectedFiles() </span><br><span class="line">        f = open(filenames[<span class="number">0</span>],encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">        <span class="keyword">with</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            self.contents.setText(data)</span><br></pre></td></tr></table></figure><ul><li>完整代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFileDialogDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QFileDialogDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.setWindowTitle(<span class="string">'文件对话框演示 '</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.button1 = QPushButton(<span class="string">'加载图片'</span>)</span><br><span class="line">        self.button1.clicked.connect(self.loadImage)</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        self.imageLabel = QLabel()</span><br><span class="line">        layout.addWidget(self.imageLabel)</span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'加载文本文件'</span>)</span><br><span class="line">        self.button2.clicked.connect(self.loadText)</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line"></span><br><span class="line">        self.contents = QTextEdit()</span><br><span class="line">        layout.addWidget(self.contents)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadImage</span><span class="params">(self)</span>:</span></span><br><span class="line">        fname,_ = QFileDialog.getOpenFileName(self,<span class="string">'打开文件'</span>,<span class="string">'.'</span>,<span class="string">'图像文件(*.jpg *.png)'</span>)</span><br><span class="line">        self.imageLabel.setPixmap(QPixmap(fname))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadText</span><span class="params">(self)</span>:</span></span><br><span class="line">        dialog = QFileDialog()</span><br><span class="line">        dialog.setFileMode(QFileDialog.AnyFile)</span><br><span class="line">        dialog.setFilter(QDir.Files)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dialog.exec():</span><br><span class="line">            filenames = dialog.selectedFiles()</span><br><span class="line">            f = open(filenames[<span class="number">0</span>],encoding=<span class="string">'utf-8'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">            <span class="keyword">with</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">                self.contents.setText(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QFileDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（三）</title>
    <link href="http://yoursite.com/2019/01/24/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/24/PyQt5-Python-实战课程（三）/</id>
    <published>2019-01-24T13:20:27.000Z</published>
    <updated>2019-02-23T09:15:10.429Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="基本窗口控件-code"><a href="#基本窗口控件-code" class="headerlink" title="基本窗口控件 code"></a>基本窗口控件 <a href="https://github.com/Captainzj/PyQt5_Practice/tree/master/src/Chapter-3" target="_blank" rel="noopener"><code>code</code></a></h2><h3 id="创建主窗口"><a href="#创建主窗口" class="headerlink" title="创建主窗口"></a>创建主窗口</h3><ul><li>窗口类型：<code>QMainWindow</code>、<code>QDialog</code>、<code>QWidget</code><ul><li>QMainWindow：可以包含菜单栏、工具栏、状态栏和标题栏，是最常见的窗口形式</li><li>QDialog：是对话窗口的基类。没有菜单栏、工具栏、状态栏。</li><li>QWidget：不确定窗口的用途，就使用QWidget。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow,QApplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstMainWin</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(FirstMainWin, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __init__(self,parent=None):</span></span><br><span class="line">    <span class="comment">#     super(FirstMainWin,self).__init__(parent)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'第一个主窗口应用'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        self.status = self.statusBar()</span><br><span class="line">        self.status.showMessage(<span class="string">'只存在5s的消息'</span>,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(<span class="string">'./images/Crayon03_64px.ico'</span>))</span><br><span class="line"></span><br><span class="line">    main = FirstMainWin()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="让主窗口居中显示"><a href="#让主窗口居中显示" class="headerlink" title="让主窗口居中显示"></a>让主窗口居中显示</h3><ol start="0"><li><code>import QDesktopWidget</code></li><li>手动计算<code>newLeft</code>和<code>newTop</code></li><li>调用<code>self.move(newLeft, newTop)</code>移动（居中）窗口</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QDesktopWidget</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QDesktopWidget,QMainWindow,QApplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenterForm</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(CenterForm, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'让窗口居中'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取屏幕坐标系</span></span><br><span class="line">        screen = QDesktopWidget().screenGeometry()</span><br><span class="line">        <span class="comment"># 获取窗口坐标系</span></span><br><span class="line">        size = self.geometry()</span><br><span class="line">        newLeft = (screen.width() - size.width()) / <span class="number">2</span></span><br><span class="line">        newTop = (screen.height() - size.height()) /<span class="number">2</span></span><br><span class="line"></span><br><span class="line">        self.move(newLeft,newTop)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = CenterForm()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="退出应用程序"><a href="#退出应用程序" class="headerlink" title="退出应用程序"></a>退出应用程序</h3><p><strong>Presentation</strong></p><center><br>    <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QuitApplication.png" style="zoom:50%"><br></center><br>上一节讲过可视化操作的方法，此处讲解代码的相关实现.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QPushButton,QWidget</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuitApplication</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        super(QuitApplication,self).__init__()</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">120</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'QuitApplication'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 添加Button</span></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'QuitApplication'</span>)</span><br><span class="line">        <span class="comment"># 将信号与槽关联</span></span><br><span class="line">        self.button1.clicked.connect(self.onClick_Button)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按钮单击事件的方法（自定义的槽）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onClick_Button</span><span class="params">(self)</span>:</span></span><br><span class="line">        sender = self.sender()</span><br><span class="line">        print(sender.text()+<span class="string">'按钮被按下'</span>)</span><br><span class="line">        app = QApplication.instance()</span><br><span class="line">        <span class="comment"># 退出应用程序</span></span><br><span class="line">        app.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = QuitApplication()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 屏幕坐标系<br>原点位于屏幕左上角.<br>使用API获取尺寸<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QPushButton,QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onClick_Button</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Method 1"</span>)</span><br><span class="line">    print(<span class="string">"widget.x() = %d"</span> % widget.x())   <span class="comment"># 250 (窗口横坐标)</span></span><br><span class="line">    print(<span class="string">"widget.y() = %d"</span> % widget.y())   <span class="comment"># 200（窗口纵坐标）</span></span><br><span class="line">    print(<span class="string">"widget.width() = %d"</span> % widget.width())   <span class="comment"># 300（工作区宽度）</span></span><br><span class="line">    print(<span class="string">"widget.height() = %d"</span> % widget.height()) <span class="comment"># 240（工作区高度）</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Method 2"</span>)</span><br><span class="line">    print(<span class="string">"widget.geometry().x() = %d"</span> % widget.geometry().x())  <span class="comment"># 250 (窗口横坐标)</span></span><br><span class="line">    print(<span class="string">"widget.geometry().y() = %d"</span> % widget.geometry().y()) <span class="comment"># 222（窗口纵坐标，不含标题栏）  # 标题栏的高度：22 (MacOS)</span></span><br><span class="line">    print(<span class="string">"widget.geometry().width() = %d"</span> % widget.geometry().width()) <span class="comment"># 300（工作区宽度）</span></span><br><span class="line">    print(<span class="string">"widget.geometry().height() = %d"</span> % widget.geometry().height()) <span class="comment"># 240（工作区高度）</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Method 3"</span>)</span><br><span class="line">    print(<span class="string">"widget.frameGeometry().x() = %d"</span> % widget.frameGeometry().x()) <span class="comment"># 250 (窗口横坐标)</span></span><br><span class="line">    print(<span class="string">"widget.frameGeometry().y() = %d"</span> % widget.frameGeometry().y()) <span class="comment"># 200（窗口纵坐标）</span></span><br><span class="line">    print(<span class="string">"widget.frameGeometry().width() = %d"</span> % widget.frameGeometry().width()) <span class="comment"># 300（工作区宽度）</span></span><br><span class="line">    print(<span class="string">"widget.frameGeometry().height() = %d"</span> % widget.frameGeometry().height()) <span class="comment"># 262（工作区高度,含标题栏） # 标题栏的高度：22 (MacOS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">widget = QWidget()</span><br><span class="line"></span><br><span class="line">widget.resize(<span class="number">400</span>,<span class="number">240</span>)  <span class="comment"># 240: 设置工作区的高度</span></span><br><span class="line">widget.setWindowTitle(<span class="string">'屏幕坐标系'</span>)</span><br><span class="line"></span><br><span class="line">btn = QPushButton(widget)</span><br><span class="line">btn.move(<span class="number">24</span>,<span class="number">50</span>)</span><br><span class="line">btn.setText(<span class="string">"按钮"</span>)</span><br><span class="line">btn.clicked.connect(onClick_Button)</span><br><span class="line"></span><br><span class="line">widget.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 设置窗口和应用程序图标<br>- 窗口的setWindowIcon方法用于设置窗口的图标，<code>只在WindowsOS中可用</code>.<br>- QApplication中的setWindowIcon方法用于设置主窗口的图标和应用程序图标，但调用了窗口的setWindowIcon方法后，QApplication中的setWindowIcon方法就<code>只能用于设置应用程序的图标</code>了.<br><br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMainWindow,QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IconForm</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(IconForm, self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">250</span>,<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'设置窗口图标'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口图标</span></span><br><span class="line">        self.setWindowIcon(QIcon(<span class="string">'./images/Crayon03_64px.ico'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(<span class="string">'./images/Crayon03_64px.ico'</span>))</span><br><span class="line"></span><br><span class="line">    main = IconForm()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>### 为控件添加提示消息<br><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示控件提示信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout,QMainWindow,QApplication,QToolTip,QPushButton,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TooltipForm</span><span class="params">(QMainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">'SansSerif'</span>,<span class="number">12</span>))</span><br><span class="line">        self.setToolTip(<span class="string">'今天是&lt;b&gt;星期五&lt;/b&gt;'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">300</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">300</span>)</span><br><span class="line">        self.setWindowTitle(<span class="string">'设置控件提示消息'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'My Button'</span>)</span><br><span class="line">        self.button1.setToolTip(<span class="string">'Stay Foolish'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = TooltipForm()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><br><br>## QLabel控件<br>### QLabel控件的基本用法<br><strong>Presentation</strong><br><center><br>    <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLabelDemo.png" style="zoom:50%"><br></center><ul><li>Qlabel常用方法<ul><li>setAlignment(): 设置文本的对齐方式</li><li>setIndent(): 设置文本缩进</li><li>text(): 获取文本内容</li><li>setBuddy(): 设置伙伴关系</li><li>setText: 设置文本内容</li><li>selectedText(): 返回所选择的字符</li><li>setWordWrap(): 设置是否允许换行</li></ul></li><li>Qlabel常用的信号（事件）<ul><li>当鼠标滑过QLabel控件时触发：linkHovered</li><li>当鼠标单击QLabel控件时触发：linkActivated</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QVBoxLayout,QMainWindow,QApplication,QToolTip,QLabel,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap,QPalette</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLabelDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        label1 = QLabel(self)</span><br><span class="line">        label2 = QLabel(self)</span><br><span class="line">        label3 = QLabel(self)</span><br><span class="line">        label4 = QLabel(self)</span><br><span class="line"></span><br><span class="line">        label1.setText(<span class="string">"&lt;font color=yellow&gt; 这是一个文本标签.&lt;/font&gt;"</span>)</span><br><span class="line">        label1.setAutoFillBackground(<span class="keyword">True</span>)</span><br><span class="line">        palette = QPalette()</span><br><span class="line">        palette.setColor(QPalette.Window,Qt.blue) <span class="comment"># 设置背景色</span></span><br><span class="line">        label1.setPalette(palette)</span><br><span class="line">        label1.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        label2.setText(<span class="string">"&lt;a href='#'&gt; 欢迎使用Python GUI程序&lt;/a&gt;"</span>)</span><br><span class="line"></span><br><span class="line">        label3.setAlignment(Qt.AlignCenter)</span><br><span class="line">        label3.setToolTip(<span class="string">'这是一个图片标签'</span>)</span><br><span class="line">        label3.setPixmap(QPixmap(<span class="string">'./images/Python.jpg'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        label4.setOpenExternalLinks(<span class="keyword">True</span>) <span class="comment"># True，则open the link by the browser； False, 调用槽函数</span></span><br><span class="line">        label4.setText(<span class="string">'&lt;a href='</span><span class="string">'https://item.jd.com/12417265.html&gt;感谢关注《Python从菜鸟到高手》&lt;/a&gt;'</span>)</span><br><span class="line">        label4.setAlignment(Qt.AlignRight)</span><br><span class="line">        label4.setToolTip(<span class="string">'这是一个超链接'</span>)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(label3)</span><br><span class="line">        vbox.addWidget(label4)</span><br><span class="line"></span><br><span class="line">        label2.linkHovered.connect(self.linkHovered)</span><br><span class="line">        label4.linkActivated.connect(self.linkClicked)</span><br><span class="line"></span><br><span class="line">        self.setLayout(vbox)</span><br><span class="line">        self.setWindowTitle(<span class="string">'QLabel控件演示'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linkHovered</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'当鼠标滑过label2标签时，触发事件'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">linkClicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'当鼠标单击label4标签时，触发事件 '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    main = QLabelDemo()</span><br><span class="line">    main.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QLabel与伙伴控件"><a href="#QLabel与伙伴控件" class="headerlink" title="QLabel与伙伴控件"></a>QLabel与伙伴控件</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLabelBuddy.png" width="500"><br></center><ul><li><code>setBuddy()</code></li><li>mainLayout.addWidget(<code>object，rowIndex, columnIndex, row, column</code>)</li></ul><h2 id="QLineEdit控件"><a href="#QLineEdit控件" class="headerlink" title="QLineEdit控件"></a>QLineEdit控件</h2><h3 id="QLineEdit控件与回显模式（EchoMode）"><a href="#QLineEdit控件与回显模式（EchoMode）" class="headerlink" title="QLineEdit控件与回显模式（EchoMode）"></a>QLineEdit控件与回显模式（EchoMode）</h3><p><strong>Presentation</strong></p><center><br>     <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditEchoMode.png" width="500"><br></center> <ul><li>基本功能: 输入单行的文本</li><li>EchoMode（回显模式）<ul><li>Normal</li><li>NoEcho（已输入字符，但屏幕上无回应）</li><li>Password </li><li>PasswordEchoOnEdit (Normal聚焦 -&gt;&gt; Password失焦)</li></ul></li></ul><h3 id="限制QLineEdit控件的输入（校验器）"><a href="#限制QLineEdit控件的输入（校验器）" class="headerlink" title="限制QLineEdit控件的输入（校验器）"></a>限制QLineEdit控件的输入（校验器）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditValidator.png" width="500"><br></center><p>如限制只能输入整数、浮点数或满足一定条件的字符串</p><h3 id="使用掩码限制QLineEdit控件的输入"><a href="#使用掩码限制QLineEdit控件的输入" class="headerlink" title="使用掩码限制QLineEdit控件的输入"></a>使用掩码限制QLineEdit控件的输入</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditMask.png" width="500"><br></center><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用掩码限制QLineEdit控件的输入</span></span><br><span class="line"></span><br><span class="line">A    ASCII字母字符是必须输入的(A-Z、a-z)</span><br><span class="line">a    ASCII字母字符是允许输入的,但不是必需的(A-Z、a-z)</span><br><span class="line">N    ASCII字母字符是必须输入的(A-Z、a-z、0-9)</span><br><span class="line">n    ASII字母字符是允许输入的,但不是必需的(A-Z、a-z、0-9)</span><br><span class="line">X    任何字符都是必须输入的</span><br><span class="line">x    任何字符都是允许输入的,但不是必需的</span><br><span class="line">9    ASCII数字字符是必须输入的(0-9)</span><br><span class="line">0    ASCII数字字符是允许输入的,但不是必需的(0-9)</span><br><span class="line">D    ASCII数字字符是必须输入的(1-9)</span><br><span class="line">d    ASCII数字字符是允许输入的,但不是必需的(1-9)</span><br><span class="line"><span class="meta">#</span><span class="bash">    ASCI数字字符或加减符号是允许输入的,但不是必需的</span></span><br><span class="line">H    十六进制格式字符是必须输入的(A-F、a-f、0-9)</span><br><span class="line">h    十六进制格式字符是允许输入的,但不是必需的(A-F、a-f、0-9)</span><br><span class="line">B    二进制格式字符是必须输入的(0,1)</span><br><span class="line">b    二进制格式字符是允许输入的,但不是必需的(0,1)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">    所有的字母字符都大写</span></span><br><span class="line">&lt;    所有的字母字符都小写</span><br><span class="line">!    关闭大小写转换</span><br><span class="line">\    使用"\"转义上面列出的字符</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineEditMask</span><span class="params">(QWidget)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QLineEditMask,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'用掩码限制QLineEdit控件的输入'</span>)</span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        ipLineEdit = QLineEdit()</span><br><span class="line">        macLineEdit = QLineEdit()</span><br><span class="line">        dateLineEdit = QLineEdit()</span><br><span class="line">        licenseLineEdit = QLineEdit()</span><br><span class="line">        <span class="comment"># 192.168.21.45</span></span><br><span class="line">        ipLineEdit.setInputMask(<span class="string">'000.000.000.000;_'</span>)  <span class="comment"># 未输入时默认为_</span></span><br><span class="line">        macLineEdit.setInputMask(<span class="string">'HH:HH:HH:HH:HH:HH;_'</span>) <span class="comment"># 未输入时默认为_</span></span><br><span class="line">        dateLineEdit.setInputMask(<span class="string">'0000-00-00'</span>)</span><br><span class="line">        licenseLineEdit.setInputMask(<span class="string">'&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#'</span>) <span class="comment"># 未输入时默认为#</span></span><br><span class="line">        formLayout.addRow(<span class="string">'数字掩码'</span>,ipLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">'Mac掩码'</span>, macLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">'日期掩码'</span>,dateLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">'许可证掩码'</span>,licenseLineEdit)</span><br><span class="line"></span><br><span class="line">        self.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QLineEditMask()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3 id="QLineEdit控件综合案例"><a href="#QLineEdit控件综合案例" class="headerlink" title="QLineEdit控件综合案例"></a>QLineEdit控件综合案例</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QLineEditDemo.png" width="500"><br></center><h2 id="使用QTextEdit控件输入多行文本"><a href="#使用QTextEdit控件输入多行文本" class="headerlink" title="使用QTextEdit控件输入多行文本"></a>使用QTextEdit控件输入多行文本</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QTextEditDemo.png" width="500"><br></center><ul><li><code>textEdit =QTextEdit()</code></li></ul><h2 id="Button控件"><a href="#Button控件" class="headerlink" title="Button控件"></a>Button控件</h2><h3 id="按钮控件（QPushButton）"><a href="#按钮控件（QPushButton）" class="headerlink" title="按钮控件（QPushButton）"></a>按钮控件（QPushButton）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QPushButtonDemo.png" width="500"><br></center><ul><li>QAbstractButton</li><li>QPushButton</li><li>AToolButton</li><li>QRadioButton</li><li>QCheckBox</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPushButtonDemo</span><span class="params">(QDialog)</span> :</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QPushButtonDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QPushButton Demo'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.button1 = QPushButton(<span class="string">'第1个按钮'</span>)</span><br><span class="line">        self.button1.setText(<span class="string">'First Button1'</span>)</span><br><span class="line">        self.button1.setCheckable(<span class="keyword">True</span>)</span><br><span class="line">        self.button1.toggle()</span><br><span class="line">        self.button1.clicked.connect(self.buttonState)</span><br><span class="line">        self.button1.clicked.connect(<span class="keyword">lambda</span> :self.whichButton(self.button1))</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在文本前面显示图像</span></span><br><span class="line"></span><br><span class="line">        self.button2 = QPushButton(<span class="string">'图像按钮'</span>)</span><br><span class="line">        self.button2.setIcon(QIcon(QPixmap(<span class="string">'./images/python.png'</span>)))</span><br><span class="line">        self.button2.clicked.connect(<span class="keyword">lambda</span>:self.whichButton(self.button2))</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line"></span><br><span class="line">        self.button3 = QPushButton(<span class="string">'不可用的按钮'</span>)</span><br><span class="line">        self.button3.setEnabled(<span class="keyword">False</span>)</span><br><span class="line">        layout.addWidget(self.button3)</span><br><span class="line"></span><br><span class="line">        self.button4 = QPushButton(<span class="string">'&amp;MyButton'</span>)</span><br><span class="line">        self.button4.setDefault(<span class="keyword">True</span>)</span><br><span class="line">        self.button4.clicked.connect(<span class="keyword">lambda</span>:self.whichButton(self.button4))</span><br><span class="line">        layout.addWidget(self.button4)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line">        self.resize(<span class="number">400</span>,<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buttonState</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.button1.isChecked():</span><br><span class="line">            print(<span class="string">'按钮1已经被选中'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'按钮1未被选中'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whichButton</span><span class="params">(self,btn)</span>:</span></span><br><span class="line">        print(<span class="string">'被单击的按钮是&lt;'</span> + btn.text() + <span class="string">'&gt;'</span>)</span><br></pre></td></tr></table></figure><h3 id="单选按钮控件（QRadioButton）"><a href="#单选按钮控件（QRadioButton）" class="headerlink" title="单选按钮控件（QRadioButton）"></a>单选按钮控件（QRadioButton）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QRadioButtonDemo.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRadioButtonDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QRadioButtonDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QRadioButton'</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.button1 = QRadioButton(<span class="string">'单选按钮1'</span>)</span><br><span class="line">        self.button1.setChecked(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        self.button1.toggled.connect(self.buttonState)</span><br><span class="line">        layout.addWidget(self.button1)</span><br><span class="line"></span><br><span class="line">        self.button2 = QRadioButton(<span class="string">'单选按钮2'</span>)</span><br><span class="line">        self.button2.toggled.connect(self.buttonState)</span><br><span class="line">        layout.addWidget(self.button2)</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buttonState</span><span class="params">(self)</span>:</span></span><br><span class="line">        radioButton = self.sender()  <span class="comment"># Notice!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> radioButton.isChecked() == <span class="keyword">True</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + radioButton.text() + <span class="string">'&gt; 被选中'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'&lt;'</span> + radioButton.text() + <span class="string">'&gt; 被取消选中状态'</span>)</span><br></pre></td></tr></table></figure><h3 id="复选框控件（QCheckBox）"><a href="#复选框控件（QCheckBox）" class="headerlink" title="复选框控件（QCheckBox）"></a>复选框控件（QCheckBox）</h3><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QCheckBoxDemo.png" width="500"><br></center><ul><li>3种状态<ul><li>未选中：0</li><li>半选中：1</li><li>选中  ：2</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QCheckBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QCheckBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'复选框控件演示'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.checkBox1 = QCheckBox(<span class="string">'复选框控件1'</span>)</span><br><span class="line">        self.checkBox1.setChecked(<span class="keyword">True</span>)</span><br><span class="line">        self.checkBox1.stateChanged.connect(<span class="keyword">lambda</span>:self.checkboxState(self.checkBox1))</span><br><span class="line">        layout.addWidget(self.checkBox1)</span><br><span class="line"></span><br><span class="line">        self.checkBox2 = QCheckBox(<span class="string">'复选框控件2'</span>)</span><br><span class="line">        self.checkBox2.stateChanged.connect(<span class="keyword">lambda</span>:self.checkboxState(self.checkBox2))</span><br><span class="line">        layout.addWidget(self.checkBox2)</span><br><span class="line"></span><br><span class="line">        self.checkBox3 = QCheckBox(<span class="string">'半选中'</span>)</span><br><span class="line">        self.checkBox3.stateChanged.connect(<span class="keyword">lambda</span>:self.checkboxState(self.checkBox3))</span><br><span class="line">        self.checkBox3.setTristate(<span class="keyword">True</span>)   <span class="comment"># checkBox3可处于“半选中”状态</span></span><br><span class="line">        self.checkBox3.setCheckState(Qt.PartiallyChecked)</span><br><span class="line">        layout.addWidget(self.checkBox3)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkboxState</span><span class="params">(self,cb)</span>:</span></span><br><span class="line">        check1Status = self.checkBox1.text() + <span class="string">', isChecked='</span> + str(self.checkBox1.isChecked()) + <span class="string">',checkState='</span> + str(self.checkBox1.checkState()) + <span class="string">'\n'</span></span><br><span class="line">        check2Status = self.checkBox2.text() + <span class="string">', isChecked='</span> + str(self.checkBox2.isChecked()) + <span class="string">',checkState='</span> + str(self.checkBox2.checkState()) + <span class="string">'\n'</span></span><br><span class="line">        check3Status = self.checkBox3.text() + <span class="string">', isChecked='</span> + str(self.checkBox3.isChecked()) + <span class="string">',checkState='</span> + str(self.checkBox3.checkState()) + <span class="string">'\n'</span></span><br><span class="line">        print(check1Status + check2Status + check3Status)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QCheckBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="下拉列表控件（QComboBox）"><a href="#下拉列表控件（QComboBox）" class="headerlink" title="下拉列表控件（QComboBox）"></a>下拉列表控件（QComboBox）</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QComboBoxDemo.png" width="500"><br></center><ol><li>如果将列表项添加到QComboBox控件中</li><li>如何获取选中的列表项</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QComboBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QComboBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'下拉列表控件演示'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(<span class="string">'请选择编程语言'</span>)</span><br><span class="line"></span><br><span class="line">        self.cb = QComboBox()</span><br><span class="line">        self.cb.addItem(<span class="string">'C++'</span>)</span><br><span class="line">        self.cb.addItem(<span class="string">'Python'</span>)</span><br><span class="line">        self.cb.addItems([<span class="string">'Java'</span>,<span class="string">'C#'</span>,<span class="string">'Ruby'</span>])</span><br><span class="line"></span><br><span class="line">        self.cb.currentIndexChanged.connect(self.selectionChange)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line">        layout.addWidget(self.cb)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectionChange</span><span class="params">(self,i)</span>:</span></span><br><span class="line">        self.label.setText(self.cb.currentText())</span><br><span class="line">        self.label.adjustSize()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> range(self.cb.count()):</span><br><span class="line">            print(<span class="string">'item'</span> + str(count) + <span class="string">'='</span> + self.cb.itemText(count))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'current index'</span>,i,<span class="string">'selection changed'</span>, self.cb.currentText())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QComboBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="计数器控件（QSpinBox）"><a href="#计数器控件（QSpinBox）" class="headerlink" title="计数器控件（QSpinBox）"></a>计数器控件（QSpinBox）</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QSpinBoxDemo.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSpinBoxDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QSpinBoxDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'QSpinBox演示'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.label = QLabel(<span class="string">'当前值'</span>)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        self.sb = QSpinBox()</span><br><span class="line">        self.sb.setValue(<span class="number">18</span>)  <span class="comment"># 当前值</span></span><br><span class="line">        self.sb.setRange(<span class="number">10</span>,<span class="number">38</span>)</span><br><span class="line">        self.sb.setSingleStep(<span class="number">3</span>)</span><br><span class="line">        self.sb.valueChanged.connect(self.valueChange)</span><br><span class="line">        layout.addWidget(self.sb)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valueChange</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.label.setText(<span class="string">'当前值：'</span> + str(self.sb.value()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QSpinBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2 id="滑块控件（QSlider）"><a href="#滑块控件（QSlider）" class="headerlink" title="滑块控件（QSlider）"></a>滑块控件（QSlider）</h2><p><strong>Presentation</strong></p><center><br> <img src="/2019/01/24/PyQt5-Python-实战课程（三）/QSliderDemo.png" width="500"><br></center><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSliderDemo</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(QSliderDemo,self).__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'滑块控件演示'</span>)</span><br><span class="line">        self.resize(<span class="number">300</span>,<span class="number">700</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.label = QLabel(<span class="string">'你好 PyQt5'</span>)</span><br><span class="line">        self.label.setAlignment(Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(self.label)</span><br><span class="line"></span><br><span class="line">        self.slider = QSlider(Qt.Horizontal)</span><br><span class="line">        layout.addWidget(self.slider)</span><br><span class="line">        <span class="comment"># 设置最小值</span></span><br><span class="line">        self.slider.setMinimum(<span class="number">12</span>)</span><br><span class="line">        <span class="comment"># 设置最大值</span></span><br><span class="line">        self.slider.setMaximum(<span class="number">48</span>)</span><br><span class="line">        <span class="comment"># 步长</span></span><br><span class="line">        self.slider.setSingleStep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 设置当前值</span></span><br><span class="line">        self.slider.setValue(<span class="number">18</span>)</span><br><span class="line">        <span class="comment"># 设置刻度的位置，刻度在下方</span></span><br><span class="line">        self.slider.setTickPosition(QSlider.TicksBelow)</span><br><span class="line">        <span class="comment"># 设置刻度的间隔</span></span><br><span class="line">        self.slider.setTickInterval(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">        self.slider.valueChanged.connect(self.valueChange)</span><br><span class="line"></span><br><span class="line">        self.slider1 = QSlider(Qt.Vertical)</span><br><span class="line">        layout.addWidget(self.slider1)</span><br><span class="line">        <span class="comment"># 设置最小值</span></span><br><span class="line">        self.slider1.setMinimum(<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 设置最大值</span></span><br><span class="line">        self.slider1.setMaximum(<span class="number">60</span>)</span><br><span class="line">        <span class="comment"># 步长</span></span><br><span class="line">        self.slider1.setSingleStep(<span class="number">5</span>) <span class="comment"># not clear!</span></span><br><span class="line">        <span class="comment"># 设置当前值</span></span><br><span class="line">        self.slider1.setValue(<span class="number">30</span>) </span><br><span class="line">        <span class="comment"># 设置刻度的位置，刻度在下方</span></span><br><span class="line">        self.slider1.setTickPosition(QSlider.TicksLeft)</span><br><span class="line">        <span class="comment"># 设置刻度的间隔</span></span><br><span class="line">        self.slider1.setTickInterval(<span class="number">2</span>)</span><br><span class="line">        self.slider1.valueChanged.connect(self.valueChange)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">valueChange</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'当前值：%s'</span> % self.sender().value())</span><br><span class="line">        size = self.sender().value()</span><br><span class="line">        self.label.setFont(QFont(<span class="string">'Arial'</span>,size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QSliderDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（二）</title>
    <link href="http://yoursite.com/2019/01/23/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/23/PyQt5-Python-实战课程（二）/</id>
    <published>2019-01-23T14:07:29.000Z</published>
    <updated>2019-01-24T13:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="Qt-Designer实战-code"><a href="#Qt-Designer实战-code" class="headerlink" title="Qt Designer实战 code"></a>Qt Designer实战 <a href="https://github.com/Captainzj/PyQt5_Practice/tree/master/src/Chapter-2" target="_blank" rel="noopener"><code>code</code></a></h2><h3 id="安装和配置Qt-Designer"><a href="#安装和配置Qt-Designer" class="headerlink" title="安装和配置Qt Designer"></a>安装和配置Qt Designer</h3><ul><li>Anaconda默认已安装Designer.app ，其路径:<code>/Users/Captain/anaconda3/bin/Designer.app</code></li><li><p>配置PyCharm-External Tools: <code>打开PyCharm -&gt;&gt; Command + , -&gt;&gt; External Tools -&gt;&gt; ＋ -&gt;&gt; 如下图配置(Program:/Users/Captain/anaconda3/bin/Designer.app) -&gt;&gt; ok</code></p>   <center><br>      <img src="/2019/01/23/PyQt5-Python-实战课程（二）/ExternalTools-QTDesigner.png" width="500"><br>   </center><ul><li><p>使用External Tools<br>方式一： 选中project folder右键 -&gt;&gt; External Tools -&gt;&gt; QTDesigner</p><center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（二）/Use_ExternalTools1.png" width="500"><br></center><p>方式二：选中菜单栏中Tools -&gt;&gt; External Tools -&gt;&gt; QTDesigner</p><center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（二）/Use_ExternalTools2.png" width="500"><br></center></li></ul></li></ul><h3 id="Qt-Designer快速入门"><a href="#Qt-Designer快速入门" class="headerlink" title="Qt Designer快速入门"></a>Qt Designer快速入门</h3><p>了解Designer各窗口的基本功能</p><h3 id="将-ui文件转换为-py文件"><a href="#将-ui文件转换为-py文件" class="headerlink" title="将.ui文件转换为.py文件"></a>将.ui文件转换为.py文件</h3><p>方式一: <code>python -m PyQt5.uic.pyuic demo.ui -o demo.py</code><br>方式二: <code>pyuic5 demo.ui -o demo.py</code>(其中 <code>/Users/Captain/anaconda3/pkgs/pyqt-5.9.2-py37h655552a_2/bin/pyuic5</code>)</p><ul><li>为避免重复使用命令行，可借助’PyCharm - External Tools’.（配置方式可参照<a href="#配置PyCharm-External Tools">配置PyCharm-External Tools</a>）配置参数如下.（此处使用方式一）<ul><li><code>Program:/Users/Captain/anaconda3/bin/python.app</code></li><li><code>Arguments: -m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code></li><li><code>Working directory: $FileDir$</code><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/PyUIC.png" width="500"><br></center></li></ul></li></ul><h3 id="在QtDesigner中使用水平布局"><a href="#在QtDesigner中使用水平布局" class="headerlink" title="在QtDesigner中使用水平布局"></a>在QtDesigner中使用水平布局</h3><p>方式一：当MainWindow中已放置的控件时，选中需要完成水平布局的控件，<code>右键 -&gt;&gt; Lay out -&gt;&gt; Lay Out Horizontally</code> 或者 选中后使用shortcut（此处为<code>Command + 1</code>）</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/LayoutHorizontally.png" width="500"><br></center><br>方式二： 先放置”水平布局控件”，后于该控件中添加子控件<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/LayoutHorizontally2.png" style="zoom:30%"><br></center><p>将保存后的.ui文件转换为.py文件后，可运行如下代码(<code>RunMainWin_HorizontalLayout.py</code>)，显示界面<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> MainWin_HorizontalLayout  <span class="comment"># 此处IDE可能会report warning，解决方案：选中所在的folder -&gt;&gt; 右键 -&gt;&gt; Mark Directory as -&gt;&gt; Sources Root </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    mainWindow = QMainWindow()</span><br><span class="line">    ui = MainWin_HorizontalLayout.Ui_MainWindow()</span><br><span class="line">    <span class="comment"># 向主窗口上添加控件</span></span><br><span class="line">    ui.setupUi(mainWindow)</span><br><span class="line">    mainWindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><h3 id="在Qt-Designer中使用垂直布局"><a href="#在Qt-Designer中使用垂直布局" class="headerlink" title="在Qt Designer中使用垂直布局"></a>在Qt Designer中使用垂直布局</h3><p>与 <a href="#在QtDesigner中使用水平布局">使用水平布局</a> 方式一致，不再赘述</p><h3 id="在Qt-Designer中同时使用水平布局和垂直布局"><a href="#在Qt-Designer中同时使用水平布局和垂直布局" class="headerlink" title="在Qt Designer中同时使用水平布局和垂直布局"></a>在Qt Designer中同时使用水平布局和垂直布局</h3><p>嵌套使用 （下图中，先做两次水平布局，再做一次垂直布局）</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinVHLayout.png" width="500"><br></center><h3 id="在Qt-Designer中使用栅格布局"><a href="#在Qt-Designer中使用栅格布局" class="headerlink" title="在Qt Designer中使用栅格布局"></a>在Qt Designer中使用栅格布局</h3><p>效果展示</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinGridLayout.png" width="500"><br></center><br>### 向栅格布局拖动控件<br>先添加”Grid Layout”控件，再添加子控件.<br>### 在Qt Designer中使用表单布局<br>效果展示<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinFormLayout.png" width="500"><br></center><br>### 在容器中完成布局<br>使用方式同上，可用的容器如下所示<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/Containers.png" style="zoom:80%"><br></center><br>### 在Qt Designer中使用绝对布局<br>绝对布局，即可手动调整控件位置，不受specified Layout style的影响。<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinAbsoluteLayout.png" width="500"><br></center><br>### 在Qt Designer中使用分割线与间隔<br>- 间隔（Spacer）：Horizontal Spacer、Vertical Spacer<br>- 分割线（belong to ‘Display Widgets’）：Horizontal Line、Vertical Line<br><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSpacerLine.png" width="500"><br></center><h3 id="控件尺寸的最大值和最小值"><a href="#控件尺寸的最大值和最小值" class="headerlink" title="控件尺寸的最大值和最小值"></a>控件尺寸的最大值和最小值</h3><p>选中控件，Property Editor -&gt;&gt; minimumSize/ maximumSize</p><center><br>    <img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinMaxMinSize.png" style="zoom:80%"><br></center><h3 id="尺寸策略"><a href="#尺寸策略" class="headerlink" title="尺寸策略"></a>尺寸策略</h3><ul><li>Property Editor -&gt;&gt; sizePolicy（尺寸策略）<ul><li>Horizontal Policy（水平策略）、Vertical Policy（垂直策略）<ul><li>Fixed（常用）、Minimum、Maximum、Preferred、MinimumExpanding、Expanding（常用）、Ignored</li></ul></li><li>Horizontal Stretch（水平伸展）、Vertical Stretch（垂直伸展）<ul><li>Numeric（数值属性）</li></ul></li></ul></li></ul><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSizePolicy.png" width="500"><br></center><ul><li>sizeHint（期望尺寸）：对于大多数控件来说，sizeHint的值是只读的<ul><li>读取期望尺寸 <ul><li><code>self.pushButton.sizeHint().width()</code> # QPushButton  width:78</li><li><code>self.pushButton.sizeHint().height()</code> # QPushButton  height:32</li><li><code>self.textEdit.sizeHint().width()</code> # QTextEidt width:256</li><li><code>self.textEdit.sizeHint().height()</code> # QTextEidt height:192</li></ul></li><li>最小期望尺寸<ul><li><code>self.pushButton.minimumsizeHint().width()</code>  # QPushButton  width:78</li><li><code>self.pushButton.minimumsizeHint().height()</code>  # QPushButton  height:32</li><li><code>self.textEdit.minimumsizeHint().width()</code> # QTextEidt width:78</li><li><code>self.textEdit.minimumsizeHint().height()</code> # QTextEidt height:78</li></ul></li></ul></li></ul><h3 id="设置控件之间的伙伴关系"><a href="#设置控件之间的伙伴关系" class="headerlink" title="设置控件之间的伙伴关系"></a>设置控件之间的伙伴关系</h3><p>伙伴关系（关联关系）: 在Windows系统下，使用设置好的热键（如<code>(&amp;A)</code>），可快速聚焦至对应的伙伴控件<br>Operations: Eidt -&gt;&gt; Edit Buddies -&gt;&gt; 对控件进行“连线”，构建伙伴关系</p><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinBuddy.png" width="500"><br></center><h3 id="修改控件的Tab顺序"><a href="#修改控件的Tab顺序" class="headerlink" title="修改控件的Tab顺序"></a>修改控件的Tab顺序</h3><p>Operations: Edit -&gt;&gt; Edit Tab Order -&gt;&gt; 点击序号/右键-&gt;&gt; Tab Order List</p><center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinTabOrder.png" width="500"><br></center><h3 id="在Qt-Designer中完成信号与槽的设置"><a href="#在Qt-Designer中完成信号与槽的设置" class="headerlink" title="在Qt Designer中完成信号与槽的设置"></a>在Qt Designer中完成信号与槽的设置</h3><blockquote><p>信号、槽 是Qt的核心机制，也是PyQt的核心机制</p></blockquote><ul><li>信号（signal）：由对象或控制发射出去的消息；可以理解为事件</li><li>槽（slot）：本质上是一个函数或方法；可以理解为事件函数<ul><li>当单击按钮时，按钮就会向外部发送单击的消息，这些发送出去的信号需要一些代码来拦截，这些代码就是槽</li></ul></li><li>What to do？ <ul><li>需要将信号和槽绑定（多对多）</li></ul></li><li>How to do? <ul><li>Operations: Eidt -&gt;&gt; Eidt Signals/Slots -&gt;&gt; 如下操作.<center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot1.png" width="500"><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot2.png" width="500"><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot3.png" width="500"><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinSignalSlot.png" width="500"><br></center></li></ul></li></ul><h3 id="在Qt-Designer中为窗口添加菜单和工具栏"><a href="#在Qt-Designer中为窗口添加菜单和工具栏" class="headerlink" title="在Qt Designer中为窗口添加菜单和工具栏"></a>在Qt Designer中为窗口添加菜单和工具栏</h3><p>Operations: </p><ul><li>编辑菜单栏：在<code>Type Here</code>处依据提示进行编辑即可</li><li>添加工具栏：面板空白处右键 -&gt;&gt; Add Tool Bar<br>移除工具栏：已生成的工具栏空白处右键 -&gt;&gt; remove Toolbar ‘toolBar’<center><br><img src="/2019/01/23/PyQt5-Python-实战课程（二）/MainWinMenuToolbar.png" width="500"><br></center></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（一）</title>
    <link href="http://yoursite.com/2019/01/23/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/23/PyQt5-Python-实战课程（一）/</id>
    <published>2019-01-23T12:24:50.000Z</published>
    <updated>2019-01-24T13:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1-Python"><a href="#1-Python" class="headerlink" title="1. Python"></a>1. Python</h3><p><a href="https://www.anaconda.com/download/#macos" target="_blank" rel="noopener">Anaconda</a> 3<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python --version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python</span></span><br></pre></td></tr></table></figure></p><h3 id="2-PyQt5模块"><a href="#2-PyQt5模块" class="headerlink" title="2. PyQt5模块"></a>2. PyQt5模块</h3><p>Anaconda 默认已安装该模块，若需要手动安装，操作如下:（如果本机安装了多个python环境，要分清pip到底属于哪一个Python环境）<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pyqt5</span><br><span class="line">pip uninstall pyqt5</span><br></pre></td></tr></table></figure></p><p>在Python的REPL环境输入<code>import PyQt5</code>, 如果没有报错，说明PyQt5安装成功<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">import</span> PyQt5</span><br></pre></td></tr></table></figure></p><h3 id="3-PyCharm"><a href="#3-PyCharm" class="headerlink" title="3. PyCharm"></a>3. PyCharm</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/01/23/PyQt5-Python-实战课程（一）/PyCharm_Login.png" alt="PyCharm_Login" title="">                </div>                <div class="image-caption">PyCharm_Login</div>            </figure><h2 id="开发第一个基于PyQt5的桌面应用"><a href="#开发第一个基于PyQt5的桌面应用" class="headerlink" title="开发第一个基于PyQt5的桌面应用"></a>开发第一个基于PyQt5的桌面应用</h2><p>必须使用两个类: QApplication和QWidget。都在PyQt5.QtWidgets.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 创建QApplication类的实例</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># 创建一个窗口</span></span><br><span class="line">    w = QWidget()</span><br><span class="line">    <span class="comment"># 设置窗口的尺寸</span></span><br><span class="line">    w.resize(<span class="number">400</span>,<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 移动窗口</span></span><br><span class="line">    w.move(<span class="number">300</span>,<span class="number">300</span>)</span><br><span class="line">    <span class="comment"># 设置窗口的标题</span></span><br><span class="line">    w.setWindowTitle(<span class="string">'第一个基于PyQt5的桌面应用'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示窗口</span></span><br><span class="line">    w.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 进入程序的主循环，并通过exit函数确保主循环安全结束</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5(Python)实战课程（下）</title>
    <link href="http://yoursite.com/2019/01/23/PyQt5-Python-%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/01/23/PyQt5-Python-实战课程（下）/</id>
    <published>2019-01-23T11:24:50.000Z</published>
    <updated>2019-02-24T12:39:57.062Z</updated>
    
    <content type="html"><![CDATA[<p>【阅读时间】XXX min XXX words<br>【阅读内容】……</p><a id="more"></a><p>声明：此系列笔记《PyQt5(Python)实战课程》参考于某网络平台课程，仅作个人学习整理之用。</p><h3 id="PyQt5-Python-实战课程（七）"><a href="#PyQt5-Python-实战课程（七）" class="headerlink" title="PyQt5(Python)实战课程（七）"></a><a href="https://captainzj.github.io/2019/01/28/PyQt5-Python-实战课程（七）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（七）</a></h3><h4 id="表格与树🌲"><a href="#表格与树🌲" class="headerlink" title="表格与树🌲"></a>表格与树🌲</h4><ol><li>显示二维表数据（QTableView控件）<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/TableView.png" width="500"><br> </center><ul><li>要点说明<ul><li>需要创建QTableView实例和一个数据源（Model），然后将两者关联 <code>self.tableview.setModel(self.model)</code></li><li><code>MVC：Model   Viewer   Controller</code>    MVC的目的是将后端的数据和前端页面的耦合度降低</li></ul></li></ul></li><li><p>显示列数据（QListView控件）</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/ListView.png" width="500"><br> </center></li><li><p>扩展的列表控件（QListWidget）<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/ListWidget.png" width="500"><br> </center></p><ul><li>要点说明<ul><li>不通过model，直接在控件中添加数据 <code>class QListWidget(QListView)</code></li></ul></li></ul></li><li><p>扩展的表格控件（QTableWidget）<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/TableWidget.png" width="500"><br> </center></p><ul><li>要点说明：每一个Cell（单元格）是一个QTableWidgetItem</li></ul></li><li><p>在单元格中放置控件<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/PlaceControlInCell.png" width="500"><br> </center></p><ul><li>要点说明<ul><li>setItem：将文本放到单元格中</li><li>setCellWidget：将控件放到单元格中</li><li>setStyleSheet：设置控件的样式（QSS）</li></ul></li></ul></li><li><p>在表格中搜索Cell和行定位<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/DataLocation.png" width="500"><br> </center></p><ul><li>要点说明<ol><li>数据的定位：<code>findItems</code>  返回一个列表</li><li>如果找到了满足条件的单元格，会定位到单元格所在的行：<code>setSliderPosition(row)</code></li></ol></li></ul></li><li><p>设置单元格字体和颜色</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CellFontAndColor.png" width="500"><br> </center></li><li><p>按表格的某一列排序<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/ColumnSort.png" width="500"><br> </center></p><ul><li>要点说明: <code>sortItems(columnIndex，orderType）</code><ol><li>按哪一列排序</li><li>排序类型：升序或降序</li></ol></li></ul></li><li><p>设置单元格的文本对齐方式<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CellTextAlignment.png" width="500"><br> </center></p><ul><li><p>要点片段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newItem.setTextAlignment(Qt.AlignRight | Qt.AlignBottom)</span><br><span class="line">newItem.setTextAlignment(Qt.AlignCenter | Qt.AlignBottom)</span><br><span class="line">newItem.setTextAlignment(Qt.AlignRight)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>合并单元格<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Span.png" width="500"><br></center></p><ul><li>要点说明: <code>setSpan(row,col,要合并的行数，要合并的列数）</code></li></ul></li><li><p>设置单元格的尺寸<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CellSize.png" width="500"><br></center></p><ul><li>要点说明<ul><li>设置行高<code>tableWidget.setRowHeight(0, 80)</code></li><li>设置列宽<code>tableWidget.setColumnWidth(2, 120)</code></li></ul></li></ul></li><li><p>在单元格中实现图文混排的效果<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CellImageText.png" width="500"><br></center></p><ul><li>要点代码:<code>newItem = QTableWidgetItem(QIcon(&#39;./images/bao1.png&#39;),&#39;背包&#39;)</code></li></ul></li><li><p>改变单元格中图片的尺寸<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CellImageSize.png" width="500"><br></center></p><ul><li>要点说明: <code>setIconSize(QSize(width,height))</code></li></ul></li><li><p>在表格中显示上下文菜单<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/TableWidgetContextMenu.png" width="500"><br></center></p><ul><li><p>要点说明</p><ol><li><p>如何弹出菜单</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.tableWidget.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line">self.tableWidget.customContextMenuRequested.connect(self.generateMenu)</span><br></pre></td></tr></table></figure></li><li><p>如果在满足条件的情况下弹出菜单：槽方法被触发后，<code>QMenu()</code></p></li></ol></li></ul></li><li><p>树🌲控件（QTreeWidget）的基本用法</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/BasicTreeWidget.png" width="500"><br></center></li><li><p>为树🌲节点添加响应事件</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/TreeEvent.png" width="500"><br></center></li><li><p>增加、修改和删除树🌲控件中的节点</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/ModifyTree.png" width="500"><br></center></li><li><p>QTreeView控件与系统定制模式<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/TreeView.png" width="500"><br></center></p><ul><li><code>QTreeView</code>与<code>QTreeWidget</code>的区别在于load数据的方式不同，QTreeView使用<code>Model</code>方式（常见的有<code>QDirModel()</code>）</li></ul></li></ol><h3 id="PyQt5-Python-实战课程（八）"><a href="#PyQt5-Python-实战课程（八）" class="headerlink" title="PyQt5(Python)实战课程（八）"></a><a href="https://captainzj.github.io/2019/01/31/PyQt5-Python-实战课程（八）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（八）</a></h3><h4 id="PyQt5与Web交互"><a href="#PyQt5与Web交互" class="headerlink" title="PyQt5与Web交互"></a>PyQt5与Web交互</h4><ol><li><p>用Web浏览器控件（QWebEngineView）显示网页</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/QWebEngineView.png" width="500"><br> </center><ul><li>要点说明<ol><li>PyQt5和Web的交互技术</li><li>同时使用Python和Web开发程序，混合开发</li><li>Python+JavaScript+HTML5+CSS</li><li>QWebEngineView</li></ol></li></ul></li><li><p>装载本地Web页面</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/LocalHTML.png" width="500"><br> </center></li><li><p>显示嵌入Web页面    </p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/InnerHTML.png" width="500"><br> </center></li><li><p>PyQt5调用JavaScript代码，并返回值</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/PyQtCallJS.png" width="500"><br> </center></li><li><p>JavaScript调用Python API计算阶乘</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/PyFactorial.png" width="500"><br> </center></li></ol><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ol><li><p>绝对布局</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/AbsoluteLayout.png" width="500"><br> </center></li><li><p>水平盒布局（QHBoxLayout）</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/HBoxLayout.png" width="500"><br> </center></li><li><p>设置控件的对齐方式</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/HBoxLayoutAlign.png" width="500"><br> </center></li><li><p>垂直盒布局</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/VBoxLayout.png" width="500"><br> </center><ul><li>要点说明：<code>layout = QVBoxLayout()</code></li></ul></li><li><p>设置布局的伸缩量</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Stretch.png" width="500"><br>   <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Stretch1.png" width="500"><br> </center></li><li><p>让按钮永远在窗口的右下角</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/RightBottomButton.png" width="500"><br> </center></li><li><p>栅格布局：用循环方式实现计算器UI</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Calc.png" width="500"><br> </center></li><li><p>栅格布局：进行表单UI设计</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/GridForm.png" width="500"><br> </center></li><li><p>表单布局</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/FormLayout.png" width="500"><br> </center></li><li><p>拖动控件之间的边界（QSplitter）</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Splitter.png" width="500"><br></center></li></ol><h4 id="信号（Signal）与槽（Slot）"><a href="#信号（Signal）与槽（Slot）" class="headerlink" title="信号（Signal）与槽（Slot）"></a>信号（Signal）与槽（Slot）</h4><ol><li>信号与槽基础 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/SignalSlotDemo.png" width="500"><br> </center></li><li>自定义信号实现对象之间的通信 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CustomSignal.png" width="500"><br> </center></li><li>可以传递多个参数的信号 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CustomSignal.png" width="500"><br> </center></li><li>为类添加多个信号（重载形式的信号） <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/MultiSignal.png" width="500"><br> </center></li><li>信号和槽的N对N连接与断开连接 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/NNSignal.png" width="500"><br> </center></li><li>为窗口添加新号 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/WinSignal.png" width="500"><br> </center></li><li>多线程更新UI数据 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/ThreadUpdateUI.png" width="500"><br> </center></li><li>信号与槽自动连接<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/AutoSignalSlot.png" width="500"><br> </center><ul><li>要点说明：<code>QtCore.QMetaObject.connectSlotsByName(self)</code></li></ul></li><li>使用Lambda表达式为槽传递参数<br> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/LambdaSlotArg.png" width="500"><br> </center><ul><li>要点说明<br>Lambda表达式：匿名函数，也就是没有名字的函数</li></ul></li><li>使用Partial对象为槽传递参数<center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/PartialSlotArg.png" width="500"><br></center></li><li>Override（覆盖）槽函数<center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/OverrideSlot.png" width="500"><br></center></li><li>多窗口交互（1）：不使用信号和槽<center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/MultiWindow1.png" width="500"><br></center></li><li><p>多窗口交互（2）：使用信号和槽</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/MultiWindow2.png" width="500"><br></center><ul><li><p>要点说明<br>  如果一个窗口A与另一个窗口B交互，那么A尽量不要直接访问B窗口中的控件，<br>  应该访问B窗口中的信号，并指定与信号绑定的槽函数</p><p>  例：如果A直接访问B窗口的控件，一旦B窗口控件发生改变，那么A和B的代码都需要变化</p><p>  如果A访问的是B中的信号，那么B中的控件发生了改变，只需要修改B中的代码即可</p></li></ul></li></ol><h3 id="PyQt5-Python-实战课程（九）"><a href="#PyQt5-Python-实战课程（九）" class="headerlink" title="PyQt5(Python)实战课程（九）"></a><a href="https://captainzj.github.io/2019/02/01/PyQt5-Python-实战课程（九）/" target="_blank" rel="noopener">PyQt5(Python)实战课程（九）</a></h3><h4 id="窗口、绘图与特效"><a href="#窗口、绘图与特效" class="headerlink" title="窗口、绘图与特效"></a>窗口、绘图与特效</h4><ol><li><p>设置窗口风格</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/WindowStyle.png" width="500"><br> </center><ul><li>要点说明：<code>QApplication.setStyle(...)</code></li></ul></li><li><p>设置窗口样式</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/WindowPattern.png" width="500"><br> </center></li><li><p>用代码设置窗口的最大化和最小化</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/WindowMaxMin.png" width="500"><br> </center></li><li><p>项目实战：实现绘图应用</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Drawing.png" width="500"><br> </center><ul><li>要点说明（需要解决3个核心内容）<ol><li>如何绘图<br>在paintEvent方法中绘图，通过调用update方法触发painEvent的调用</li><li>在哪里绘图<br>在白色背景的QPixmap对象中绘图</li><li>如何通过移动鼠标进行绘图<br>鼠标拥有3个事件：(缺任一，不可运行)<br>（1）鼠标按下：mousePressEvent<br>（2）鼠标移动：mouseMoveEvent<br>（3）鼠标抬起：mouseReleaseEvent</li></ol></li></ul></li><li><p>QSS基础</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/BasicQSS.png" width="500"><br> </center><ul><li>要点说明：QSS（<code>Qt Style Sheets</code>） Qt样式表</li></ul></li><li>使用QSS选择器设置控件样式 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/QSSSelector.png" width="500"><br> </center></li><li>QSS子控件选择器 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/QSSSubControl.png" width="500"><br> </center></li><li><p>QDarkStyleSheet样式</p><ul><li>要点说明：<code>pip install qdarkstyle</code>/<code>conda install qdarkstyle</code></li></ul></li><li><p>3种设置背景色和背景图片的方式</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Background1.png" width="500"><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Background2.png" width="500"><br>      </center><ul><li>使用多种方式设置窗口背景色和背景图片<ol><li>QSS</li><li>QPalette</li><li>直接绘制</li></ol></li></ul></li></ol><ol start="10"><li><p>实现不规则窗口（异形窗口）</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/AbnormityWindow.png" width="500"><br></center><ul><li>要点说明<ol><li>通过mask实现异形窗口</li><li>需要一张透明的png图，透明部分被扣出，形成一个非矩形的区域</li><li>移动和关闭不规则窗口</li></ol></li></ul></li><li><p>移动和关闭不规则窗口（异形窗口）</p></li><li><p>实现异形窗口动画效果</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/AnimationWindows.png" width="500"><br></center></li><li><p>装载gif动画文件</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/gifanim.png" width="500"><br></center></li><li>使用QSS为标签和按钮添加背景图<center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/LabelButtonBackground.png" width="500"><br></center></li><li>缩放图片<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/ScaleImage.png" width="500"><br></center><ul><li>要点说明：<code>QImage.scaled</code></li></ul></li><li>创建透明和半透明窗口<br><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/OpacityWindow.png" width="500"><br></center><ul><li>要点说明：<code>win.setWindowOpacity(0.6)</code></li></ul></li><li>装载QSS文件<center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/LoadQSS.png" width="500"><br></center></li><li><p>用动画效果改变窗口的尺寸</p><center><br> <img src="/2019/01/23/PyQt5-Python-实战课程（下）/AnimWindow.png" width="500"><br></center><ul><li>要点说明：<code>QPropertyAnimation</code></li></ul></li><li><p>用动画效果–不同速度移动窗口</p><ul><li>效果说明: 两个窗口（window1、window2）并行（同时）/串行（一先一后）biubiubiu动画移动</li></ul></li></ol><h4 id="其他应用"><a href="#其他应用" class="headerlink" title="其他应用"></a>其他应用</h4><ol><li><p>用PyInstaller打包PyQt5</p></li><li><p>操作SQLite数据库</p></li><li><p>使用可视化的方式对SQLite数据库进行增、删、改、查操作</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/DataGrid.png" width="500"><br> </center></li><li><p>分页显示数据</p> <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/DataGrid1.png" width="500"><br> </center><ul><li>要点说明：<code>limit n,m</code></li></ul></li><li>使用PyQtGraph进行数据可视化 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/Graph.png" width="500"><br> </center></li><li>项目实战：天气信息查询 <center><br>  <img src="/2019/01/23/PyQt5-Python-实战课程（下）/CallWeatherWin.png" width="500"><br> </center></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【阅读时间】XXX min XXX words&lt;br&gt;【阅读内容】……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PyQt5" scheme="http://yoursite.com/tags/PyQt5/"/>
    
  </entry>
  
</feed>
